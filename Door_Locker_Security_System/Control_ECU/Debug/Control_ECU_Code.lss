
Control_ECU_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003da2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00003da2  00003e36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080007a  0080007a  00003e50  2**0
                  ALLOC
  3 .stab         00004068  00000000  00000000  00003e50  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000303f  00000000  00000000  00007eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000aef7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000b037  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000b1a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000cdf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000dcdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ea88  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ebe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ee75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f643  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 66 18 	jmp	0x30cc	; 0x30cc <__vector_4>
      14:	0c 94 33 18 	jmp	0x3066	; 0x3066 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 00 18 	jmp	0x3000	; 0x3000 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 cd 17 	jmp	0x2f9a	; 0x2f9a <__vector_9>
      28:	0c 94 9a 17 	jmp	0x2f34	; 0x2f34 <__vector_10>
      2c:	0c 94 67 17 	jmp	0x2ece	; 0x2ece <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 38       	cpi	r26, 0x81	; 129
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cc 05 	call	0xb98	; 0xb98 <main>
      8a:	0c 94 cf 1e 	jmp	0x3d9e	; 0x3d9e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 67 1e 	jmp	0x3cce	; 0x3cce <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 83 1e 	jmp	0x3d06	; 0x3d06 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 73 1e 	jmp	0x3ce6	; 0x3ce6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8f 1e 	jmp	0x3d1e	; 0x3d1e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 73 1e 	jmp	0x3ce6	; 0x3ce6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8f 1e 	jmp	0x3d1e	; 0x3d1e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 67 1e 	jmp	0x3cce	; 0x3cce <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 83 1e 	jmp	0x3d06	; 0x3d06 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 73 1e 	jmp	0x3ce6	; 0x3ce6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8f 1e 	jmp	0x3d1e	; 0x3d1e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 73 1e 	jmp	0x3ce6	; 0x3ce6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8f 1e 	jmp	0x3d1e	; 0x3d1e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 73 1e 	jmp	0x3ce6	; 0x3ce6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8f 1e 	jmp	0x3d1e	; 0x3d1e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 77 1e 	jmp	0x3cee	; 0x3cee <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 93 1e 	jmp	0x3d26	; 0x3d26 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:

/*
 * Function: Buzzer_init
 * Description: Initializes the buzzer pin direction and turns off the buzzer.
 */
void Buzzer_init(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
    // Set the buzzer pin direction to output
    GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 1f 08 	call	0x103e	; 0x103e <GPIO_setupPinDirection>

    // Turn off the buzzer initially
    GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	67 e0       	ldi	r22, 0x07	; 7
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_on>:
/*
 * Function: Buzzer_on
 * Description: Activates the buzzer.
 */

void Buzzer_on(void) {
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
    // Set the buzzer pin to high to activate the buzzer
    GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	67 e0       	ldi	r22, 0x07	; 7
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_off>:
/*
 * Function: Buzzer_off
 * Description: Deactivates the buzzer.
 */

void Buzzer_off(void) {
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
    // Set the buzzer pin to low to deactivate the buzzer
    GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	67 e0       	ldi	r22, 0x07	; 7
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <main>:
 */
void countOneSecond(void);

/* ################################ Main Program ################################ */

int main() {
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
     ba0:	68 97       	sbiw	r28, 0x18	; 24
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	f8 94       	cli
     ba6:	de bf       	out	0x3e, r29	; 62
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	cd bf       	out	0x3d, r28	; 61
	/* Configuration and initialization functions */
	/* Enable Global interrupt SREG */
	SREG_REG.Bits.I_Bit = 1;
     bac:	ef e5       	ldi	r30, 0x5F	; 95
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	80 68       	ori	r24, 0x80	; 128
     bb4:	80 83       	st	Z, r24
	uint8 flag, action, mode;
	/* select the configuration of UART */
	UART_ConfigType uart_config = { ASYNCHRONOUS, UART_DATA_8_BITS,
			UART_NO_PARITY, UART_ONE_STOP_BIT, UART_BAUD_RATE_9600 };
     bb6:	ce 01       	movw	r24, r28
     bb8:	04 96       	adiw	r24, 0x04	; 4
     bba:	98 8b       	std	Y+16, r25	; 0x10
     bbc:	8f 87       	std	Y+15, r24	; 0x0f
     bbe:	eb e6       	ldi	r30, 0x6B	; 107
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	fa 8b       	std	Y+18, r31	; 0x12
     bc4:	e9 8b       	std	Y+17, r30	; 0x11
     bc6:	f8 e0       	ldi	r31, 0x08	; 8
     bc8:	fb 8b       	std	Y+19, r31	; 0x13
     bca:	e9 89       	ldd	r30, Y+17	; 0x11
     bcc:	fa 89       	ldd	r31, Y+18	; 0x12
     bce:	00 80       	ld	r0, Z
     bd0:	89 89       	ldd	r24, Y+17	; 0x11
     bd2:	9a 89       	ldd	r25, Y+18	; 0x12
     bd4:	01 96       	adiw	r24, 0x01	; 1
     bd6:	9a 8b       	std	Y+18, r25	; 0x12
     bd8:	89 8b       	std	Y+17, r24	; 0x11
     bda:	ef 85       	ldd	r30, Y+15	; 0x0f
     bdc:	f8 89       	ldd	r31, Y+16	; 0x10
     bde:	00 82       	st	Z, r0
     be0:	8f 85       	ldd	r24, Y+15	; 0x0f
     be2:	98 89       	ldd	r25, Y+16	; 0x10
     be4:	01 96       	adiw	r24, 0x01	; 1
     be6:	98 8b       	std	Y+16, r25	; 0x10
     be8:	8f 87       	std	Y+15, r24	; 0x0f
     bea:	9b 89       	ldd	r25, Y+19	; 0x13
     bec:	91 50       	subi	r25, 0x01	; 1
     bee:	9b 8b       	std	Y+19, r25	; 0x13
     bf0:	eb 89       	ldd	r30, Y+19	; 0x13
     bf2:	ee 23       	and	r30, r30
     bf4:	51 f7       	brne	.-44     	; 0xbca <main+0x32>
	/*Passing configuration to uart init*/
	UART_init(&uart_config);
     bf6:	ce 01       	movw	r24, r28
     bf8:	04 96       	adiw	r24, 0x04	; 4
     bfa:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <UART_init>
	/* select the configuration of TWI */
	TWI_ConfigType twi_config =
			{ MC_ADDRESS, TWI_PRESCALER_1, TWI_BAUDRATE_400K };
     bfe:	ce 01       	movw	r24, r28
     c00:	0c 96       	adiw	r24, 0x0c	; 12
     c02:	9d 8b       	std	Y+21, r25	; 0x15
     c04:	8c 8b       	std	Y+20, r24	; 0x14
     c06:	e8 e6       	ldi	r30, 0x68	; 104
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	ff 8b       	std	Y+23, r31	; 0x17
     c0c:	ee 8b       	std	Y+22, r30	; 0x16
     c0e:	f3 e0       	ldi	r31, 0x03	; 3
     c10:	f8 8f       	std	Y+24, r31	; 0x18
     c12:	ee 89       	ldd	r30, Y+22	; 0x16
     c14:	ff 89       	ldd	r31, Y+23	; 0x17
     c16:	00 80       	ld	r0, Z
     c18:	8e 89       	ldd	r24, Y+22	; 0x16
     c1a:	9f 89       	ldd	r25, Y+23	; 0x17
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	9f 8b       	std	Y+23, r25	; 0x17
     c20:	8e 8b       	std	Y+22, r24	; 0x16
     c22:	ec 89       	ldd	r30, Y+20	; 0x14
     c24:	fd 89       	ldd	r31, Y+21	; 0x15
     c26:	00 82       	st	Z, r0
     c28:	8c 89       	ldd	r24, Y+20	; 0x14
     c2a:	9d 89       	ldd	r25, Y+21	; 0x15
     c2c:	01 96       	adiw	r24, 0x01	; 1
     c2e:	9d 8b       	std	Y+21, r25	; 0x15
     c30:	8c 8b       	std	Y+20, r24	; 0x14
     c32:	98 8d       	ldd	r25, Y+24	; 0x18
     c34:	91 50       	subi	r25, 0x01	; 1
     c36:	98 8f       	std	Y+24, r25	; 0x18
     c38:	e8 8d       	ldd	r30, Y+24	; 0x18
     c3a:	ee 23       	and	r30, r30
     c3c:	51 f7       	brne	.-44     	; 0xc12 <main+0x7a>
	/* passing the configuration to initialization function of TWI */
	TWI_init(&twi_config);
     c3e:	ce 01       	movw	r24, r28
     c40:	0c 96       	adiw	r24, 0x0c	; 12
     c42:	0e 94 28 1c 	call	0x3850	; 0x3850 <TWI_init>
	/*Initialization buzzer*/
	Buzzer_init();
     c46:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>
	/* call the initialization function of PWM TIMER0 */
	Timer0_init_PWM();
     c4a:	0e 94 38 1b 	call	0x3670	; 0x3670 <Timer0_init_PWM>
	/*Initialization DC motor*/
	DC_Motor_Init();
     c4e:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DC_Motor_Init>
	/*Initialization PIR Sensor*/
	PIR_init();
     c52:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <PIR_init>

	while (youssef_is_here) {
		/* receive the action from HMI ECU through UART */
		action = UART_recieveByte();
     c56:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <UART_recieveByte>
     c5a:	8a 83       	std	Y+2, r24	; 0x02
		/* if the action is create password, then receive and save it */
		if (action == CREATE_PASSWORD_ACTION) {
     c5c:	8a 81       	ldd	r24, Y+2	; 0x02
     c5e:	8c 3c       	cpi	r24, 0xCC	; 204
     c60:	19 f4       	brne	.+6      	; 0xc68 <main+0xd0>
			SavePasswordToEEPROM();
     c62:	0e 94 96 06 	call	0xd2c	; 0xd2c <SavePasswordToEEPROM>
     c66:	f7 cf       	rjmp	.-18     	; 0xc56 <main+0xbe>
		} else if (action == CHECK_PASSWORD_ACTION) {
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
     c6a:	8d 3d       	cpi	r24, 0xDD	; 221
     c6c:	a1 f7       	brne	.-24     	; 0xc56 <main+0xbe>
			/* the action is check password */
			/* receive the mode from HMI ECU through UART */
			mode = UART_recieveByte();
     c6e:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <UART_recieveByte>
     c72:	89 83       	std	Y+1, r24	; 0x01
			if (mode == OPEN_DOOR_MODE) {
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	8f 3f       	cpi	r24, 0xFF	; 255
     c78:	d1 f5       	brne	.+116    	; 0xcee <main+0x156>
				/* mode is open door mode */
				while (youssef_is_here) {
					/* receive the password and check if equal to the one in EEPROM */
					flag = RecivePasswordAndCheck();
     c7a:	0e 94 32 07 	call	0xe64	; 0xe64 <RecivePasswordAndCheck>
     c7e:	8b 83       	std	Y+3, r24	; 0x03
					if (flag) {
     c80:	8b 81       	ldd	r24, Y+3	; 0x03
     c82:	88 23       	and	r24, r24
     c84:	29 f1       	breq	.+74     	; 0xcd0 <main+0x138>
						/* the password is correct and send to HMI that password is correct */
						UART_sendByte(PASSWORD_CORRECT);
     c86:	8a ea       	ldi	r24, 0xAA	; 170
     c88:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <UART_sendByte>
						/* turn on motor at max speed with clock wise direction */
						DC_Motor_Rotate(ClockWise, 100);
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	64 e6       	ldi	r22, 0x64	; 100
     c90:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DC_Motor_Rotate>
						/* waiting for 15 seconds until the door is unlocking */
						Timer1_DelaySecond(DOOR_UNLOCKING_PERIOD);
     c94:	85 e0       	ldi	r24, 0x05	; 5
     c96:	0e 94 6a 07 	call	0xed4	; 0xed4 <Timer1_DelaySecond>
						/*wait until no people are entering*/
						DC_Motor_Rotate(Stop, 0);
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DC_Motor_Rotate>
						while (1) {
							if (PIR_getValue()) {
     ca2:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <PIR_getValue>
     ca6:	88 23       	and	r24, r24
     ca8:	21 f0       	breq	.+8      	; 0xcb2 <main+0x11a>
								/*If motion detected*/
								UART_sendByte(PEOPLE_ENTERING);
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <UART_sendByte>
     cb0:	f8 cf       	rjmp	.-16     	; 0xca2 <main+0x10a>
							} else {
								/*If no motion is detected, lock the door*/
								UART_sendByte(NO_PEOPLE_ENTERING);
     cb2:	82 e0       	ldi	r24, 0x02	; 2
     cb4:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <UART_sendByte>
								/*Timer1_DelaySecond(3);*/
								break;
							}
						}
						/* turn on motor at max speed with anti clock wise direction */
						DC_Motor_Rotate(Anti_ClockWise, 100);
     cb8:	82 e0       	ldi	r24, 0x02	; 2
     cba:	64 e6       	ldi	r22, 0x64	; 100
     cbc:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DC_Motor_Rotate>
						/* waiting for 15 seconds until the door is locking  */
						Timer1_DelaySecond(DOOR_LOCKING_PERIOD);
     cc0:	85 e0       	ldi	r24, 0x05	; 5
     cc2:	0e 94 6a 07 	call	0xed4	; 0xed4 <Timer1_DelaySecond>
						/*Stop the DC motor*/
						DC_Motor_Rotate(Stop, 0);
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	60 e0       	ldi	r22, 0x00	; 0
     cca:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DC_Motor_Rotate>
     cce:	c3 cf       	rjmp	.-122    	; 0xc56 <main+0xbe>
						break;
					} else {
						/* the password is incorrect and send to HMI that password is incorrect */
						UART_sendByte(PASSWORD_INCORRECT);
     cd0:	8b eb       	ldi	r24, 0xBB	; 187
     cd2:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <UART_sendByte>
						/* wait for replay from HMI ECU to take an action of incorrect password */
						if (UART_recieveByte() == BUZZER_ON) {
     cd6:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <UART_recieveByte>
     cda:	88 36       	cpi	r24, 0x68	; 104
     cdc:	71 f6       	brne	.-100    	; 0xc7a <main+0xe2>
							/* if receiving buzzer on byte, that mean the 3 tries is made */
							/* turn on the buzzer */
							Buzzer_on();
     cde:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>
							/* waiting for 1 minute */
							Timer1_DelaySecond(BUZZER_ACTIVE_PERIOD);
     ce2:	85 e0       	ldi	r24, 0x05	; 5
     ce4:	0e 94 6a 07 	call	0xed4	; 0xed4 <Timer1_DelaySecond>
							/* turn off the buzzer */
							Buzzer_off();
     ce8:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
     cec:	b4 cf       	rjmp	.-152    	; 0xc56 <main+0xbe>
						} else {
							continue;
						}
					}
				}
			} else if (mode == CHANGE_PASSWORD_MODE) {
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	8e 3e       	cpi	r24, 0xEE	; 238
     cf2:	09 f0       	breq	.+2      	; 0xcf6 <main+0x15e>
     cf4:	b0 cf       	rjmp	.-160    	; 0xc56 <main+0xbe>
				/*mode is change password*/
				while (youssef_is_here) {
					/* receive the password and check if equal to the one in EEPROM */
					flag = RecivePasswordAndCheck();
     cf6:	0e 94 32 07 	call	0xe64	; 0xe64 <RecivePasswordAndCheck>
     cfa:	8b 83       	std	Y+3, r24	; 0x03
					if (flag) {
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	88 23       	and	r24, r24
     d00:	31 f0       	breq	.+12     	; 0xd0e <main+0x176>
						/* the password is correct and send to HMI that password is correct */
						UART_sendByte(PASSWORD_CORRECT);
     d02:	8a ea       	ldi	r24, 0xAA	; 170
     d04:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <UART_sendByte>
						/* start the action of change password */
						SavePasswordToEEPROM();
     d08:	0e 94 96 06 	call	0xd2c	; 0xd2c <SavePasswordToEEPROM>
     d0c:	a4 cf       	rjmp	.-184    	; 0xc56 <main+0xbe>
						break;
					} else {
						/* the password is incorrect and send to HMI that password is incorrect */
						UART_sendByte(PASSWORD_INCORRECT);
     d0e:	8b eb       	ldi	r24, 0xBB	; 187
     d10:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <UART_sendByte>
						if (UART_recieveByte() == BUZZER_ON) {
     d14:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <UART_recieveByte>
     d18:	88 36       	cpi	r24, 0x68	; 104
     d1a:	69 f7       	brne	.-38     	; 0xcf6 <main+0x15e>
							/* if receiving buzzer on byte, that mean the 3 tries is made */
							/* turn on the buzzer */
							Buzzer_on();
     d1c:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>
							/* waiting for 1 minute */
							Timer1_DelaySecond(BUZZER_ACTIVE_PERIOD);
     d20:	85 e0       	ldi	r24, 0x05	; 5
     d22:	0e 94 6a 07 	call	0xed4	; 0xed4 <Timer1_DelaySecond>
							/* turn off the buzzer */
							Buzzer_off();
     d26:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
     d2a:	95 cf       	rjmp	.-214    	; 0xc56 <main+0xbe>

00000d2c <SavePasswordToEEPROM>:
 * Description :
 * Function to save the received password through UART to EEPROM.
 * Function input:  void.
 * Function output: void.
 */
void SavePasswordToEEPROM() {
     d2c:	df 93       	push	r29
     d2e:	cf 93       	push	r28
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
     d34:	60 97       	sbiw	r28, 0x10	; 16
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
	uint8 i = 0; // Counter for password digits
     d40:	18 8a       	std	Y+16, r1	; 0x10
     d42:	83 c0       	rjmp	.+262    	; 0xe4a <SavePasswordToEEPROM+0x11e>
	uint8 temp;
	while (i < PASSWORD_LENGTH) {
		UART_sendByte(START_COMMUNICATION);
     d44:	81 e1       	ldi	r24, 0x11	; 17
     d46:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <UART_sendByte>
		/* recieving bytes */
		temp = UART_recieveByte();
     d4a:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <UART_recieveByte>
     d4e:	8f 87       	std	Y+15, r24	; 0x0f
		/*store every recieved byte in EEPROM*/
		EEPROM_writeByte(EEPROM_FIRST_ADDRESS_VALUE + i, temp);
     d50:	88 89       	ldd	r24, Y+16	; 0x10
     d52:	88 2f       	mov	r24, r24
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	8f 5e       	subi	r24, 0xEF	; 239
     d58:	9c 4f       	sbci	r25, 0xFC	; 252
     d5a:	6f 85       	ldd	r22, Y+15	; 0x0f
     d5c:	0e 94 87 1b 	call	0x370e	; 0x370e <EEPROM_writeByte>
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	a0 e2       	ldi	r26, 0x20	; 32
     d66:	b1 e4       	ldi	r27, 0x41	; 65
     d68:	8b 87       	std	Y+11, r24	; 0x0b
     d6a:	9c 87       	std	Y+12, r25	; 0x0c
     d6c:	ad 87       	std	Y+13, r26	; 0x0d
     d6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d70:	6b 85       	ldd	r22, Y+11	; 0x0b
     d72:	7c 85       	ldd	r23, Y+12	; 0x0c
     d74:	8d 85       	ldd	r24, Y+13	; 0x0d
     d76:	9e 85       	ldd	r25, Y+14	; 0x0e
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	4a ef       	ldi	r20, 0xFA	; 250
     d7e:	54 e4       	ldi	r21, 0x44	; 68
     d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d84:	dc 01       	movw	r26, r24
     d86:	cb 01       	movw	r24, r22
     d88:	8f 83       	std	Y+7, r24	; 0x07
     d8a:	98 87       	std	Y+8, r25	; 0x08
     d8c:	a9 87       	std	Y+9, r26	; 0x09
     d8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d90:	6f 81       	ldd	r22, Y+7	; 0x07
     d92:	78 85       	ldd	r23, Y+8	; 0x08
     d94:	89 85       	ldd	r24, Y+9	; 0x09
     d96:	9a 85       	ldd	r25, Y+10	; 0x0a
     d98:	20 e0       	ldi	r18, 0x00	; 0
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	40 e8       	ldi	r20, 0x80	; 128
     d9e:	5f e3       	ldi	r21, 0x3F	; 63
     da0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     da4:	88 23       	and	r24, r24
     da6:	2c f4       	brge	.+10     	; 0xdb2 <SavePasswordToEEPROM+0x86>
		__ticks = 1;
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	9e 83       	std	Y+6, r25	; 0x06
     dae:	8d 83       	std	Y+5, r24	; 0x05
     db0:	3f c0       	rjmp	.+126    	; 0xe30 <SavePasswordToEEPROM+0x104>
	else if (__tmp > 65535)
     db2:	6f 81       	ldd	r22, Y+7	; 0x07
     db4:	78 85       	ldd	r23, Y+8	; 0x08
     db6:	89 85       	ldd	r24, Y+9	; 0x09
     db8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	3f ef       	ldi	r19, 0xFF	; 255
     dbe:	4f e7       	ldi	r20, 0x7F	; 127
     dc0:	57 e4       	ldi	r21, 0x47	; 71
     dc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dc6:	18 16       	cp	r1, r24
     dc8:	4c f5       	brge	.+82     	; 0xe1c <SavePasswordToEEPROM+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dca:	6b 85       	ldd	r22, Y+11	; 0x0b
     dcc:	7c 85       	ldd	r23, Y+12	; 0x0c
     dce:	8d 85       	ldd	r24, Y+13	; 0x0d
     dd0:	9e 85       	ldd	r25, Y+14	; 0x0e
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	40 e2       	ldi	r20, 0x20	; 32
     dd8:	51 e4       	ldi	r21, 0x41	; 65
     dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dde:	dc 01       	movw	r26, r24
     de0:	cb 01       	movw	r24, r22
     de2:	bc 01       	movw	r22, r24
     de4:	cd 01       	movw	r24, r26
     de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dea:	dc 01       	movw	r26, r24
     dec:	cb 01       	movw	r24, r22
     dee:	9e 83       	std	Y+6, r25	; 0x06
     df0:	8d 83       	std	Y+5, r24	; 0x05
     df2:	0f c0       	rjmp	.+30     	; 0xe12 <SavePasswordToEEPROM+0xe6>
     df4:	88 ec       	ldi	r24, 0xC8	; 200
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	9c 83       	std	Y+4, r25	; 0x04
     dfa:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	9c 81       	ldd	r25, Y+4	; 0x04
     e00:	01 97       	sbiw	r24, 0x01	; 1
     e02:	f1 f7       	brne	.-4      	; 0xe00 <SavePasswordToEEPROM+0xd4>
     e04:	9c 83       	std	Y+4, r25	; 0x04
     e06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e08:	8d 81       	ldd	r24, Y+5	; 0x05
     e0a:	9e 81       	ldd	r25, Y+6	; 0x06
     e0c:	01 97       	sbiw	r24, 0x01	; 1
     e0e:	9e 83       	std	Y+6, r25	; 0x06
     e10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e12:	8d 81       	ldd	r24, Y+5	; 0x05
     e14:	9e 81       	ldd	r25, Y+6	; 0x06
     e16:	00 97       	sbiw	r24, 0x00	; 0
     e18:	69 f7       	brne	.-38     	; 0xdf4 <SavePasswordToEEPROM+0xc8>
     e1a:	14 c0       	rjmp	.+40     	; 0xe44 <SavePasswordToEEPROM+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e1c:	6f 81       	ldd	r22, Y+7	; 0x07
     e1e:	78 85       	ldd	r23, Y+8	; 0x08
     e20:	89 85       	ldd	r24, Y+9	; 0x09
     e22:	9a 85       	ldd	r25, Y+10	; 0x0a
     e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e28:	dc 01       	movw	r26, r24
     e2a:	cb 01       	movw	r24, r22
     e2c:	9e 83       	std	Y+6, r25	; 0x06
     e2e:	8d 83       	std	Y+5, r24	; 0x05
     e30:	8d 81       	ldd	r24, Y+5	; 0x05
     e32:	9e 81       	ldd	r25, Y+6	; 0x06
     e34:	9a 83       	std	Y+2, r25	; 0x02
     e36:	89 83       	std	Y+1, r24	; 0x01
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	9a 81       	ldd	r25, Y+2	; 0x02
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	f1 f7       	brne	.-4      	; 0xe3c <SavePasswordToEEPROM+0x110>
     e40:	9a 83       	std	Y+2, r25	; 0x02
     e42:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10); /* delay for EEPROM*/
		i++;
     e44:	88 89       	ldd	r24, Y+16	; 0x10
     e46:	8f 5f       	subi	r24, 0xFF	; 255
     e48:	88 8b       	std	Y+16, r24	; 0x10
 * Function output: void.
 */
void SavePasswordToEEPROM() {
	uint8 i = 0; // Counter for password digits
	uint8 temp;
	while (i < PASSWORD_LENGTH) {
     e4a:	88 89       	ldd	r24, Y+16	; 0x10
     e4c:	85 30       	cpi	r24, 0x05	; 5
     e4e:	08 f4       	brcc	.+2      	; 0xe52 <SavePasswordToEEPROM+0x126>
     e50:	79 cf       	rjmp	.-270    	; 0xd44 <SavePasswordToEEPROM+0x18>
		/*store every recieved byte in EEPROM*/
		EEPROM_writeByte(EEPROM_FIRST_ADDRESS_VALUE + i, temp);
		_delay_ms(10); /* delay for EEPROM*/
		i++;
	}
}
     e52:	60 96       	adiw	r28, 0x10	; 16
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	cd bf       	out	0x3d, r28	; 61
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <RecivePasswordAndCheck>:
 * Function to receive password through UART and check
 * it with the one in EEPROM .
 * Function input:  void.
 * Function output: uint8 flag which indicate password correct.
 */
uint8 RecivePasswordAndCheck() {
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	00 d0       	rcall	.+0      	; 0xe6a <RecivePasswordAndCheck+0x6>
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <RecivePasswordAndCheck+0x8>
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
	/*temp1 to get the password from HMI , temp2 to get the password from EEPROM*/
	uint8 temp1, temp2, Password_Checker;
	uint8 i = 0;
     e70:	19 82       	std	Y+1, r1	; 0x01
	/* we suppose at first the password is correct */
	Password_Checker = TRUE;
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	8a 83       	std	Y+2, r24	; 0x02
     e76:	19 c0       	rjmp	.+50     	; 0xeaa <RecivePasswordAndCheck+0x46>
	while (i < PASSWORD_LENGTH) {
		/* send to HMI ECU that the control ECU is ready to receive byte */
		UART_sendByte(START_COMMUNICATION);
     e78:	81 e1       	ldi	r24, 0x11	; 17
     e7a:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <UART_sendByte>
		temp1 = UART_recieveByte();
     e7e:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <UART_recieveByte>
     e82:	8b 83       	std	Y+3, r24	; 0x03
		EEPROM_readByte(EEPROM_FIRST_ADDRESS_VALUE + i, &temp2);
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	88 2f       	mov	r24, r24
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	8f 5e       	subi	r24, 0xEF	; 239
     e8c:	9c 4f       	sbci	r25, 0xFC	; 252
     e8e:	9e 01       	movw	r18, r28
     e90:	2c 5f       	subi	r18, 0xFC	; 252
     e92:	3f 4f       	sbci	r19, 0xFF	; 255
     e94:	b9 01       	movw	r22, r18
     e96:	0e 94 c8 1b 	call	0x3790	; 0x3790 <EEPROM_readByte>
		if (temp1 != temp2) {
     e9a:	9c 81       	ldd	r25, Y+4	; 0x04
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	89 17       	cp	r24, r25
     ea0:	09 f0       	breq	.+2      	; 0xea4 <RecivePasswordAndCheck+0x40>
			Password_Checker = FALSE;
     ea2:	1a 82       	std	Y+2, r1	; 0x02
		}
		i++;
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	8f 5f       	subi	r24, 0xFF	; 255
     ea8:	89 83       	std	Y+1, r24	; 0x01
	/*temp1 to get the password from HMI , temp2 to get the password from EEPROM*/
	uint8 temp1, temp2, Password_Checker;
	uint8 i = 0;
	/* we suppose at first the password is correct */
	Password_Checker = TRUE;
	while (i < PASSWORD_LENGTH) {
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	85 30       	cpi	r24, 0x05	; 5
     eae:	20 f3       	brcs	.-56     	; 0xe78 <RecivePasswordAndCheck+0x14>
		if (temp1 != temp2) {
			Password_Checker = FALSE;
		}
		i++;
	}
	if (Password_Checker) {
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	88 23       	and	r24, r24
     eb4:	21 f0       	breq	.+8      	; 0xebe <RecivePasswordAndCheck+0x5a>
		UART_sendByte(PASSWORD_CORRECT);
     eb6:	8a ea       	ldi	r24, 0xAA	; 170
     eb8:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <UART_sendByte>
     ebc:	03 c0       	rjmp	.+6      	; 0xec4 <RecivePasswordAndCheck+0x60>
	} else {
		UART_sendByte(PASSWORD_INCORRECT);
     ebe:	8b eb       	ldi	r24, 0xBB	; 187
     ec0:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <UART_sendByte>
	}
	return Password_Checker;
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
}
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <Timer1_DelaySecond>:
 * Description :
 * Function to count a number of seconds which passed to it.
 * Function input:  number of seconds.
 * Function output: void.
 */
void Timer1_DelaySecond(uint8 time) {
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	2d 97       	sbiw	r28, 0x0d	; 13
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	f8 94       	cli
     ee2:	de bf       	out	0x3e, r29	; 62
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	cd bf       	out	0x3d, r28	; 61
     ee8:	88 87       	std	Y+8, r24	; 0x08
	Timer_ConfigType timer_config = { CTC_INITIAL_VALUE,
	CTC_VALUE_FOR_ONE_SECOND, TIMER1, PRESCALER_256, COMPARE_MODE };
     eea:	ce 01       	movw	r24, r28
     eec:	01 96       	adiw	r24, 0x01	; 1
     eee:	9a 87       	std	Y+10, r25	; 0x0a
     ef0:	89 87       	std	Y+9, r24	; 0x09
     ef2:	e3 e7       	ldi	r30, 0x73	; 115
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	fc 87       	std	Y+12, r31	; 0x0c
     ef8:	eb 87       	std	Y+11, r30	; 0x0b
     efa:	f7 e0       	ldi	r31, 0x07	; 7
     efc:	fd 87       	std	Y+13, r31	; 0x0d
     efe:	eb 85       	ldd	r30, Y+11	; 0x0b
     f00:	fc 85       	ldd	r31, Y+12	; 0x0c
     f02:	00 80       	ld	r0, Z
     f04:	8b 85       	ldd	r24, Y+11	; 0x0b
     f06:	9c 85       	ldd	r25, Y+12	; 0x0c
     f08:	01 96       	adiw	r24, 0x01	; 1
     f0a:	9c 87       	std	Y+12, r25	; 0x0c
     f0c:	8b 87       	std	Y+11, r24	; 0x0b
     f0e:	e9 85       	ldd	r30, Y+9	; 0x09
     f10:	fa 85       	ldd	r31, Y+10	; 0x0a
     f12:	00 82       	st	Z, r0
     f14:	89 85       	ldd	r24, Y+9	; 0x09
     f16:	9a 85       	ldd	r25, Y+10	; 0x0a
     f18:	01 96       	adiw	r24, 0x01	; 1
     f1a:	9a 87       	std	Y+10, r25	; 0x0a
     f1c:	89 87       	std	Y+9, r24	; 0x09
     f1e:	9d 85       	ldd	r25, Y+13	; 0x0d
     f20:	91 50       	subi	r25, 0x01	; 1
     f22:	9d 87       	std	Y+13, r25	; 0x0d
     f24:	ed 85       	ldd	r30, Y+13	; 0x0d
     f26:	ee 23       	and	r30, r30
     f28:	51 f7       	brne	.-44     	; 0xefe <Timer1_DelaySecond+0x2a>
	/* setup the call back function */
	Timer_setCallBack(countOneSecond, TIMER1);
     f2a:	81 eb       	ldi	r24, 0xB1	; 177
     f2c:	97 e0       	ldi	r25, 0x07	; 7
     f2e:	61 e0       	ldi	r22, 0x01	; 1
     f30:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <Timer_setCallBack>
	/* passing the configuration to initialization function of TIMER1 */
	Timer_init(&timer_config);
     f34:	ce 01       	movw	r24, r28
     f36:	01 96       	adiw	r24, 0x01	; 1
     f38:	0e 94 99 18 	call	0x3132	; 0x3132 <Timer_init>
	/* waiting for 15 seconds until the door is unlocking */
	while (g_ticks < time)
     f3c:	90 91 7a 00 	lds	r25, 0x007A
     f40:	88 85       	ldd	r24, Y+8	; 0x08
     f42:	98 17       	cp	r25, r24
     f44:	d8 f3       	brcs	.-10     	; 0xf3c <Timer1_DelaySecond+0x68>
		;
	/* reset the global variable of ticks */
	g_ticks = 0;
     f46:	10 92 7a 00 	sts	0x007A, r1
	/*Stop the Timer*/
	Timer_deInit(TIMER1);
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	0e 94 cb 18 	call	0x3196	; 0x3196 <Timer_deInit>
}
     f50:	2d 96       	adiw	r28, 0x0d	; 13
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	f8 94       	cli
     f56:	de bf       	out	0x3e, r29	; 62
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	cd bf       	out	0x3d, r28	; 61
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <countOneSecond>:
 * Description :
 * This is the call back function which will be executed each interrupt in timer1.
 * Function input:  void.
 * Function output: void.
 */
void countOneSecond(void) {
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
	/*Increase ticks every 1 second*/
	g_ticks++;
     f6a:	80 91 7a 00 	lds	r24, 0x007A
     f6e:	8f 5f       	subi	r24, 0xFF	; 255
     f70:	80 93 7a 00 	sts	0x007A, r24
}
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <DC_Motor_Init>:

#include "DC_Motor.h"
#include "common_macros.h"
#include "Timer0_PWM.h"
#include "GPIO.h"
void DC_Motor_Init() {
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
	/* Set first two pins as output */
	GPIO_setupPinDirection(DC_MOTOR_PORT, IN1, PIN_OUTPUT);
     f82:	83 e0       	ldi	r24, 0x03	; 3
     f84:	66 e0       	ldi	r22, 0x06	; 6
     f86:	41 e0       	ldi	r20, 0x01	; 1
     f88:	0e 94 1f 08 	call	0x103e	; 0x103e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT, IN2, PIN_OUTPUT);
     f8c:	83 e0       	ldi	r24, 0x03	; 3
     f8e:	67 e0       	ldi	r22, 0x07	; 7
     f90:	41 e0       	ldi	r20, 0x01	; 1
     f92:	0e 94 1f 08 	call	0x103e	; 0x103e <GPIO_setupPinDirection>

	/* Set IN1,IN2 to low (motor off) at beggining */
	GPIO_writePin(DC_MOTOR_PORT, IN1, LOGIC_LOW);
     f96:	83 e0       	ldi	r24, 0x03	; 3
     f98:	66 e0       	ldi	r22, 0x06	; 6
     f9a:	40 e0       	ldi	r20, 0x00	; 0
     f9c:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT, IN2, LOGIC_LOW);
     fa0:	83 e0       	ldi	r24, 0x03	; 3
     fa2:	67 e0       	ldi	r22, 0x07	; 7
     fa4:	40 e0       	ldi	r20, 0x00	; 0
     fa6:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
}
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <DC_Motor_Rotate>:
void DC_Motor_Rotate(DcMotor_State state, uint8 speed) {
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	00 d0       	rcall	.+0      	; 0xfb6 <DC_Motor_Rotate+0x6>
     fb6:	00 d0       	rcall	.+0      	; 0xfb8 <DC_Motor_Rotate+0x8>
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	89 83       	std	Y+1, r24	; 0x01
     fbe:	6a 83       	std	Y+2, r22	; 0x02

	/** Ensure speed is between 0 and 100 */
	if (speed > 100) {
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	85 36       	cpi	r24, 0x65	; 101
     fc4:	10 f0       	brcs	.+4      	; 0xfca <DC_Motor_Rotate+0x1a>
		speed = 100; /** Cap the speed to 100% */
     fc6:	84 e6       	ldi	r24, 0x64	; 100
     fc8:	8a 83       	std	Y+2, r24	; 0x02
	}

	/*Set speed for the motor*/
	PWM_Set_Duty_Cycle(speed);
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <PWM_Set_Duty_Cycle>

	/** Set motor control pins based on the desired rotation direction */
	switch (state) {
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	3c 83       	std	Y+4, r19	; 0x04
     fd8:	2b 83       	std	Y+3, r18	; 0x03
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	9c 81       	ldd	r25, Y+4	; 0x04
     fde:	81 30       	cpi	r24, 0x01	; 1
     fe0:	91 05       	cpc	r25, r1
     fe2:	31 f0       	breq	.+12     	; 0xff0 <DC_Motor_Rotate+0x40>
     fe4:	2b 81       	ldd	r18, Y+3	; 0x03
     fe6:	3c 81       	ldd	r19, Y+4	; 0x04
     fe8:	22 30       	cpi	r18, 0x02	; 2
     fea:	31 05       	cpc	r19, r1
     fec:	61 f0       	breq	.+24     	; 0x1006 <DC_Motor_Rotate+0x56>
     fee:	16 c0       	rjmp	.+44     	; 0x101c <DC_Motor_Rotate+0x6c>
	case ClockWise:
		GPIO_writePin(DC_MOTOR_PORT, IN1, LOGIC_HIGH); /** Set IN1 high for clockwise */
     ff0:	83 e0       	ldi	r24, 0x03	; 3
     ff2:	66 e0       	ldi	r22, 0x06	; 6
     ff4:	41 e0       	ldi	r20, 0x01	; 1
     ff6:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT, IN2, LOGIC_LOW); /** Set IN2 low */
     ffa:	83 e0       	ldi	r24, 0x03	; 3
     ffc:	67 e0       	ldi	r22, 0x07	; 7
     ffe:	40 e0       	ldi	r20, 0x00	; 0
    1000:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
    1004:	15 c0       	rjmp	.+42     	; 0x1030 <DC_Motor_Rotate+0x80>
		break;

	case Anti_ClockWise:
		GPIO_writePin(DC_MOTOR_PORT, IN1, LOGIC_LOW); /** Set IN1 low for anti-clockwise */
    1006:	83 e0       	ldi	r24, 0x03	; 3
    1008:	66 e0       	ldi	r22, 0x06	; 6
    100a:	40 e0       	ldi	r20, 0x00	; 0
    100c:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT, IN2, LOGIC_HIGH); /** Set IN2 high */
    1010:	83 e0       	ldi	r24, 0x03	; 3
    1012:	67 e0       	ldi	r22, 0x07	; 7
    1014:	41 e0       	ldi	r20, 0x01	; 1
    1016:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
    101a:	0a c0       	rjmp	.+20     	; 0x1030 <DC_Motor_Rotate+0x80>
		break;

	case Stop:
	default:
		GPIO_writePin(DC_MOTOR_PORT, IN1, LOGIC_LOW); /** Set IN1 low to stop */
    101c:	83 e0       	ldi	r24, 0x03	; 3
    101e:	66 e0       	ldi	r22, 0x06	; 6
    1020:	40 e0       	ldi	r20, 0x00	; 0
    1022:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT, IN2, LOGIC_LOW); /** Set IN2 low to stop */
    1026:	83 e0       	ldi	r24, 0x03	; 3
    1028:	67 e0       	ldi	r22, 0x07	; 7
    102a:	40 e0       	ldi	r20, 0x00	; 0
    102c:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
		break;
	}

}
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	08 95       	ret

0000103e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,
		GPIO_PinDirectionType direction) {
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	00 d0       	rcall	.+0      	; 0x1044 <GPIO_setupPinDirection+0x6>
    1044:	00 d0       	rcall	.+0      	; 0x1046 <GPIO_setupPinDirection+0x8>
    1046:	0f 92       	push	r0
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	89 83       	std	Y+1, r24	; 0x01
    104e:	6a 83       	std	Y+2, r22	; 0x02
    1050:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	88 30       	cpi	r24, 0x08	; 8
    1056:	08 f0       	brcs	.+2      	; 0x105a <GPIO_setupPinDirection+0x1c>
    1058:	d5 c0       	rjmp	.+426    	; 0x1204 <GPIO_setupPinDirection+0x1c6>
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	84 30       	cpi	r24, 0x04	; 4
    105e:	08 f0       	brcs	.+2      	; 0x1062 <GPIO_setupPinDirection+0x24>
    1060:	d1 c0       	rjmp	.+418    	; 0x1204 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	} else {
		/* Setup the pin direction as required */
		switch (port_num) {
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	3d 83       	std	Y+5, r19	; 0x05
    106a:	2c 83       	std	Y+4, r18	; 0x04
    106c:	8c 81       	ldd	r24, Y+4	; 0x04
    106e:	9d 81       	ldd	r25, Y+5	; 0x05
    1070:	81 30       	cpi	r24, 0x01	; 1
    1072:	91 05       	cpc	r25, r1
    1074:	09 f4       	brne	.+2      	; 0x1078 <GPIO_setupPinDirection+0x3a>
    1076:	43 c0       	rjmp	.+134    	; 0x10fe <GPIO_setupPinDirection+0xc0>
    1078:	2c 81       	ldd	r18, Y+4	; 0x04
    107a:	3d 81       	ldd	r19, Y+5	; 0x05
    107c:	22 30       	cpi	r18, 0x02	; 2
    107e:	31 05       	cpc	r19, r1
    1080:	2c f4       	brge	.+10     	; 0x108c <GPIO_setupPinDirection+0x4e>
    1082:	8c 81       	ldd	r24, Y+4	; 0x04
    1084:	9d 81       	ldd	r25, Y+5	; 0x05
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	71 f0       	breq	.+28     	; 0x10a6 <GPIO_setupPinDirection+0x68>
    108a:	bc c0       	rjmp	.+376    	; 0x1204 <GPIO_setupPinDirection+0x1c6>
    108c:	2c 81       	ldd	r18, Y+4	; 0x04
    108e:	3d 81       	ldd	r19, Y+5	; 0x05
    1090:	22 30       	cpi	r18, 0x02	; 2
    1092:	31 05       	cpc	r19, r1
    1094:	09 f4       	brne	.+2      	; 0x1098 <GPIO_setupPinDirection+0x5a>
    1096:	5f c0       	rjmp	.+190    	; 0x1156 <GPIO_setupPinDirection+0x118>
    1098:	8c 81       	ldd	r24, Y+4	; 0x04
    109a:	9d 81       	ldd	r25, Y+5	; 0x05
    109c:	83 30       	cpi	r24, 0x03	; 3
    109e:	91 05       	cpc	r25, r1
    10a0:	09 f4       	brne	.+2      	; 0x10a4 <GPIO_setupPinDirection+0x66>
    10a2:	85 c0       	rjmp	.+266    	; 0x11ae <GPIO_setupPinDirection+0x170>
    10a4:	af c0       	rjmp	.+350    	; 0x1204 <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if (direction == PIN_OUTPUT) {
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	81 30       	cpi	r24, 0x01	; 1
    10aa:	a1 f4       	brne	.+40     	; 0x10d4 <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA_REG.Byte, pin_num);
    10ac:	aa e3       	ldi	r26, 0x3A	; 58
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	ea e3       	ldi	r30, 0x3A	; 58
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	48 2f       	mov	r20, r24
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 2e       	mov	r0, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <GPIO_setupPinDirection+0x8c>
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	0a 94       	dec	r0
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <GPIO_setupPinDirection+0x88>
    10ce:	84 2b       	or	r24, r20
    10d0:	8c 93       	st	X, r24
    10d2:	98 c0       	rjmp	.+304    	; 0x1204 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRA_REG.Byte, pin_num);
    10d4:	aa e3       	ldi	r26, 0x3A	; 58
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	ea e3       	ldi	r30, 0x3A	; 58
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	48 2f       	mov	r20, r24
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	02 2e       	mov	r0, r18
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <GPIO_setupPinDirection+0xb4>
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	0a 94       	dec	r0
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <GPIO_setupPinDirection+0xb0>
    10f6:	80 95       	com	r24
    10f8:	84 23       	and	r24, r20
    10fa:	8c 93       	st	X, r24
    10fc:	83 c0       	rjmp	.+262    	; 0x1204 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT) {
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	81 30       	cpi	r24, 0x01	; 1
    1102:	a1 f4       	brne	.+40     	; 0x112c <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB_REG.Byte, pin_num);
    1104:	a7 e3       	ldi	r26, 0x37	; 55
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e7 e3       	ldi	r30, 0x37	; 55
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	48 2f       	mov	r20, r24
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	02 2e       	mov	r0, r18
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <GPIO_setupPinDirection+0xe4>
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	0a 94       	dec	r0
    1124:	e2 f7       	brpl	.-8      	; 0x111e <GPIO_setupPinDirection+0xe0>
    1126:	84 2b       	or	r24, r20
    1128:	8c 93       	st	X, r24
    112a:	6c c0       	rjmp	.+216    	; 0x1204 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRB_REG.Byte, pin_num);
    112c:	a7 e3       	ldi	r26, 0x37	; 55
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e7 e3       	ldi	r30, 0x37	; 55
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	48 2f       	mov	r20, r24
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	02 2e       	mov	r0, r18
    1144:	02 c0       	rjmp	.+4      	; 0x114a <GPIO_setupPinDirection+0x10c>
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	0a 94       	dec	r0
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <GPIO_setupPinDirection+0x108>
    114e:	80 95       	com	r24
    1150:	84 23       	and	r24, r20
    1152:	8c 93       	st	X, r24
    1154:	57 c0       	rjmp	.+174    	; 0x1204 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT) {
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	81 30       	cpi	r24, 0x01	; 1
    115a:	a1 f4       	brne	.+40     	; 0x1184 <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC_REG.Byte, pin_num);
    115c:	a4 e3       	ldi	r26, 0x34	; 52
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e4 e3       	ldi	r30, 0x34	; 52
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	48 2f       	mov	r20, r24
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	02 2e       	mov	r0, r18
    1174:	02 c0       	rjmp	.+4      	; 0x117a <GPIO_setupPinDirection+0x13c>
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	0a 94       	dec	r0
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <GPIO_setupPinDirection+0x138>
    117e:	84 2b       	or	r24, r20
    1180:	8c 93       	st	X, r24
    1182:	40 c0       	rjmp	.+128    	; 0x1204 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRC_REG.Byte, pin_num);
    1184:	a4 e3       	ldi	r26, 0x34	; 52
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e4 e3       	ldi	r30, 0x34	; 52
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	48 2f       	mov	r20, r24
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	02 2e       	mov	r0, r18
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <GPIO_setupPinDirection+0x164>
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	0a 94       	dec	r0
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <GPIO_setupPinDirection+0x160>
    11a6:	80 95       	com	r24
    11a8:	84 23       	and	r24, r20
    11aa:	8c 93       	st	X, r24
    11ac:	2b c0       	rjmp	.+86     	; 0x1204 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT) {
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	81 30       	cpi	r24, 0x01	; 1
    11b2:	a1 f4       	brne	.+40     	; 0x11dc <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD_REG.Byte, pin_num);
    11b4:	a1 e3       	ldi	r26, 0x31	; 49
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e1 e3       	ldi	r30, 0x31	; 49
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	48 2f       	mov	r20, r24
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	02 2e       	mov	r0, r18
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <GPIO_setupPinDirection+0x194>
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	0a 94       	dec	r0
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <GPIO_setupPinDirection+0x190>
    11d6:	84 2b       	or	r24, r20
    11d8:	8c 93       	st	X, r24
    11da:	14 c0       	rjmp	.+40     	; 0x1204 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRD_REG.Byte, pin_num);
    11dc:	a1 e3       	ldi	r26, 0x31	; 49
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	e1 e3       	ldi	r30, 0x31	; 49
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	48 2f       	mov	r20, r24
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	02 2e       	mov	r0, r18
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <GPIO_setupPinDirection+0x1bc>
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	0a 94       	dec	r0
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <GPIO_setupPinDirection+0x1b8>
    11fe:	80 95       	com	r24
    1200:	84 23       	and	r24, r20
    1202:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	00 d0       	rcall	.+0      	; 0x121a <GPIO_writePin+0x6>
    121a:	00 d0       	rcall	.+0      	; 0x121c <GPIO_writePin+0x8>
    121c:	0f 92       	push	r0
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	89 83       	std	Y+1, r24	; 0x01
    1224:	6a 83       	std	Y+2, r22	; 0x02
    1226:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	88 30       	cpi	r24, 0x08	; 8
    122c:	08 f0       	brcs	.+2      	; 0x1230 <GPIO_writePin+0x1c>
    122e:	d5 c0       	rjmp	.+426    	; 0x13da <GPIO_writePin+0x1c6>
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	84 30       	cpi	r24, 0x04	; 4
    1234:	08 f0       	brcs	.+2      	; 0x1238 <GPIO_writePin+0x24>
    1236:	d1 c0       	rjmp	.+418    	; 0x13da <GPIO_writePin+0x1c6>
		/* Do Nothing */
	} else {
		/* Setup the pin value as required */
		switch (port_num) {
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	3d 83       	std	Y+5, r19	; 0x05
    1240:	2c 83       	std	Y+4, r18	; 0x04
    1242:	8c 81       	ldd	r24, Y+4	; 0x04
    1244:	9d 81       	ldd	r25, Y+5	; 0x05
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	91 05       	cpc	r25, r1
    124a:	09 f4       	brne	.+2      	; 0x124e <GPIO_writePin+0x3a>
    124c:	43 c0       	rjmp	.+134    	; 0x12d4 <GPIO_writePin+0xc0>
    124e:	2c 81       	ldd	r18, Y+4	; 0x04
    1250:	3d 81       	ldd	r19, Y+5	; 0x05
    1252:	22 30       	cpi	r18, 0x02	; 2
    1254:	31 05       	cpc	r19, r1
    1256:	2c f4       	brge	.+10     	; 0x1262 <GPIO_writePin+0x4e>
    1258:	8c 81       	ldd	r24, Y+4	; 0x04
    125a:	9d 81       	ldd	r25, Y+5	; 0x05
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	71 f0       	breq	.+28     	; 0x127c <GPIO_writePin+0x68>
    1260:	bc c0       	rjmp	.+376    	; 0x13da <GPIO_writePin+0x1c6>
    1262:	2c 81       	ldd	r18, Y+4	; 0x04
    1264:	3d 81       	ldd	r19, Y+5	; 0x05
    1266:	22 30       	cpi	r18, 0x02	; 2
    1268:	31 05       	cpc	r19, r1
    126a:	09 f4       	brne	.+2      	; 0x126e <GPIO_writePin+0x5a>
    126c:	5f c0       	rjmp	.+190    	; 0x132c <GPIO_writePin+0x118>
    126e:	8c 81       	ldd	r24, Y+4	; 0x04
    1270:	9d 81       	ldd	r25, Y+5	; 0x05
    1272:	83 30       	cpi	r24, 0x03	; 3
    1274:	91 05       	cpc	r25, r1
    1276:	09 f4       	brne	.+2      	; 0x127a <GPIO_writePin+0x66>
    1278:	85 c0       	rjmp	.+266    	; 0x1384 <GPIO_writePin+0x170>
    127a:	af c0       	rjmp	.+350    	; 0x13da <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if (value == LOGIC_LOW) {
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	88 23       	and	r24, r24
    1280:	a9 f4       	brne	.+42     	; 0x12ac <GPIO_writePin+0x98>
				CLEAR_BIT(PORTA_REG.Byte, pin_num);
    1282:	ab e3       	ldi	r26, 0x3B	; 59
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	eb e3       	ldi	r30, 0x3B	; 59
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	48 2f       	mov	r20, r24
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	02 2e       	mov	r0, r18
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <GPIO_writePin+0x8c>
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	0a 94       	dec	r0
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <GPIO_writePin+0x88>
    12a4:	80 95       	com	r24
    12a6:	84 23       	and	r24, r20
    12a8:	8c 93       	st	X, r24
    12aa:	97 c0       	rjmp	.+302    	; 0x13da <GPIO_writePin+0x1c6>
			} else {
				SET_BIT(PORTA_REG.Byte, pin_num);
    12ac:	ab e3       	ldi	r26, 0x3B	; 59
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	eb e3       	ldi	r30, 0x3B	; 59
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	48 2f       	mov	r20, r24
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	02 2e       	mov	r0, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <GPIO_writePin+0xb6>
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	0a 94       	dec	r0
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <GPIO_writePin+0xb2>
    12ce:	84 2b       	or	r24, r20
    12d0:	8c 93       	st	X, r24
    12d2:	83 c0       	rjmp	.+262    	; 0x13da <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_LOW) {
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	88 23       	and	r24, r24
    12d8:	a9 f4       	brne	.+42     	; 0x1304 <GPIO_writePin+0xf0>
				CLEAR_BIT(PORTB_REG.Byte, pin_num);
    12da:	a8 e3       	ldi	r26, 0x38	; 56
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e8 e3       	ldi	r30, 0x38	; 56
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	48 2f       	mov	r20, r24
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	02 2e       	mov	r0, r18
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <GPIO_writePin+0xe4>
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	0a 94       	dec	r0
    12fa:	e2 f7       	brpl	.-8      	; 0x12f4 <GPIO_writePin+0xe0>
    12fc:	80 95       	com	r24
    12fe:	84 23       	and	r24, r20
    1300:	8c 93       	st	X, r24
    1302:	6b c0       	rjmp	.+214    	; 0x13da <GPIO_writePin+0x1c6>
			} else {
				SET_BIT(PORTB_REG.Byte, pin_num);
    1304:	a8 e3       	ldi	r26, 0x38	; 56
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e8 e3       	ldi	r30, 0x38	; 56
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	48 2f       	mov	r20, r24
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	02 2e       	mov	r0, r18
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <GPIO_writePin+0x10e>
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	0a 94       	dec	r0
    1324:	e2 f7       	brpl	.-8      	; 0x131e <GPIO_writePin+0x10a>
    1326:	84 2b       	or	r24, r20
    1328:	8c 93       	st	X, r24
    132a:	57 c0       	rjmp	.+174    	; 0x13da <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_LOW) {
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	88 23       	and	r24, r24
    1330:	a9 f4       	brne	.+42     	; 0x135c <GPIO_writePin+0x148>
				CLEAR_BIT(PORTC_REG.Byte, pin_num);
    1332:	a5 e3       	ldi	r26, 0x35	; 53
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	e5 e3       	ldi	r30, 0x35	; 53
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	48 2f       	mov	r20, r24
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	02 2e       	mov	r0, r18
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <GPIO_writePin+0x13c>
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	0a 94       	dec	r0
    1352:	e2 f7       	brpl	.-8      	; 0x134c <GPIO_writePin+0x138>
    1354:	80 95       	com	r24
    1356:	84 23       	and	r24, r20
    1358:	8c 93       	st	X, r24
    135a:	3f c0       	rjmp	.+126    	; 0x13da <GPIO_writePin+0x1c6>
			} else {
				SET_BIT(PORTC_REG.Byte, pin_num);
    135c:	a5 e3       	ldi	r26, 0x35	; 53
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e5 e3       	ldi	r30, 0x35	; 53
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	48 2f       	mov	r20, r24
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	02 2e       	mov	r0, r18
    1374:	02 c0       	rjmp	.+4      	; 0x137a <GPIO_writePin+0x166>
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	0a 94       	dec	r0
    137c:	e2 f7       	brpl	.-8      	; 0x1376 <GPIO_writePin+0x162>
    137e:	84 2b       	or	r24, r20
    1380:	8c 93       	st	X, r24
    1382:	2b c0       	rjmp	.+86     	; 0x13da <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_LOW) {
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	88 23       	and	r24, r24
    1388:	a9 f4       	brne	.+42     	; 0x13b4 <GPIO_writePin+0x1a0>
				CLEAR_BIT(PORTD_REG.Byte, pin_num);
    138a:	a2 e3       	ldi	r26, 0x32	; 50
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	e2 e3       	ldi	r30, 0x32	; 50
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	48 2f       	mov	r20, r24
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	02 2e       	mov	r0, r18
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <GPIO_writePin+0x194>
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	0a 94       	dec	r0
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <GPIO_writePin+0x190>
    13ac:	80 95       	com	r24
    13ae:	84 23       	and	r24, r20
    13b0:	8c 93       	st	X, r24
    13b2:	13 c0       	rjmp	.+38     	; 0x13da <GPIO_writePin+0x1c6>
			} else {
				SET_BIT(PORTD_REG.Byte, pin_num);
    13b4:	a2 e3       	ldi	r26, 0x32	; 50
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e2 e3       	ldi	r30, 0x32	; 50
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	48 2f       	mov	r20, r24
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	02 2e       	mov	r0, r18
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <GPIO_writePin+0x1be>
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	0a 94       	dec	r0
    13d4:	e2 f7       	brpl	.-8      	; 0x13ce <GPIO_writePin+0x1ba>
    13d6:	84 2b       	or	r24, r20
    13d8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	08 95       	ret

000013ea <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    13ea:	df 93       	push	r29
    13ec:	cf 93       	push	r28
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <GPIO_readPin+0x6>
    13f0:	00 d0       	rcall	.+0      	; 0x13f2 <GPIO_readPin+0x8>
    13f2:	0f 92       	push	r0
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	8a 83       	std	Y+2, r24	; 0x02
    13fa:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    13fc:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	88 30       	cpi	r24, 0x08	; 8
    1402:	08 f0       	brcs	.+2      	; 0x1406 <GPIO_readPin+0x1c>
    1404:	84 c0       	rjmp	.+264    	; 0x150e <GPIO_readPin+0x124>
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	84 30       	cpi	r24, 0x04	; 4
    140a:	08 f0       	brcs	.+2      	; 0x140e <GPIO_readPin+0x24>
    140c:	80 c0       	rjmp	.+256    	; 0x150e <GPIO_readPin+0x124>
		/* Do Nothing */
	} else {
		/* Return the pin value */
		switch (port_num) {
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	3d 83       	std	Y+5, r19	; 0x05
    1416:	2c 83       	std	Y+4, r18	; 0x04
    1418:	4c 81       	ldd	r20, Y+4	; 0x04
    141a:	5d 81       	ldd	r21, Y+5	; 0x05
    141c:	41 30       	cpi	r20, 0x01	; 1
    141e:	51 05       	cpc	r21, r1
    1420:	79 f1       	breq	.+94     	; 0x1480 <GPIO_readPin+0x96>
    1422:	8c 81       	ldd	r24, Y+4	; 0x04
    1424:	9d 81       	ldd	r25, Y+5	; 0x05
    1426:	82 30       	cpi	r24, 0x02	; 2
    1428:	91 05       	cpc	r25, r1
    142a:	34 f4       	brge	.+12     	; 0x1438 <GPIO_readPin+0x4e>
    142c:	2c 81       	ldd	r18, Y+4	; 0x04
    142e:	3d 81       	ldd	r19, Y+5	; 0x05
    1430:	21 15       	cp	r18, r1
    1432:	31 05       	cpc	r19, r1
    1434:	69 f0       	breq	.+26     	; 0x1450 <GPIO_readPin+0x66>
    1436:	6b c0       	rjmp	.+214    	; 0x150e <GPIO_readPin+0x124>
    1438:	4c 81       	ldd	r20, Y+4	; 0x04
    143a:	5d 81       	ldd	r21, Y+5	; 0x05
    143c:	42 30       	cpi	r20, 0x02	; 2
    143e:	51 05       	cpc	r21, r1
    1440:	b9 f1       	breq	.+110    	; 0x14b0 <GPIO_readPin+0xc6>
    1442:	8c 81       	ldd	r24, Y+4	; 0x04
    1444:	9d 81       	ldd	r25, Y+5	; 0x05
    1446:	83 30       	cpi	r24, 0x03	; 3
    1448:	91 05       	cpc	r25, r1
    144a:	09 f4       	brne	.+2      	; 0x144e <GPIO_readPin+0x64>
    144c:	49 c0       	rjmp	.+146    	; 0x14e0 <GPIO_readPin+0xf6>
    144e:	5f c0       	rjmp	.+190    	; 0x150e <GPIO_readPin+0x124>
		case PORTA_ID:
			if (BIT_IS_SET(PINA_REG.Byte, pin_num)) {
    1450:	e9 e3       	ldi	r30, 0x39	; 57
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	88 2f       	mov	r24, r24
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	a9 01       	movw	r20, r18
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <GPIO_readPin+0x7e>
    1464:	55 95       	asr	r21
    1466:	47 95       	ror	r20
    1468:	8a 95       	dec	r24
    146a:	e2 f7       	brpl	.-8      	; 0x1464 <GPIO_readPin+0x7a>
    146c:	ca 01       	movw	r24, r20
    146e:	81 70       	andi	r24, 0x01	; 1
    1470:	90 70       	andi	r25, 0x00	; 0
    1472:	88 23       	and	r24, r24
    1474:	19 f0       	breq	.+6      	; 0x147c <GPIO_readPin+0x92>
				pin_value = LOGIC_HIGH;
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	89 83       	std	Y+1, r24	; 0x01
    147a:	49 c0       	rjmp	.+146    	; 0x150e <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    147c:	19 82       	std	Y+1, r1	; 0x01
    147e:	47 c0       	rjmp	.+142    	; 0x150e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PINB_REG.Byte, pin_num)) {
    1480:	e6 e3       	ldi	r30, 0x36	; 54
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	88 2f       	mov	r24, r24
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	a9 01       	movw	r20, r18
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <GPIO_readPin+0xae>
    1494:	55 95       	asr	r21
    1496:	47 95       	ror	r20
    1498:	8a 95       	dec	r24
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <GPIO_readPin+0xaa>
    149c:	ca 01       	movw	r24, r20
    149e:	81 70       	andi	r24, 0x01	; 1
    14a0:	90 70       	andi	r25, 0x00	; 0
    14a2:	88 23       	and	r24, r24
    14a4:	19 f0       	breq	.+6      	; 0x14ac <GPIO_readPin+0xc2>
				pin_value = LOGIC_HIGH;
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	89 83       	std	Y+1, r24	; 0x01
    14aa:	31 c0       	rjmp	.+98     	; 0x150e <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    14ac:	19 82       	std	Y+1, r1	; 0x01
    14ae:	2f c0       	rjmp	.+94     	; 0x150e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PINC_REG.Byte, pin_num)) {
    14b0:	e3 e3       	ldi	r30, 0x33	; 51
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	88 2f       	mov	r24, r24
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	a9 01       	movw	r20, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <GPIO_readPin+0xde>
    14c4:	55 95       	asr	r21
    14c6:	47 95       	ror	r20
    14c8:	8a 95       	dec	r24
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <GPIO_readPin+0xda>
    14cc:	ca 01       	movw	r24, r20
    14ce:	81 70       	andi	r24, 0x01	; 1
    14d0:	90 70       	andi	r25, 0x00	; 0
    14d2:	88 23       	and	r24, r24
    14d4:	19 f0       	breq	.+6      	; 0x14dc <GPIO_readPin+0xf2>
				pin_value = LOGIC_HIGH;
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	89 83       	std	Y+1, r24	; 0x01
    14da:	19 c0       	rjmp	.+50     	; 0x150e <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    14dc:	19 82       	std	Y+1, r1	; 0x01
    14de:	17 c0       	rjmp	.+46     	; 0x150e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND_REG.Byte, pin_num)) {
    14e0:	e0 e3       	ldi	r30, 0x30	; 48
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	88 2f       	mov	r24, r24
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	a9 01       	movw	r20, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <GPIO_readPin+0x10e>
    14f4:	55 95       	asr	r21
    14f6:	47 95       	ror	r20
    14f8:	8a 95       	dec	r24
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <GPIO_readPin+0x10a>
    14fc:	ca 01       	movw	r24, r20
    14fe:	81 70       	andi	r24, 0x01	; 1
    1500:	90 70       	andi	r25, 0x00	; 0
    1502:	88 23       	and	r24, r24
    1504:	19 f0       	breq	.+6      	; 0x150c <GPIO_readPin+0x122>
				pin_value = LOGIC_HIGH;
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	89 83       	std	Y+1, r24	; 0x01
    150a:	01 c0       	rjmp	.+2      	; 0x150e <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    150c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    150e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	08 95       	ret

00001520 <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	00 d0       	rcall	.+0      	; 0x1526 <GPIO_setupPortDirection+0x6>
    1526:	00 d0       	rcall	.+0      	; 0x1528 <GPIO_setupPortDirection+0x8>
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    152c:	89 83       	std	Y+1, r24	; 0x01
    152e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	84 30       	cpi	r24, 0x04	; 4
    1534:	90 f5       	brcc	.+100    	; 0x159a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	} else {
		/* Setup the port direction as required */
		switch (port_num) {
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	3c 83       	std	Y+4, r19	; 0x04
    153e:	2b 83       	std	Y+3, r18	; 0x03
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	9c 81       	ldd	r25, Y+4	; 0x04
    1544:	81 30       	cpi	r24, 0x01	; 1
    1546:	91 05       	cpc	r25, r1
    1548:	d1 f0       	breq	.+52     	; 0x157e <GPIO_setupPortDirection+0x5e>
    154a:	2b 81       	ldd	r18, Y+3	; 0x03
    154c:	3c 81       	ldd	r19, Y+4	; 0x04
    154e:	22 30       	cpi	r18, 0x02	; 2
    1550:	31 05       	cpc	r19, r1
    1552:	2c f4       	brge	.+10     	; 0x155e <GPIO_setupPortDirection+0x3e>
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	9c 81       	ldd	r25, Y+4	; 0x04
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	61 f0       	breq	.+24     	; 0x1574 <GPIO_setupPortDirection+0x54>
    155c:	1e c0       	rjmp	.+60     	; 0x159a <GPIO_setupPortDirection+0x7a>
    155e:	2b 81       	ldd	r18, Y+3	; 0x03
    1560:	3c 81       	ldd	r19, Y+4	; 0x04
    1562:	22 30       	cpi	r18, 0x02	; 2
    1564:	31 05       	cpc	r19, r1
    1566:	81 f0       	breq	.+32     	; 0x1588 <GPIO_setupPortDirection+0x68>
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	9c 81       	ldd	r25, Y+4	; 0x04
    156c:	83 30       	cpi	r24, 0x03	; 3
    156e:	91 05       	cpc	r25, r1
    1570:	81 f0       	breq	.+32     	; 0x1592 <GPIO_setupPortDirection+0x72>
    1572:	13 c0       	rjmp	.+38     	; 0x159a <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA_REG.Byte = direction;
    1574:	ea e3       	ldi	r30, 0x3A	; 58
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	80 83       	st	Z, r24
    157c:	0e c0       	rjmp	.+28     	; 0x159a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB_REG.Byte = direction;
    157e:	e7 e3       	ldi	r30, 0x37	; 55
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	80 83       	st	Z, r24
    1586:	09 c0       	rjmp	.+18     	; 0x159a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC_REG.Byte = direction;
    1588:	e4 e3       	ldi	r30, 0x34	; 52
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	80 83       	st	Z, r24
    1590:	04 c0       	rjmp	.+8      	; 0x159a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD_REG.Byte = direction;
    1592:	e1 e3       	ldi	r30, 0x31	; 49
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	80 83       	st	Z, r24
			break;
		}
	}
}
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	08 95       	ret

000015a8 <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value) {
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	00 d0       	rcall	.+0      	; 0x15ae <GPIO_writePort+0x6>
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <GPIO_writePort+0x8>
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	89 83       	std	Y+1, r24	; 0x01
    15b6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	84 30       	cpi	r24, 0x04	; 4
    15bc:	90 f5       	brcc	.+100    	; 0x1622 <GPIO_writePort+0x7a>
		/* Do Nothing */
	} else {
		/* Setup the port value as required */
		switch (port_num) {
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	3c 83       	std	Y+4, r19	; 0x04
    15c6:	2b 83       	std	Y+3, r18	; 0x03
    15c8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ca:	9c 81       	ldd	r25, Y+4	; 0x04
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	91 05       	cpc	r25, r1
    15d0:	d1 f0       	breq	.+52     	; 0x1606 <GPIO_writePort+0x5e>
    15d2:	2b 81       	ldd	r18, Y+3	; 0x03
    15d4:	3c 81       	ldd	r19, Y+4	; 0x04
    15d6:	22 30       	cpi	r18, 0x02	; 2
    15d8:	31 05       	cpc	r19, r1
    15da:	2c f4       	brge	.+10     	; 0x15e6 <GPIO_writePort+0x3e>
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	9c 81       	ldd	r25, Y+4	; 0x04
    15e0:	00 97       	sbiw	r24, 0x00	; 0
    15e2:	61 f0       	breq	.+24     	; 0x15fc <GPIO_writePort+0x54>
    15e4:	1e c0       	rjmp	.+60     	; 0x1622 <GPIO_writePort+0x7a>
    15e6:	2b 81       	ldd	r18, Y+3	; 0x03
    15e8:	3c 81       	ldd	r19, Y+4	; 0x04
    15ea:	22 30       	cpi	r18, 0x02	; 2
    15ec:	31 05       	cpc	r19, r1
    15ee:	81 f0       	breq	.+32     	; 0x1610 <GPIO_writePort+0x68>
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	9c 81       	ldd	r25, Y+4	; 0x04
    15f4:	83 30       	cpi	r24, 0x03	; 3
    15f6:	91 05       	cpc	r25, r1
    15f8:	81 f0       	breq	.+32     	; 0x161a <GPIO_writePort+0x72>
    15fa:	13 c0       	rjmp	.+38     	; 0x1622 <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA_REG.Byte = value;
    15fc:	eb e3       	ldi	r30, 0x3B	; 59
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	80 83       	st	Z, r24
    1604:	0e c0       	rjmp	.+28     	; 0x1622 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB_REG.Byte = value;
    1606:	e8 e3       	ldi	r30, 0x38	; 56
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	80 83       	st	Z, r24
    160e:	09 c0       	rjmp	.+18     	; 0x1622 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC_REG.Byte = value;
    1610:	e5 e3       	ldi	r30, 0x35	; 53
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	80 83       	st	Z, r24
    1618:	04 c0       	rjmp	.+8      	; 0x1622 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD_REG.Byte = value;
    161a:	e2 e3       	ldi	r30, 0x32	; 50
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	80 83       	st	Z, r24
			break;
		}
	}
}
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num) {
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	00 d0       	rcall	.+0      	; 0x1636 <GPIO_readPort+0x6>
    1636:	00 d0       	rcall	.+0      	; 0x1638 <GPIO_readPort+0x8>
    1638:	0f 92       	push	r0
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1640:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	84 30       	cpi	r24, 0x04	; 4
    1646:	10 f0       	brcs	.+4      	; 0x164c <GPIO_readPort+0x1c>
		return 0;
    1648:	1d 82       	std	Y+5, r1	; 0x05
    164a:	34 c0       	rjmp	.+104    	; 0x16b4 <GPIO_readPort+0x84>
	} else {
		/* Return the pin value */
		switch (port_num) {
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	3c 83       	std	Y+4, r19	; 0x04
    1654:	2b 83       	std	Y+3, r18	; 0x03
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	9c 81       	ldd	r25, Y+4	; 0x04
    165a:	81 30       	cpi	r24, 0x01	; 1
    165c:	91 05       	cpc	r25, r1
    165e:	d1 f0       	breq	.+52     	; 0x1694 <GPIO_readPort+0x64>
    1660:	2b 81       	ldd	r18, Y+3	; 0x03
    1662:	3c 81       	ldd	r19, Y+4	; 0x04
    1664:	22 30       	cpi	r18, 0x02	; 2
    1666:	31 05       	cpc	r19, r1
    1668:	2c f4       	brge	.+10     	; 0x1674 <GPIO_readPort+0x44>
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	9c 81       	ldd	r25, Y+4	; 0x04
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	61 f0       	breq	.+24     	; 0x168a <GPIO_readPort+0x5a>
    1672:	1e c0       	rjmp	.+60     	; 0x16b0 <GPIO_readPort+0x80>
    1674:	2b 81       	ldd	r18, Y+3	; 0x03
    1676:	3c 81       	ldd	r19, Y+4	; 0x04
    1678:	22 30       	cpi	r18, 0x02	; 2
    167a:	31 05       	cpc	r19, r1
    167c:	81 f0       	breq	.+32     	; 0x169e <GPIO_readPort+0x6e>
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	9c 81       	ldd	r25, Y+4	; 0x04
    1682:	83 30       	cpi	r24, 0x03	; 3
    1684:	91 05       	cpc	r25, r1
    1686:	81 f0       	breq	.+32     	; 0x16a8 <GPIO_readPort+0x78>
    1688:	13 c0       	rjmp	.+38     	; 0x16b0 <GPIO_readPort+0x80>
		case PORTA_ID:
			value = PINA_REG.Byte;
    168a:	e9 e3       	ldi	r30, 0x39	; 57
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	89 83       	std	Y+1, r24	; 0x01
    1692:	0e c0       	rjmp	.+28     	; 0x16b0 <GPIO_readPort+0x80>
			break;
		case PORTB_ID:
			value = PINB_REG.Byte;
    1694:	e6 e3       	ldi	r30, 0x36	; 54
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	89 83       	std	Y+1, r24	; 0x01
    169c:	09 c0       	rjmp	.+18     	; 0x16b0 <GPIO_readPort+0x80>
			break;
		case PORTC_ID:
			value = PINC_REG.Byte;
    169e:	e3 e3       	ldi	r30, 0x33	; 51
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	89 83       	std	Y+1, r24	; 0x01
    16a6:	04 c0       	rjmp	.+8      	; 0x16b0 <GPIO_readPort+0x80>
			break;
		case PORTD_ID:
			value = PIND_REG.Byte;
    16a8:	e0 e3       	ldi	r30, 0x30	; 48
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    16b0:	99 81       	ldd	r25, Y+1	; 0x01
    16b2:	9d 83       	std	Y+5, r25	; 0x05
    16b4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
    16c0:	cf 91       	pop	r28
    16c2:	df 91       	pop	r29
    16c4:	08 95       	ret

000016c6 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    16c6:	df 93       	push	r29
    16c8:	cf 93       	push	r28
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	60 97       	sbiw	r28, 0x10	; 16
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	f8 94       	cli
    16d4:	de bf       	out	0x3e, r29	; 62
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	64 e0       	ldi	r22, 0x04	; 4
    16de:	40 e0       	ldi	r20, 0x00	; 0
    16e0:	0e 94 1f 08 	call	0x103e	; 0x103e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	65 e0       	ldi	r22, 0x05	; 5
    16e8:	40 e0       	ldi	r20, 0x00	; 0
    16ea:	0e 94 1f 08 	call	0x103e	; 0x103e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	66 e0       	ldi	r22, 0x06	; 6
    16f2:	40 e0       	ldi	r20, 0x00	; 0
    16f4:	0e 94 1f 08 	call	0x103e	; 0x103e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	67 e0       	ldi	r22, 0x07	; 7
    16fc:	40 e0       	ldi	r20, 0x00	; 0
    16fe:	0e 94 1f 08 	call	0x103e	; 0x103e <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1702:	83 e0       	ldi	r24, 0x03	; 3
    1704:	62 e0       	ldi	r22, 0x02	; 2
    1706:	40 e0       	ldi	r20, 0x00	; 0
    1708:	0e 94 1f 08 	call	0x103e	; 0x103e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    170c:	83 e0       	ldi	r24, 0x03	; 3
    170e:	63 e0       	ldi	r22, 0x03	; 3
    1710:	40 e0       	ldi	r20, 0x00	; 0
    1712:	0e 94 1f 08 	call	0x103e	; 0x103e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1716:	83 e0       	ldi	r24, 0x03	; 3
    1718:	64 e0       	ldi	r22, 0x04	; 4
    171a:	40 e0       	ldi	r20, 0x00	; 0
    171c:	0e 94 1f 08 	call	0x103e	; 0x103e <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1720:	83 e0       	ldi	r24, 0x03	; 3
    1722:	65 e0       	ldi	r22, 0x05	; 5
    1724:	40 e0       	ldi	r20, 0x00	; 0
    1726:	0e 94 1f 08 	call	0x103e	; 0x103e <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    172a:	1f 86       	std	Y+15, r1	; 0x0f
    172c:	b4 c0       	rjmp	.+360    	; 0x1896 <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    172e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1730:	98 2f       	mov	r25, r24
    1732:	9c 5f       	subi	r25, 0xFC	; 252
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	69 2f       	mov	r22, r25
    1738:	41 e0       	ldi	r20, 0x01	; 1
    173a:	0e 94 1f 08 	call	0x103e	; 0x103e <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    173e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1740:	98 2f       	mov	r25, r24
    1742:	9c 5f       	subi	r25, 0xFC	; 252
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	69 2f       	mov	r22, r25
    1748:	40 e0       	ldi	r20, 0x00	; 0
    174a:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    174e:	18 8a       	std	Y+16, r1	; 0x10
    1750:	22 c0       	rjmp	.+68     	; 0x1796 <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1752:	88 89       	ldd	r24, Y+16	; 0x10
    1754:	98 2f       	mov	r25, r24
    1756:	9e 5f       	subi	r25, 0xFE	; 254
    1758:	83 e0       	ldi	r24, 0x03	; 3
    175a:	69 2f       	mov	r22, r25
    175c:	0e 94 f5 09 	call	0x13ea	; 0x13ea <GPIO_readPin>
    1760:	88 23       	and	r24, r24
    1762:	b1 f4       	brne	.+44     	; 0x1790 <KEYPAD_getPressedKey+0xca>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1764:	8f 85       	ldd	r24, Y+15	; 0x0f
    1766:	88 2f       	mov	r24, r24
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	98 2f       	mov	r25, r24
    1774:	88 89       	ldd	r24, Y+16	; 0x10
    1776:	89 0f       	add	r24, r25
    1778:	8f 5f       	subi	r24, 0xFF	; 255
    177a:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(10); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    177e:	60 96       	adiw	r28, 0x10	; 16
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	f8 94       	cli
    1784:	de bf       	out	0x3e, r29	; 62
    1786:	0f be       	out	0x3f, r0	; 63
    1788:	cd bf       	out	0x3d, r28	; 61
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1790:	88 89       	ldd	r24, Y+16	; 0x10
    1792:	8f 5f       	subi	r24, 0xFF	; 255
    1794:	88 8b       	std	Y+16, r24	; 0x10
    1796:	88 89       	ldd	r24, Y+16	; 0x10
    1798:	84 30       	cpi	r24, 0x04	; 4
    179a:	d8 f2       	brcs	.-74     	; 0x1752 <KEYPAD_getPressedKey+0x8c>
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    179c:	8f 85       	ldd	r24, Y+15	; 0x0f
    179e:	98 2f       	mov	r25, r24
    17a0:	9c 5f       	subi	r25, 0xFC	; 252
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	69 2f       	mov	r22, r25
    17a6:	40 e0       	ldi	r20, 0x00	; 0
    17a8:	0e 94 1f 08 	call	0x103e	; 0x103e <GPIO_setupPinDirection>
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	a0 e2       	ldi	r26, 0x20	; 32
    17b2:	b1 e4       	ldi	r27, 0x41	; 65
    17b4:	8b 87       	std	Y+11, r24	; 0x0b
    17b6:	9c 87       	std	Y+12, r25	; 0x0c
    17b8:	ad 87       	std	Y+13, r26	; 0x0d
    17ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    17be:	7c 85       	ldd	r23, Y+12	; 0x0c
    17c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	4a ef       	ldi	r20, 0xFA	; 250
    17ca:	54 e4       	ldi	r21, 0x44	; 68
    17cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	8f 83       	std	Y+7, r24	; 0x07
    17d6:	98 87       	std	Y+8, r25	; 0x08
    17d8:	a9 87       	std	Y+9, r26	; 0x09
    17da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17dc:	6f 81       	ldd	r22, Y+7	; 0x07
    17de:	78 85       	ldd	r23, Y+8	; 0x08
    17e0:	89 85       	ldd	r24, Y+9	; 0x09
    17e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	40 e8       	ldi	r20, 0x80	; 128
    17ea:	5f e3       	ldi	r21, 0x3F	; 63
    17ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17f0:	88 23       	and	r24, r24
    17f2:	2c f4       	brge	.+10     	; 0x17fe <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	9e 83       	std	Y+6, r25	; 0x06
    17fa:	8d 83       	std	Y+5, r24	; 0x05
    17fc:	3f c0       	rjmp	.+126    	; 0x187c <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    17fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1800:	78 85       	ldd	r23, Y+8	; 0x08
    1802:	89 85       	ldd	r24, Y+9	; 0x09
    1804:	9a 85       	ldd	r25, Y+10	; 0x0a
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	3f ef       	ldi	r19, 0xFF	; 255
    180a:	4f e7       	ldi	r20, 0x7F	; 127
    180c:	57 e4       	ldi	r21, 0x47	; 71
    180e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1812:	18 16       	cp	r1, r24
    1814:	4c f5       	brge	.+82     	; 0x1868 <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1816:	6b 85       	ldd	r22, Y+11	; 0x0b
    1818:	7c 85       	ldd	r23, Y+12	; 0x0c
    181a:	8d 85       	ldd	r24, Y+13	; 0x0d
    181c:	9e 85       	ldd	r25, Y+14	; 0x0e
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	40 e2       	ldi	r20, 0x20	; 32
    1824:	51 e4       	ldi	r21, 0x41	; 65
    1826:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	bc 01       	movw	r22, r24
    1830:	cd 01       	movw	r24, r26
    1832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	9e 83       	std	Y+6, r25	; 0x06
    183c:	8d 83       	std	Y+5, r24	; 0x05
    183e:	0f c0       	rjmp	.+30     	; 0x185e <KEYPAD_getPressedKey+0x198>
    1840:	88 ec       	ldi	r24, 0xC8	; 200
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	9c 83       	std	Y+4, r25	; 0x04
    1846:	8b 83       	std	Y+3, r24	; 0x03
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	9c 81       	ldd	r25, Y+4	; 0x04
    184c:	01 97       	sbiw	r24, 0x01	; 1
    184e:	f1 f7       	brne	.-4      	; 0x184c <KEYPAD_getPressedKey+0x186>
    1850:	9c 83       	std	Y+4, r25	; 0x04
    1852:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1854:	8d 81       	ldd	r24, Y+5	; 0x05
    1856:	9e 81       	ldd	r25, Y+6	; 0x06
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	9e 83       	std	Y+6, r25	; 0x06
    185c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185e:	8d 81       	ldd	r24, Y+5	; 0x05
    1860:	9e 81       	ldd	r25, Y+6	; 0x06
    1862:	00 97       	sbiw	r24, 0x00	; 0
    1864:	69 f7       	brne	.-38     	; 0x1840 <KEYPAD_getPressedKey+0x17a>
    1866:	14 c0       	rjmp	.+40     	; 0x1890 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1868:	6f 81       	ldd	r22, Y+7	; 0x07
    186a:	78 85       	ldd	r23, Y+8	; 0x08
    186c:	89 85       	ldd	r24, Y+9	; 0x09
    186e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1870:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	9e 83       	std	Y+6, r25	; 0x06
    187a:	8d 83       	std	Y+5, r24	; 0x05
    187c:	8d 81       	ldd	r24, Y+5	; 0x05
    187e:	9e 81       	ldd	r25, Y+6	; 0x06
    1880:	9a 83       	std	Y+2, r25	; 0x02
    1882:	89 83       	std	Y+1, r24	; 0x01
    1884:	89 81       	ldd	r24, Y+1	; 0x01
    1886:	9a 81       	ldd	r25, Y+2	; 0x02
    1888:	01 97       	sbiw	r24, 0x01	; 1
    188a:	f1 f7       	brne	.-4      	; 0x1888 <KEYPAD_getPressedKey+0x1c2>
    188c:	9a 83       	std	Y+2, r25	; 0x02
    188e:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1890:	8f 85       	ldd	r24, Y+15	; 0x0f
    1892:	8f 5f       	subi	r24, 0xFF	; 255
    1894:	8f 87       	std	Y+15, r24	; 0x0f
    1896:	8f 85       	ldd	r24, Y+15	; 0x0f
    1898:	84 30       	cpi	r24, 0x04	; 4
    189a:	08 f4       	brcc	.+2      	; 0x189e <KEYPAD_getPressedKey+0x1d8>
    189c:	48 cf       	rjmp	.-368    	; 0x172e <KEYPAD_getPressedKey+0x68>
    189e:	45 cf       	rjmp	.-374    	; 0x172a <KEYPAD_getPressedKey+0x64>

000018a0 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <KEYPAD_4x4_adjustKeyNumber+0x6>
    18a6:	00 d0       	rcall	.+0      	; 0x18a8 <KEYPAD_4x4_adjustKeyNumber+0x8>
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    18ae:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    18b0:	8a 81       	ldd	r24, Y+2	; 0x02
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	3c 83       	std	Y+4, r19	; 0x04
    18b8:	2b 83       	std	Y+3, r18	; 0x03
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	9c 81       	ldd	r25, Y+4	; 0x04
    18be:	88 30       	cpi	r24, 0x08	; 8
    18c0:	91 05       	cpc	r25, r1
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <KEYPAD_4x4_adjustKeyNumber+0x26>
    18c4:	70 c0       	rjmp	.+224    	; 0x19a6 <KEYPAD_4x4_adjustKeyNumber+0x106>
    18c6:	2b 81       	ldd	r18, Y+3	; 0x03
    18c8:	3c 81       	ldd	r19, Y+4	; 0x04
    18ca:	29 30       	cpi	r18, 0x09	; 9
    18cc:	31 05       	cpc	r19, r1
    18ce:	5c f5       	brge	.+86     	; 0x1926 <KEYPAD_4x4_adjustKeyNumber+0x86>
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	9c 81       	ldd	r25, Y+4	; 0x04
    18d4:	84 30       	cpi	r24, 0x04	; 4
    18d6:	91 05       	cpc	r25, r1
    18d8:	09 f4       	brne	.+2      	; 0x18dc <KEYPAD_4x4_adjustKeyNumber+0x3c>
    18da:	59 c0       	rjmp	.+178    	; 0x198e <KEYPAD_4x4_adjustKeyNumber+0xee>
    18dc:	2b 81       	ldd	r18, Y+3	; 0x03
    18de:	3c 81       	ldd	r19, Y+4	; 0x04
    18e0:	25 30       	cpi	r18, 0x05	; 5
    18e2:	31 05       	cpc	r19, r1
    18e4:	9c f4       	brge	.+38     	; 0x190c <KEYPAD_4x4_adjustKeyNumber+0x6c>
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ea:	82 30       	cpi	r24, 0x02	; 2
    18ec:	91 05       	cpc	r25, r1
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <KEYPAD_4x4_adjustKeyNumber+0x52>
    18f0:	48 c0       	rjmp	.+144    	; 0x1982 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    18f2:	2b 81       	ldd	r18, Y+3	; 0x03
    18f4:	3c 81       	ldd	r19, Y+4	; 0x04
    18f6:	23 30       	cpi	r18, 0x03	; 3
    18f8:	31 05       	cpc	r19, r1
    18fa:	0c f0       	brlt	.+2      	; 0x18fe <KEYPAD_4x4_adjustKeyNumber+0x5e>
    18fc:	45 c0       	rjmp	.+138    	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	9c 81       	ldd	r25, Y+4	; 0x04
    1902:	81 30       	cpi	r24, 0x01	; 1
    1904:	91 05       	cpc	r25, r1
    1906:	09 f4       	brne	.+2      	; 0x190a <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1908:	39 c0       	rjmp	.+114    	; 0x197c <KEYPAD_4x4_adjustKeyNumber+0xdc>
    190a:	67 c0       	rjmp	.+206    	; 0x19da <KEYPAD_4x4_adjustKeyNumber+0x13a>
    190c:	2b 81       	ldd	r18, Y+3	; 0x03
    190e:	3c 81       	ldd	r19, Y+4	; 0x04
    1910:	26 30       	cpi	r18, 0x06	; 6
    1912:	31 05       	cpc	r19, r1
    1914:	09 f4       	brne	.+2      	; 0x1918 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1916:	41 c0       	rjmp	.+130    	; 0x199a <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	9c 81       	ldd	r25, Y+4	; 0x04
    191c:	87 30       	cpi	r24, 0x07	; 7
    191e:	91 05       	cpc	r25, r1
    1920:	0c f0       	brlt	.+2      	; 0x1924 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1922:	3e c0       	rjmp	.+124    	; 0x19a0 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1924:	37 c0       	rjmp	.+110    	; 0x1994 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1926:	2b 81       	ldd	r18, Y+3	; 0x03
    1928:	3c 81       	ldd	r19, Y+4	; 0x04
    192a:	2c 30       	cpi	r18, 0x0C	; 12
    192c:	31 05       	cpc	r19, r1
    192e:	09 f4       	brne	.+2      	; 0x1932 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1930:	46 c0       	rjmp	.+140    	; 0x19be <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	9c 81       	ldd	r25, Y+4	; 0x04
    1936:	8d 30       	cpi	r24, 0x0D	; 13
    1938:	91 05       	cpc	r25, r1
    193a:	5c f4       	brge	.+22     	; 0x1952 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    193c:	2b 81       	ldd	r18, Y+3	; 0x03
    193e:	3c 81       	ldd	r19, Y+4	; 0x04
    1940:	2a 30       	cpi	r18, 0x0A	; 10
    1942:	31 05       	cpc	r19, r1
    1944:	b1 f1       	breq	.+108    	; 0x19b2 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1946:	8b 81       	ldd	r24, Y+3	; 0x03
    1948:	9c 81       	ldd	r25, Y+4	; 0x04
    194a:	8b 30       	cpi	r24, 0x0B	; 11
    194c:	91 05       	cpc	r25, r1
    194e:	a4 f5       	brge	.+104    	; 0x19b8 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1950:	2d c0       	rjmp	.+90     	; 0x19ac <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1952:	2b 81       	ldd	r18, Y+3	; 0x03
    1954:	3c 81       	ldd	r19, Y+4	; 0x04
    1956:	2e 30       	cpi	r18, 0x0E	; 14
    1958:	31 05       	cpc	r19, r1
    195a:	b9 f1       	breq	.+110    	; 0x19ca <KEYPAD_4x4_adjustKeyNumber+0x12a>
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	9c 81       	ldd	r25, Y+4	; 0x04
    1960:	8e 30       	cpi	r24, 0x0E	; 14
    1962:	91 05       	cpc	r25, r1
    1964:	7c f1       	brlt	.+94     	; 0x19c4 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1966:	2b 81       	ldd	r18, Y+3	; 0x03
    1968:	3c 81       	ldd	r19, Y+4	; 0x04
    196a:	2f 30       	cpi	r18, 0x0F	; 15
    196c:	31 05       	cpc	r19, r1
    196e:	79 f1       	breq	.+94     	; 0x19ce <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	9c 81       	ldd	r25, Y+4	; 0x04
    1974:	80 31       	cpi	r24, 0x10	; 16
    1976:	91 05       	cpc	r25, r1
    1978:	69 f1       	breq	.+90     	; 0x19d4 <KEYPAD_4x4_adjustKeyNumber+0x134>
    197a:	2f c0       	rjmp	.+94     	; 0x19da <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    197c:	87 e0       	ldi	r24, 0x07	; 7
    197e:	89 83       	std	Y+1, r24	; 0x01
    1980:	2e c0       	rjmp	.+92     	; 0x19de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1982:	88 e0       	ldi	r24, 0x08	; 8
    1984:	89 83       	std	Y+1, r24	; 0x01
    1986:	2b c0       	rjmp	.+86     	; 0x19de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1988:	89 e0       	ldi	r24, 0x09	; 9
    198a:	89 83       	std	Y+1, r24	; 0x01
    198c:	28 c0       	rjmp	.+80     	; 0x19de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    198e:	85 e2       	ldi	r24, 0x25	; 37
    1990:	89 83       	std	Y+1, r24	; 0x01
    1992:	25 c0       	rjmp	.+74     	; 0x19de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1994:	84 e0       	ldi	r24, 0x04	; 4
    1996:	89 83       	std	Y+1, r24	; 0x01
    1998:	22 c0       	rjmp	.+68     	; 0x19de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    199a:	85 e0       	ldi	r24, 0x05	; 5
    199c:	89 83       	std	Y+1, r24	; 0x01
    199e:	1f c0       	rjmp	.+62     	; 0x19de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    19a0:	86 e0       	ldi	r24, 0x06	; 6
    19a2:	89 83       	std	Y+1, r24	; 0x01
    19a4:	1c c0       	rjmp	.+56     	; 0x19de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    19a6:	8a e2       	ldi	r24, 0x2A	; 42
    19a8:	89 83       	std	Y+1, r24	; 0x01
    19aa:	19 c0       	rjmp	.+50     	; 0x19de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	89 83       	std	Y+1, r24	; 0x01
    19b0:	16 c0       	rjmp	.+44     	; 0x19de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    19b2:	82 e0       	ldi	r24, 0x02	; 2
    19b4:	89 83       	std	Y+1, r24	; 0x01
    19b6:	13 c0       	rjmp	.+38     	; 0x19de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    19b8:	83 e0       	ldi	r24, 0x03	; 3
    19ba:	89 83       	std	Y+1, r24	; 0x01
    19bc:	10 c0       	rjmp	.+32     	; 0x19de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    19be:	8d e2       	ldi	r24, 0x2D	; 45
    19c0:	89 83       	std	Y+1, r24	; 0x01
    19c2:	0d c0       	rjmp	.+26     	; 0x19de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    19c4:	8d e0       	ldi	r24, 0x0D	; 13
    19c6:	89 83       	std	Y+1, r24	; 0x01
    19c8:	0a c0       	rjmp	.+20     	; 0x19de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    19ca:	19 82       	std	Y+1, r1	; 0x01
    19cc:	08 c0       	rjmp	.+16     	; 0x19de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    19ce:	8d e3       	ldi	r24, 0x3D	; 61
    19d0:	89 83       	std	Y+1, r24	; 0x01
    19d2:	05 c0       	rjmp	.+10     	; 0x19de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    19d4:	8b e2       	ldi	r24, 0x2B	; 43
    19d6:	89 83       	std	Y+1, r24	; 0x01
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    19da:	8a 81       	ldd	r24, Y+2	; 0x02
    19dc:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    19de:	89 81       	ldd	r24, Y+1	; 0x01
} 
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	08 95       	ret

000019ee <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    19ee:	df 93       	push	r29
    19f0:	cf 93       	push	r28
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    19f6:	2e 97       	sbiw	r28, 0x0e	; 14
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	f8 94       	cli
    19fc:	de bf       	out	0x3e, r29	; 62
    19fe:	0f be       	out	0x3f, r0	; 63
    1a00:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	61 e0       	ldi	r22, 0x01	; 1
    1a06:	41 e0       	ldi	r20, 0x01	; 1
    1a08:	0e 94 1f 08 	call	0x103e	; 0x103e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	62 e0       	ldi	r22, 0x02	; 2
    1a10:	41 e0       	ldi	r20, 0x01	; 1
    1a12:	0e 94 1f 08 	call	0x103e	; 0x103e <GPIO_setupPinDirection>
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	a0 ea       	ldi	r26, 0xA0	; 160
    1a1c:	b1 e4       	ldi	r27, 0x41	; 65
    1a1e:	8b 87       	std	Y+11, r24	; 0x0b
    1a20:	9c 87       	std	Y+12, r25	; 0x0c
    1a22:	ad 87       	std	Y+13, r26	; 0x0d
    1a24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	4a ef       	ldi	r20, 0xFA	; 250
    1a34:	54 e4       	ldi	r21, 0x44	; 68
    1a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	8f 83       	std	Y+7, r24	; 0x07
    1a40:	98 87       	std	Y+8, r25	; 0x08
    1a42:	a9 87       	std	Y+9, r26	; 0x09
    1a44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a46:	6f 81       	ldd	r22, Y+7	; 0x07
    1a48:	78 85       	ldd	r23, Y+8	; 0x08
    1a4a:	89 85       	ldd	r24, Y+9	; 0x09
    1a4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e8       	ldi	r20, 0x80	; 128
    1a54:	5f e3       	ldi	r21, 0x3F	; 63
    1a56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a5a:	88 23       	and	r24, r24
    1a5c:	2c f4       	brge	.+10     	; 0x1a68 <LCD_init+0x7a>
		__ticks = 1;
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	9e 83       	std	Y+6, r25	; 0x06
    1a64:	8d 83       	std	Y+5, r24	; 0x05
    1a66:	3f c0       	rjmp	.+126    	; 0x1ae6 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1a68:	6f 81       	ldd	r22, Y+7	; 0x07
    1a6a:	78 85       	ldd	r23, Y+8	; 0x08
    1a6c:	89 85       	ldd	r24, Y+9	; 0x09
    1a6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	3f ef       	ldi	r19, 0xFF	; 255
    1a74:	4f e7       	ldi	r20, 0x7F	; 127
    1a76:	57 e4       	ldi	r21, 0x47	; 71
    1a78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a7c:	18 16       	cp	r1, r24
    1a7e:	4c f5       	brge	.+82     	; 0x1ad2 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e2       	ldi	r20, 0x20	; 32
    1a8e:	51 e4       	ldi	r21, 0x41	; 65
    1a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	bc 01       	movw	r22, r24
    1a9a:	cd 01       	movw	r24, r26
    1a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	9e 83       	std	Y+6, r25	; 0x06
    1aa6:	8d 83       	std	Y+5, r24	; 0x05
    1aa8:	0f c0       	rjmp	.+30     	; 0x1ac8 <LCD_init+0xda>
    1aaa:	88 ec       	ldi	r24, 0xC8	; 200
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	9c 83       	std	Y+4, r25	; 0x04
    1ab0:	8b 83       	std	Y+3, r24	; 0x03
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	f1 f7       	brne	.-4      	; 0x1ab6 <LCD_init+0xc8>
    1aba:	9c 83       	std	Y+4, r25	; 0x04
    1abc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1abe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	9e 83       	std	Y+6, r25	; 0x06
    1ac6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aca:	9e 81       	ldd	r25, Y+6	; 0x06
    1acc:	00 97       	sbiw	r24, 0x00	; 0
    1ace:	69 f7       	brne	.-38     	; 0x1aaa <LCD_init+0xbc>
    1ad0:	14 c0       	rjmp	.+40     	; 0x1afa <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad4:	78 85       	ldd	r23, Y+8	; 0x08
    1ad6:	89 85       	ldd	r24, Y+9	; 0x09
    1ad8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	9e 83       	std	Y+6, r25	; 0x06
    1ae4:	8d 83       	std	Y+5, r24	; 0x05
    1ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aea:	9a 83       	std	Y+2, r25	; 0x02
    1aec:	89 83       	std	Y+1, r24	; 0x01
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	9a 81       	ldd	r25, Y+2	; 0x02
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	f1 f7       	brne	.-4      	; 0x1af2 <LCD_init+0x104>
    1af6:	9a 83       	std	Y+2, r25	; 0x02
    1af8:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	63 e0       	ldi	r22, 0x03	; 3
    1afe:	41 e0       	ldi	r20, 0x01	; 1
    1b00:	0e 94 1f 08 	call	0x103e	; 0x103e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	64 e0       	ldi	r22, 0x04	; 4
    1b08:	41 e0       	ldi	r20, 0x01	; 1
    1b0a:	0e 94 1f 08 	call	0x103e	; 0x103e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	65 e0       	ldi	r22, 0x05	; 5
    1b12:	41 e0       	ldi	r20, 0x01	; 1
    1b14:	0e 94 1f 08 	call	0x103e	; 0x103e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	66 e0       	ldi	r22, 0x06	; 6
    1b1c:	41 e0       	ldi	r20, 0x01	; 1
    1b1e:	0e 94 1f 08 	call	0x103e	; 0x103e <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1b22:	83 e3       	ldi	r24, 0x33	; 51
    1b24:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1b28:	82 e3       	ldi	r24, 0x32	; 50
    1b2a:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1b2e:	88 e2       	ldi	r24, 0x28	; 40
    1b30:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1b34:	8c e0       	ldi	r24, 0x0C	; 12
    1b36:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <LCD_sendCommand>
}
    1b40:	2e 96       	adiw	r28, 0x0e	; 14
    1b42:	0f b6       	in	r0, 0x3f	; 63
    1b44:	f8 94       	cli
    1b46:	de bf       	out	0x3e, r29	; 62
    1b48:	0f be       	out	0x3f, r0	; 63
    1b4a:	cd bf       	out	0x3d, r28	; 61
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	08 95       	ret

00001b52 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1b52:	0f 93       	push	r16
    1b54:	1f 93       	push	r17
    1b56:	df 93       	push	r29
    1b58:	cf 93       	push	r28
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
    1b5e:	c3 56       	subi	r28, 0x63	; 99
    1b60:	d0 40       	sbci	r29, 0x00	; 0
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	f8 94       	cli
    1b66:	de bf       	out	0x3e, r29	; 62
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	cd bf       	out	0x3d, r28	; 61
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	ed 59       	subi	r30, 0x9D	; 157
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	61 e0       	ldi	r22, 0x01	; 1
    1b78:	40 e0       	ldi	r20, 0x00	; 0
    1b7a:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
    1b7e:	fe 01       	movw	r30, r28
    1b80:	e1 5a       	subi	r30, 0xA1	; 161
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	a0 e8       	ldi	r26, 0x80	; 128
    1b8a:	bf e3       	ldi	r27, 0x3F	; 63
    1b8c:	80 83       	st	Z, r24
    1b8e:	91 83       	std	Z+1, r25	; 0x01
    1b90:	a2 83       	std	Z+2, r26	; 0x02
    1b92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b94:	8e 01       	movw	r16, r28
    1b96:	05 5a       	subi	r16, 0xA5	; 165
    1b98:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	e1 5a       	subi	r30, 0xA1	; 161
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	60 81       	ld	r22, Z
    1ba2:	71 81       	ldd	r23, Z+1	; 0x01
    1ba4:	82 81       	ldd	r24, Z+2	; 0x02
    1ba6:	93 81       	ldd	r25, Z+3	; 0x03
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	4a ef       	ldi	r20, 0xFA	; 250
    1bae:	54 e4       	ldi	r21, 0x44	; 68
    1bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	f8 01       	movw	r30, r16
    1bba:	80 83       	st	Z, r24
    1bbc:	91 83       	std	Z+1, r25	; 0x01
    1bbe:	a2 83       	std	Z+2, r26	; 0x02
    1bc0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bc2:	fe 01       	movw	r30, r28
    1bc4:	e5 5a       	subi	r30, 0xA5	; 165
    1bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc8:	60 81       	ld	r22, Z
    1bca:	71 81       	ldd	r23, Z+1	; 0x01
    1bcc:	82 81       	ldd	r24, Z+2	; 0x02
    1bce:	93 81       	ldd	r25, Z+3	; 0x03
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	40 e8       	ldi	r20, 0x80	; 128
    1bd6:	5f e3       	ldi	r21, 0x3F	; 63
    1bd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bdc:	88 23       	and	r24, r24
    1bde:	44 f4       	brge	.+16     	; 0x1bf0 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1be0:	fe 01       	movw	r30, r28
    1be2:	e7 5a       	subi	r30, 0xA7	; 167
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	91 83       	std	Z+1, r25	; 0x01
    1bec:	80 83       	st	Z, r24
    1bee:	64 c0       	rjmp	.+200    	; 0x1cb8 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	e5 5a       	subi	r30, 0xA5	; 165
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	60 81       	ld	r22, Z
    1bf8:	71 81       	ldd	r23, Z+1	; 0x01
    1bfa:	82 81       	ldd	r24, Z+2	; 0x02
    1bfc:	93 81       	ldd	r25, Z+3	; 0x03
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	3f ef       	ldi	r19, 0xFF	; 255
    1c02:	4f e7       	ldi	r20, 0x7F	; 127
    1c04:	57 e4       	ldi	r21, 0x47	; 71
    1c06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c0a:	18 16       	cp	r1, r24
    1c0c:	0c f0       	brlt	.+2      	; 0x1c10 <LCD_sendCommand+0xbe>
    1c0e:	43 c0       	rjmp	.+134    	; 0x1c96 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c10:	fe 01       	movw	r30, r28
    1c12:	e1 5a       	subi	r30, 0xA1	; 161
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	60 81       	ld	r22, Z
    1c18:	71 81       	ldd	r23, Z+1	; 0x01
    1c1a:	82 81       	ldd	r24, Z+2	; 0x02
    1c1c:	93 81       	ldd	r25, Z+3	; 0x03
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e2       	ldi	r20, 0x20	; 32
    1c24:	51 e4       	ldi	r21, 0x41	; 65
    1c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	8e 01       	movw	r16, r28
    1c30:	07 5a       	subi	r16, 0xA7	; 167
    1c32:	1f 4f       	sbci	r17, 0xFF	; 255
    1c34:	bc 01       	movw	r22, r24
    1c36:	cd 01       	movw	r24, r26
    1c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	f8 01       	movw	r30, r16
    1c42:	91 83       	std	Z+1, r25	; 0x01
    1c44:	80 83       	st	Z, r24
    1c46:	1f c0       	rjmp	.+62     	; 0x1c86 <LCD_sendCommand+0x134>
    1c48:	fe 01       	movw	r30, r28
    1c4a:	e9 5a       	subi	r30, 0xA9	; 169
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	88 ec       	ldi	r24, 0xC8	; 200
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	91 83       	std	Z+1, r25	; 0x01
    1c54:	80 83       	st	Z, r24
    1c56:	fe 01       	movw	r30, r28
    1c58:	e9 5a       	subi	r30, 0xA9	; 169
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	80 81       	ld	r24, Z
    1c5e:	91 81       	ldd	r25, Z+1	; 0x01
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	f1 f7       	brne	.-4      	; 0x1c60 <LCD_sendCommand+0x10e>
    1c64:	fe 01       	movw	r30, r28
    1c66:	e9 5a       	subi	r30, 0xA9	; 169
    1c68:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6a:	91 83       	std	Z+1, r25	; 0x01
    1c6c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c6e:	de 01       	movw	r26, r28
    1c70:	a7 5a       	subi	r26, 0xA7	; 167
    1c72:	bf 4f       	sbci	r27, 0xFF	; 255
    1c74:	fe 01       	movw	r30, r28
    1c76:	e7 5a       	subi	r30, 0xA7	; 167
    1c78:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7a:	80 81       	ld	r24, Z
    1c7c:	91 81       	ldd	r25, Z+1	; 0x01
    1c7e:	01 97       	sbiw	r24, 0x01	; 1
    1c80:	11 96       	adiw	r26, 0x01	; 1
    1c82:	9c 93       	st	X, r25
    1c84:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c86:	fe 01       	movw	r30, r28
    1c88:	e7 5a       	subi	r30, 0xA7	; 167
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	80 81       	ld	r24, Z
    1c8e:	91 81       	ldd	r25, Z+1	; 0x01
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	d1 f6       	brne	.-76     	; 0x1c48 <LCD_sendCommand+0xf6>
    1c94:	27 c0       	rjmp	.+78     	; 0x1ce4 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c96:	8e 01       	movw	r16, r28
    1c98:	07 5a       	subi	r16, 0xA7	; 167
    1c9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	e5 5a       	subi	r30, 0xA5	; 165
    1ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca2:	60 81       	ld	r22, Z
    1ca4:	71 81       	ldd	r23, Z+1	; 0x01
    1ca6:	82 81       	ldd	r24, Z+2	; 0x02
    1ca8:	93 81       	ldd	r25, Z+3	; 0x03
    1caa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	f8 01       	movw	r30, r16
    1cb4:	91 83       	std	Z+1, r25	; 0x01
    1cb6:	80 83       	st	Z, r24
    1cb8:	de 01       	movw	r26, r28
    1cba:	ab 5a       	subi	r26, 0xAB	; 171
    1cbc:	bf 4f       	sbci	r27, 0xFF	; 255
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	e7 5a       	subi	r30, 0xA7	; 167
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	80 81       	ld	r24, Z
    1cc6:	91 81       	ldd	r25, Z+1	; 0x01
    1cc8:	8d 93       	st	X+, r24
    1cca:	9c 93       	st	X, r25
    1ccc:	fe 01       	movw	r30, r28
    1cce:	eb 5a       	subi	r30, 0xAB	; 171
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd2:	80 81       	ld	r24, Z
    1cd4:	91 81       	ldd	r25, Z+1	; 0x01
    1cd6:	01 97       	sbiw	r24, 0x01	; 1
    1cd8:	f1 f7       	brne	.-4      	; 0x1cd6 <LCD_sendCommand+0x184>
    1cda:	fe 01       	movw	r30, r28
    1cdc:	eb 5a       	subi	r30, 0xAB	; 171
    1cde:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce0:	91 83       	std	Z+1, r25	; 0x01
    1ce2:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	62 e0       	ldi	r22, 0x02	; 2
    1ce8:	41 e0       	ldi	r20, 0x01	; 1
    1cea:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
    1cee:	fe 01       	movw	r30, r28
    1cf0:	ef 5a       	subi	r30, 0xAF	; 175
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	a0 e8       	ldi	r26, 0x80	; 128
    1cfa:	bf e3       	ldi	r27, 0x3F	; 63
    1cfc:	80 83       	st	Z, r24
    1cfe:	91 83       	std	Z+1, r25	; 0x01
    1d00:	a2 83       	std	Z+2, r26	; 0x02
    1d02:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d04:	8e 01       	movw	r16, r28
    1d06:	03 5b       	subi	r16, 0xB3	; 179
    1d08:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	ef 5a       	subi	r30, 0xAF	; 175
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	60 81       	ld	r22, Z
    1d12:	71 81       	ldd	r23, Z+1	; 0x01
    1d14:	82 81       	ldd	r24, Z+2	; 0x02
    1d16:	93 81       	ldd	r25, Z+3	; 0x03
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	4a ef       	ldi	r20, 0xFA	; 250
    1d1e:	54 e4       	ldi	r21, 0x44	; 68
    1d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	f8 01       	movw	r30, r16
    1d2a:	80 83       	st	Z, r24
    1d2c:	91 83       	std	Z+1, r25	; 0x01
    1d2e:	a2 83       	std	Z+2, r26	; 0x02
    1d30:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d32:	fe 01       	movw	r30, r28
    1d34:	e3 5b       	subi	r30, 0xB3	; 179
    1d36:	ff 4f       	sbci	r31, 0xFF	; 255
    1d38:	60 81       	ld	r22, Z
    1d3a:	71 81       	ldd	r23, Z+1	; 0x01
    1d3c:	82 81       	ldd	r24, Z+2	; 0x02
    1d3e:	93 81       	ldd	r25, Z+3	; 0x03
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	40 e8       	ldi	r20, 0x80	; 128
    1d46:	5f e3       	ldi	r21, 0x3F	; 63
    1d48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d4c:	88 23       	and	r24, r24
    1d4e:	44 f4       	brge	.+16     	; 0x1d60 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1d50:	fe 01       	movw	r30, r28
    1d52:	e5 5b       	subi	r30, 0xB5	; 181
    1d54:	ff 4f       	sbci	r31, 0xFF	; 255
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	91 83       	std	Z+1, r25	; 0x01
    1d5c:	80 83       	st	Z, r24
    1d5e:	64 c0       	rjmp	.+200    	; 0x1e28 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1d60:	fe 01       	movw	r30, r28
    1d62:	e3 5b       	subi	r30, 0xB3	; 179
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	60 81       	ld	r22, Z
    1d68:	71 81       	ldd	r23, Z+1	; 0x01
    1d6a:	82 81       	ldd	r24, Z+2	; 0x02
    1d6c:	93 81       	ldd	r25, Z+3	; 0x03
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	3f ef       	ldi	r19, 0xFF	; 255
    1d72:	4f e7       	ldi	r20, 0x7F	; 127
    1d74:	57 e4       	ldi	r21, 0x47	; 71
    1d76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d7a:	18 16       	cp	r1, r24
    1d7c:	0c f0       	brlt	.+2      	; 0x1d80 <LCD_sendCommand+0x22e>
    1d7e:	43 c0       	rjmp	.+134    	; 0x1e06 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d80:	fe 01       	movw	r30, r28
    1d82:	ef 5a       	subi	r30, 0xAF	; 175
    1d84:	ff 4f       	sbci	r31, 0xFF	; 255
    1d86:	60 81       	ld	r22, Z
    1d88:	71 81       	ldd	r23, Z+1	; 0x01
    1d8a:	82 81       	ldd	r24, Z+2	; 0x02
    1d8c:	93 81       	ldd	r25, Z+3	; 0x03
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	40 e2       	ldi	r20, 0x20	; 32
    1d94:	51 e4       	ldi	r21, 0x41	; 65
    1d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	8e 01       	movw	r16, r28
    1da0:	05 5b       	subi	r16, 0xB5	; 181
    1da2:	1f 4f       	sbci	r17, 0xFF	; 255
    1da4:	bc 01       	movw	r22, r24
    1da6:	cd 01       	movw	r24, r26
    1da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	f8 01       	movw	r30, r16
    1db2:	91 83       	std	Z+1, r25	; 0x01
    1db4:	80 83       	st	Z, r24
    1db6:	1f c0       	rjmp	.+62     	; 0x1df6 <LCD_sendCommand+0x2a4>
    1db8:	fe 01       	movw	r30, r28
    1dba:	e7 5b       	subi	r30, 0xB7	; 183
    1dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbe:	88 ec       	ldi	r24, 0xC8	; 200
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	91 83       	std	Z+1, r25	; 0x01
    1dc4:	80 83       	st	Z, r24
    1dc6:	fe 01       	movw	r30, r28
    1dc8:	e7 5b       	subi	r30, 0xB7	; 183
    1dca:	ff 4f       	sbci	r31, 0xFF	; 255
    1dcc:	80 81       	ld	r24, Z
    1dce:	91 81       	ldd	r25, Z+1	; 0x01
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	f1 f7       	brne	.-4      	; 0x1dd0 <LCD_sendCommand+0x27e>
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	e7 5b       	subi	r30, 0xB7	; 183
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	91 83       	std	Z+1, r25	; 0x01
    1ddc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dde:	de 01       	movw	r26, r28
    1de0:	a5 5b       	subi	r26, 0xB5	; 181
    1de2:	bf 4f       	sbci	r27, 0xFF	; 255
    1de4:	fe 01       	movw	r30, r28
    1de6:	e5 5b       	subi	r30, 0xB5	; 181
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	80 81       	ld	r24, Z
    1dec:	91 81       	ldd	r25, Z+1	; 0x01
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	11 96       	adiw	r26, 0x01	; 1
    1df2:	9c 93       	st	X, r25
    1df4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df6:	fe 01       	movw	r30, r28
    1df8:	e5 5b       	subi	r30, 0xB5	; 181
    1dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfc:	80 81       	ld	r24, Z
    1dfe:	91 81       	ldd	r25, Z+1	; 0x01
    1e00:	00 97       	sbiw	r24, 0x00	; 0
    1e02:	d1 f6       	brne	.-76     	; 0x1db8 <LCD_sendCommand+0x266>
    1e04:	27 c0       	rjmp	.+78     	; 0x1e54 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e06:	8e 01       	movw	r16, r28
    1e08:	05 5b       	subi	r16, 0xB5	; 181
    1e0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	e3 5b       	subi	r30, 0xB3	; 179
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	60 81       	ld	r22, Z
    1e14:	71 81       	ldd	r23, Z+1	; 0x01
    1e16:	82 81       	ldd	r24, Z+2	; 0x02
    1e18:	93 81       	ldd	r25, Z+3	; 0x03
    1e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	f8 01       	movw	r30, r16
    1e24:	91 83       	std	Z+1, r25	; 0x01
    1e26:	80 83       	st	Z, r24
    1e28:	de 01       	movw	r26, r28
    1e2a:	a9 5b       	subi	r26, 0xB9	; 185
    1e2c:	bf 4f       	sbci	r27, 0xFF	; 255
    1e2e:	fe 01       	movw	r30, r28
    1e30:	e5 5b       	subi	r30, 0xB5	; 181
    1e32:	ff 4f       	sbci	r31, 0xFF	; 255
    1e34:	80 81       	ld	r24, Z
    1e36:	91 81       	ldd	r25, Z+1	; 0x01
    1e38:	8d 93       	st	X+, r24
    1e3a:	9c 93       	st	X, r25
    1e3c:	fe 01       	movw	r30, r28
    1e3e:	e9 5b       	subi	r30, 0xB9	; 185
    1e40:	ff 4f       	sbci	r31, 0xFF	; 255
    1e42:	80 81       	ld	r24, Z
    1e44:	91 81       	ldd	r25, Z+1	; 0x01
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	f1 f7       	brne	.-4      	; 0x1e46 <LCD_sendCommand+0x2f4>
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	e9 5b       	subi	r30, 0xB9	; 185
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	91 83       	std	Z+1, r25	; 0x01
    1e52:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1e54:	fe 01       	movw	r30, r28
    1e56:	ed 59       	subi	r30, 0x9D	; 157
    1e58:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5a:	80 81       	ld	r24, Z
    1e5c:	88 2f       	mov	r24, r24
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	80 71       	andi	r24, 0x10	; 16
    1e62:	90 70       	andi	r25, 0x00	; 0
    1e64:	95 95       	asr	r25
    1e66:	87 95       	ror	r24
    1e68:	95 95       	asr	r25
    1e6a:	87 95       	ror	r24
    1e6c:	95 95       	asr	r25
    1e6e:	87 95       	ror	r24
    1e70:	95 95       	asr	r25
    1e72:	87 95       	ror	r24
    1e74:	98 2f       	mov	r25, r24
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	63 e0       	ldi	r22, 0x03	; 3
    1e7a:	49 2f       	mov	r20, r25
    1e7c:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1e80:	fe 01       	movw	r30, r28
    1e82:	ed 59       	subi	r30, 0x9D	; 157
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	80 81       	ld	r24, Z
    1e88:	88 2f       	mov	r24, r24
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	80 72       	andi	r24, 0x20	; 32
    1e8e:	90 70       	andi	r25, 0x00	; 0
    1e90:	95 95       	asr	r25
    1e92:	87 95       	ror	r24
    1e94:	95 95       	asr	r25
    1e96:	87 95       	ror	r24
    1e98:	95 95       	asr	r25
    1e9a:	87 95       	ror	r24
    1e9c:	95 95       	asr	r25
    1e9e:	87 95       	ror	r24
    1ea0:	95 95       	asr	r25
    1ea2:	87 95       	ror	r24
    1ea4:	98 2f       	mov	r25, r24
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	64 e0       	ldi	r22, 0x04	; 4
    1eaa:	49 2f       	mov	r20, r25
    1eac:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1eb0:	fe 01       	movw	r30, r28
    1eb2:	ed 59       	subi	r30, 0x9D	; 157
    1eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb6:	80 81       	ld	r24, Z
    1eb8:	88 2f       	mov	r24, r24
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	80 74       	andi	r24, 0x40	; 64
    1ebe:	90 70       	andi	r25, 0x00	; 0
    1ec0:	08 2e       	mov	r0, r24
    1ec2:	89 2f       	mov	r24, r25
    1ec4:	00 0c       	add	r0, r0
    1ec6:	88 1f       	adc	r24, r24
    1ec8:	99 0b       	sbc	r25, r25
    1eca:	00 0c       	add	r0, r0
    1ecc:	88 1f       	adc	r24, r24
    1ece:	99 1f       	adc	r25, r25
    1ed0:	98 2f       	mov	r25, r24
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	65 e0       	ldi	r22, 0x05	; 5
    1ed6:	49 2f       	mov	r20, r25
    1ed8:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1edc:	fe 01       	movw	r30, r28
    1ede:	ed 59       	subi	r30, 0x9D	; 157
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	80 81       	ld	r24, Z
    1ee4:	98 2f       	mov	r25, r24
    1ee6:	99 1f       	adc	r25, r25
    1ee8:	99 27       	eor	r25, r25
    1eea:	99 1f       	adc	r25, r25
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	66 e0       	ldi	r22, 0x06	; 6
    1ef0:	49 2f       	mov	r20, r25
    1ef2:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
    1ef6:	fe 01       	movw	r30, r28
    1ef8:	ed 5b       	subi	r30, 0xBD	; 189
    1efa:	ff 4f       	sbci	r31, 0xFF	; 255
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	a0 e8       	ldi	r26, 0x80	; 128
    1f02:	bf e3       	ldi	r27, 0x3F	; 63
    1f04:	80 83       	st	Z, r24
    1f06:	91 83       	std	Z+1, r25	; 0x01
    1f08:	a2 83       	std	Z+2, r26	; 0x02
    1f0a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0c:	8e 01       	movw	r16, r28
    1f0e:	01 5c       	subi	r16, 0xC1	; 193
    1f10:	1f 4f       	sbci	r17, 0xFF	; 255
    1f12:	fe 01       	movw	r30, r28
    1f14:	ed 5b       	subi	r30, 0xBD	; 189
    1f16:	ff 4f       	sbci	r31, 0xFF	; 255
    1f18:	60 81       	ld	r22, Z
    1f1a:	71 81       	ldd	r23, Z+1	; 0x01
    1f1c:	82 81       	ldd	r24, Z+2	; 0x02
    1f1e:	93 81       	ldd	r25, Z+3	; 0x03
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	4a ef       	ldi	r20, 0xFA	; 250
    1f26:	54 e4       	ldi	r21, 0x44	; 68
    1f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	f8 01       	movw	r30, r16
    1f32:	80 83       	st	Z, r24
    1f34:	91 83       	std	Z+1, r25	; 0x01
    1f36:	a2 83       	std	Z+2, r26	; 0x02
    1f38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	ff 96       	adiw	r30, 0x3f	; 63
    1f3e:	60 81       	ld	r22, Z
    1f40:	71 81       	ldd	r23, Z+1	; 0x01
    1f42:	82 81       	ldd	r24, Z+2	; 0x02
    1f44:	93 81       	ldd	r25, Z+3	; 0x03
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	40 e8       	ldi	r20, 0x80	; 128
    1f4c:	5f e3       	ldi	r21, 0x3F	; 63
    1f4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f52:	88 23       	and	r24, r24
    1f54:	2c f4       	brge	.+10     	; 0x1f60 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	9e af       	std	Y+62, r25	; 0x3e
    1f5c:	8d af       	std	Y+61, r24	; 0x3d
    1f5e:	46 c0       	rjmp	.+140    	; 0x1fec <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1f60:	fe 01       	movw	r30, r28
    1f62:	ff 96       	adiw	r30, 0x3f	; 63
    1f64:	60 81       	ld	r22, Z
    1f66:	71 81       	ldd	r23, Z+1	; 0x01
    1f68:	82 81       	ldd	r24, Z+2	; 0x02
    1f6a:	93 81       	ldd	r25, Z+3	; 0x03
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	3f ef       	ldi	r19, 0xFF	; 255
    1f70:	4f e7       	ldi	r20, 0x7F	; 127
    1f72:	57 e4       	ldi	r21, 0x47	; 71
    1f74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f78:	18 16       	cp	r1, r24
    1f7a:	64 f5       	brge	.+88     	; 0x1fd4 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7c:	fe 01       	movw	r30, r28
    1f7e:	ed 5b       	subi	r30, 0xBD	; 189
    1f80:	ff 4f       	sbci	r31, 0xFF	; 255
    1f82:	60 81       	ld	r22, Z
    1f84:	71 81       	ldd	r23, Z+1	; 0x01
    1f86:	82 81       	ldd	r24, Z+2	; 0x02
    1f88:	93 81       	ldd	r25, Z+3	; 0x03
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	40 e2       	ldi	r20, 0x20	; 32
    1f90:	51 e4       	ldi	r21, 0x41	; 65
    1f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	bc 01       	movw	r22, r24
    1f9c:	cd 01       	movw	r24, r26
    1f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	9e af       	std	Y+62, r25	; 0x3e
    1fa8:	8d af       	std	Y+61, r24	; 0x3d
    1faa:	0f c0       	rjmp	.+30     	; 0x1fca <LCD_sendCommand+0x478>
    1fac:	88 ec       	ldi	r24, 0xC8	; 200
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	9c af       	std	Y+60, r25	; 0x3c
    1fb2:	8b af       	std	Y+59, r24	; 0x3b
    1fb4:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fb6:	9c ad       	ldd	r25, Y+60	; 0x3c
    1fb8:	01 97       	sbiw	r24, 0x01	; 1
    1fba:	f1 f7       	brne	.-4      	; 0x1fb8 <LCD_sendCommand+0x466>
    1fbc:	9c af       	std	Y+60, r25	; 0x3c
    1fbe:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fc2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fc4:	01 97       	sbiw	r24, 0x01	; 1
    1fc6:	9e af       	std	Y+62, r25	; 0x3e
    1fc8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fca:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fcc:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fce:	00 97       	sbiw	r24, 0x00	; 0
    1fd0:	69 f7       	brne	.-38     	; 0x1fac <LCD_sendCommand+0x45a>
    1fd2:	16 c0       	rjmp	.+44     	; 0x2000 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd4:	fe 01       	movw	r30, r28
    1fd6:	ff 96       	adiw	r30, 0x3f	; 63
    1fd8:	60 81       	ld	r22, Z
    1fda:	71 81       	ldd	r23, Z+1	; 0x01
    1fdc:	82 81       	ldd	r24, Z+2	; 0x02
    1fde:	93 81       	ldd	r25, Z+3	; 0x03
    1fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	9e af       	std	Y+62, r25	; 0x3e
    1fea:	8d af       	std	Y+61, r24	; 0x3d
    1fec:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fee:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ff0:	9a af       	std	Y+58, r25	; 0x3a
    1ff2:	89 af       	std	Y+57, r24	; 0x39
    1ff4:	89 ad       	ldd	r24, Y+57	; 0x39
    1ff6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	f1 f7       	brne	.-4      	; 0x1ff8 <LCD_sendCommand+0x4a6>
    1ffc:	9a af       	std	Y+58, r25	; 0x3a
    1ffe:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	62 e0       	ldi	r22, 0x02	; 2
    2004:	40 e0       	ldi	r20, 0x00	; 0
    2006:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	a0 e8       	ldi	r26, 0x80	; 128
    2010:	bf e3       	ldi	r27, 0x3F	; 63
    2012:	8d ab       	std	Y+53, r24	; 0x35
    2014:	9e ab       	std	Y+54, r25	; 0x36
    2016:	af ab       	std	Y+55, r26	; 0x37
    2018:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    201a:	6d a9       	ldd	r22, Y+53	; 0x35
    201c:	7e a9       	ldd	r23, Y+54	; 0x36
    201e:	8f a9       	ldd	r24, Y+55	; 0x37
    2020:	98 ad       	ldd	r25, Y+56	; 0x38
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	4a ef       	ldi	r20, 0xFA	; 250
    2028:	54 e4       	ldi	r21, 0x44	; 68
    202a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	89 ab       	std	Y+49, r24	; 0x31
    2034:	9a ab       	std	Y+50, r25	; 0x32
    2036:	ab ab       	std	Y+51, r26	; 0x33
    2038:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    203a:	69 a9       	ldd	r22, Y+49	; 0x31
    203c:	7a a9       	ldd	r23, Y+50	; 0x32
    203e:	8b a9       	ldd	r24, Y+51	; 0x33
    2040:	9c a9       	ldd	r25, Y+52	; 0x34
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	40 e8       	ldi	r20, 0x80	; 128
    2048:	5f e3       	ldi	r21, 0x3F	; 63
    204a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    204e:	88 23       	and	r24, r24
    2050:	2c f4       	brge	.+10     	; 0x205c <LCD_sendCommand+0x50a>
		__ticks = 1;
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	98 ab       	std	Y+48, r25	; 0x30
    2058:	8f a7       	std	Y+47, r24	; 0x2f
    205a:	3f c0       	rjmp	.+126    	; 0x20da <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    205c:	69 a9       	ldd	r22, Y+49	; 0x31
    205e:	7a a9       	ldd	r23, Y+50	; 0x32
    2060:	8b a9       	ldd	r24, Y+51	; 0x33
    2062:	9c a9       	ldd	r25, Y+52	; 0x34
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	3f ef       	ldi	r19, 0xFF	; 255
    2068:	4f e7       	ldi	r20, 0x7F	; 127
    206a:	57 e4       	ldi	r21, 0x47	; 71
    206c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2070:	18 16       	cp	r1, r24
    2072:	4c f5       	brge	.+82     	; 0x20c6 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2074:	6d a9       	ldd	r22, Y+53	; 0x35
    2076:	7e a9       	ldd	r23, Y+54	; 0x36
    2078:	8f a9       	ldd	r24, Y+55	; 0x37
    207a:	98 ad       	ldd	r25, Y+56	; 0x38
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	40 e2       	ldi	r20, 0x20	; 32
    2082:	51 e4       	ldi	r21, 0x41	; 65
    2084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	bc 01       	movw	r22, r24
    208e:	cd 01       	movw	r24, r26
    2090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	98 ab       	std	Y+48, r25	; 0x30
    209a:	8f a7       	std	Y+47, r24	; 0x2f
    209c:	0f c0       	rjmp	.+30     	; 0x20bc <LCD_sendCommand+0x56a>
    209e:	88 ec       	ldi	r24, 0xC8	; 200
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	9e a7       	std	Y+46, r25	; 0x2e
    20a4:	8d a7       	std	Y+45, r24	; 0x2d
    20a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    20a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    20aa:	01 97       	sbiw	r24, 0x01	; 1
    20ac:	f1 f7       	brne	.-4      	; 0x20aa <LCD_sendCommand+0x558>
    20ae:	9e a7       	std	Y+46, r25	; 0x2e
    20b0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    20b4:	98 a9       	ldd	r25, Y+48	; 0x30
    20b6:	01 97       	sbiw	r24, 0x01	; 1
    20b8:	98 ab       	std	Y+48, r25	; 0x30
    20ba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    20be:	98 a9       	ldd	r25, Y+48	; 0x30
    20c0:	00 97       	sbiw	r24, 0x00	; 0
    20c2:	69 f7       	brne	.-38     	; 0x209e <LCD_sendCommand+0x54c>
    20c4:	14 c0       	rjmp	.+40     	; 0x20ee <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c6:	69 a9       	ldd	r22, Y+49	; 0x31
    20c8:	7a a9       	ldd	r23, Y+50	; 0x32
    20ca:	8b a9       	ldd	r24, Y+51	; 0x33
    20cc:	9c a9       	ldd	r25, Y+52	; 0x34
    20ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	98 ab       	std	Y+48, r25	; 0x30
    20d8:	8f a7       	std	Y+47, r24	; 0x2f
    20da:	8f a5       	ldd	r24, Y+47	; 0x2f
    20dc:	98 a9       	ldd	r25, Y+48	; 0x30
    20de:	9c a7       	std	Y+44, r25	; 0x2c
    20e0:	8b a7       	std	Y+43, r24	; 0x2b
    20e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    20e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    20e6:	01 97       	sbiw	r24, 0x01	; 1
    20e8:	f1 f7       	brne	.-4      	; 0x20e6 <LCD_sendCommand+0x594>
    20ea:	9c a7       	std	Y+44, r25	; 0x2c
    20ec:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	62 e0       	ldi	r22, 0x02	; 2
    20f2:	41 e0       	ldi	r20, 0x01	; 1
    20f4:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	a0 e8       	ldi	r26, 0x80	; 128
    20fe:	bf e3       	ldi	r27, 0x3F	; 63
    2100:	8f a3       	std	Y+39, r24	; 0x27
    2102:	98 a7       	std	Y+40, r25	; 0x28
    2104:	a9 a7       	std	Y+41, r26	; 0x29
    2106:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2108:	6f a1       	ldd	r22, Y+39	; 0x27
    210a:	78 a5       	ldd	r23, Y+40	; 0x28
    210c:	89 a5       	ldd	r24, Y+41	; 0x29
    210e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	4a ef       	ldi	r20, 0xFA	; 250
    2116:	54 e4       	ldi	r21, 0x44	; 68
    2118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	8b a3       	std	Y+35, r24	; 0x23
    2122:	9c a3       	std	Y+36, r25	; 0x24
    2124:	ad a3       	std	Y+37, r26	; 0x25
    2126:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2128:	6b a1       	ldd	r22, Y+35	; 0x23
    212a:	7c a1       	ldd	r23, Y+36	; 0x24
    212c:	8d a1       	ldd	r24, Y+37	; 0x25
    212e:	9e a1       	ldd	r25, Y+38	; 0x26
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e8       	ldi	r20, 0x80	; 128
    2136:	5f e3       	ldi	r21, 0x3F	; 63
    2138:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    213c:	88 23       	and	r24, r24
    213e:	2c f4       	brge	.+10     	; 0x214a <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	9a a3       	std	Y+34, r25	; 0x22
    2146:	89 a3       	std	Y+33, r24	; 0x21
    2148:	3f c0       	rjmp	.+126    	; 0x21c8 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    214a:	6b a1       	ldd	r22, Y+35	; 0x23
    214c:	7c a1       	ldd	r23, Y+36	; 0x24
    214e:	8d a1       	ldd	r24, Y+37	; 0x25
    2150:	9e a1       	ldd	r25, Y+38	; 0x26
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	3f ef       	ldi	r19, 0xFF	; 255
    2156:	4f e7       	ldi	r20, 0x7F	; 127
    2158:	57 e4       	ldi	r21, 0x47	; 71
    215a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    215e:	18 16       	cp	r1, r24
    2160:	4c f5       	brge	.+82     	; 0x21b4 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2162:	6f a1       	ldd	r22, Y+39	; 0x27
    2164:	78 a5       	ldd	r23, Y+40	; 0x28
    2166:	89 a5       	ldd	r24, Y+41	; 0x29
    2168:	9a a5       	ldd	r25, Y+42	; 0x2a
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e2       	ldi	r20, 0x20	; 32
    2170:	51 e4       	ldi	r21, 0x41	; 65
    2172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	bc 01       	movw	r22, r24
    217c:	cd 01       	movw	r24, r26
    217e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	9a a3       	std	Y+34, r25	; 0x22
    2188:	89 a3       	std	Y+33, r24	; 0x21
    218a:	0f c0       	rjmp	.+30     	; 0x21aa <LCD_sendCommand+0x658>
    218c:	88 ec       	ldi	r24, 0xC8	; 200
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	98 a3       	std	Y+32, r25	; 0x20
    2192:	8f 8f       	std	Y+31, r24	; 0x1f
    2194:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2196:	98 a1       	ldd	r25, Y+32	; 0x20
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	f1 f7       	brne	.-4      	; 0x2198 <LCD_sendCommand+0x646>
    219c:	98 a3       	std	Y+32, r25	; 0x20
    219e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a0:	89 a1       	ldd	r24, Y+33	; 0x21
    21a2:	9a a1       	ldd	r25, Y+34	; 0x22
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	9a a3       	std	Y+34, r25	; 0x22
    21a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21aa:	89 a1       	ldd	r24, Y+33	; 0x21
    21ac:	9a a1       	ldd	r25, Y+34	; 0x22
    21ae:	00 97       	sbiw	r24, 0x00	; 0
    21b0:	69 f7       	brne	.-38     	; 0x218c <LCD_sendCommand+0x63a>
    21b2:	14 c0       	rjmp	.+40     	; 0x21dc <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b4:	6b a1       	ldd	r22, Y+35	; 0x23
    21b6:	7c a1       	ldd	r23, Y+36	; 0x24
    21b8:	8d a1       	ldd	r24, Y+37	; 0x25
    21ba:	9e a1       	ldd	r25, Y+38	; 0x26
    21bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	9a a3       	std	Y+34, r25	; 0x22
    21c6:	89 a3       	std	Y+33, r24	; 0x21
    21c8:	89 a1       	ldd	r24, Y+33	; 0x21
    21ca:	9a a1       	ldd	r25, Y+34	; 0x22
    21cc:	9e 8f       	std	Y+30, r25	; 0x1e
    21ce:	8d 8f       	std	Y+29, r24	; 0x1d
    21d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	f1 f7       	brne	.-4      	; 0x21d4 <LCD_sendCommand+0x682>
    21d8:	9e 8f       	std	Y+30, r25	; 0x1e
    21da:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    21dc:	fe 01       	movw	r30, r28
    21de:	ed 59       	subi	r30, 0x9D	; 157
    21e0:	ff 4f       	sbci	r31, 0xFF	; 255
    21e2:	80 81       	ld	r24, Z
    21e4:	98 2f       	mov	r25, r24
    21e6:	91 70       	andi	r25, 0x01	; 1
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	63 e0       	ldi	r22, 0x03	; 3
    21ec:	49 2f       	mov	r20, r25
    21ee:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    21f2:	fe 01       	movw	r30, r28
    21f4:	ed 59       	subi	r30, 0x9D	; 157
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	80 81       	ld	r24, Z
    21fa:	88 2f       	mov	r24, r24
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	82 70       	andi	r24, 0x02	; 2
    2200:	90 70       	andi	r25, 0x00	; 0
    2202:	95 95       	asr	r25
    2204:	87 95       	ror	r24
    2206:	98 2f       	mov	r25, r24
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	64 e0       	ldi	r22, 0x04	; 4
    220c:	49 2f       	mov	r20, r25
    220e:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2212:	fe 01       	movw	r30, r28
    2214:	ed 59       	subi	r30, 0x9D	; 157
    2216:	ff 4f       	sbci	r31, 0xFF	; 255
    2218:	80 81       	ld	r24, Z
    221a:	88 2f       	mov	r24, r24
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	84 70       	andi	r24, 0x04	; 4
    2220:	90 70       	andi	r25, 0x00	; 0
    2222:	95 95       	asr	r25
    2224:	87 95       	ror	r24
    2226:	95 95       	asr	r25
    2228:	87 95       	ror	r24
    222a:	98 2f       	mov	r25, r24
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	65 e0       	ldi	r22, 0x05	; 5
    2230:	49 2f       	mov	r20, r25
    2232:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2236:	fe 01       	movw	r30, r28
    2238:	ed 59       	subi	r30, 0x9D	; 157
    223a:	ff 4f       	sbci	r31, 0xFF	; 255
    223c:	80 81       	ld	r24, Z
    223e:	88 2f       	mov	r24, r24
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	88 70       	andi	r24, 0x08	; 8
    2244:	90 70       	andi	r25, 0x00	; 0
    2246:	95 95       	asr	r25
    2248:	87 95       	ror	r24
    224a:	95 95       	asr	r25
    224c:	87 95       	ror	r24
    224e:	95 95       	asr	r25
    2250:	87 95       	ror	r24
    2252:	98 2f       	mov	r25, r24
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	66 e0       	ldi	r22, 0x06	; 6
    2258:	49 2f       	mov	r20, r25
    225a:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	a0 e8       	ldi	r26, 0x80	; 128
    2264:	bf e3       	ldi	r27, 0x3F	; 63
    2266:	89 8f       	std	Y+25, r24	; 0x19
    2268:	9a 8f       	std	Y+26, r25	; 0x1a
    226a:	ab 8f       	std	Y+27, r26	; 0x1b
    226c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226e:	69 8d       	ldd	r22, Y+25	; 0x19
    2270:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2272:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2274:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	4a ef       	ldi	r20, 0xFA	; 250
    227c:	54 e4       	ldi	r21, 0x44	; 68
    227e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	8d 8b       	std	Y+21, r24	; 0x15
    2288:	9e 8b       	std	Y+22, r25	; 0x16
    228a:	af 8b       	std	Y+23, r26	; 0x17
    228c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    228e:	6d 89       	ldd	r22, Y+21	; 0x15
    2290:	7e 89       	ldd	r23, Y+22	; 0x16
    2292:	8f 89       	ldd	r24, Y+23	; 0x17
    2294:	98 8d       	ldd	r25, Y+24	; 0x18
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	40 e8       	ldi	r20, 0x80	; 128
    229c:	5f e3       	ldi	r21, 0x3F	; 63
    229e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22a2:	88 23       	and	r24, r24
    22a4:	2c f4       	brge	.+10     	; 0x22b0 <LCD_sendCommand+0x75e>
		__ticks = 1;
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	9c 8b       	std	Y+20, r25	; 0x14
    22ac:	8b 8b       	std	Y+19, r24	; 0x13
    22ae:	3f c0       	rjmp	.+126    	; 0x232e <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    22b0:	6d 89       	ldd	r22, Y+21	; 0x15
    22b2:	7e 89       	ldd	r23, Y+22	; 0x16
    22b4:	8f 89       	ldd	r24, Y+23	; 0x17
    22b6:	98 8d       	ldd	r25, Y+24	; 0x18
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	3f ef       	ldi	r19, 0xFF	; 255
    22bc:	4f e7       	ldi	r20, 0x7F	; 127
    22be:	57 e4       	ldi	r21, 0x47	; 71
    22c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22c4:	18 16       	cp	r1, r24
    22c6:	4c f5       	brge	.+82     	; 0x231a <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c8:	69 8d       	ldd	r22, Y+25	; 0x19
    22ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	40 e2       	ldi	r20, 0x20	; 32
    22d6:	51 e4       	ldi	r21, 0x41	; 65
    22d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	bc 01       	movw	r22, r24
    22e2:	cd 01       	movw	r24, r26
    22e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	9c 8b       	std	Y+20, r25	; 0x14
    22ee:	8b 8b       	std	Y+19, r24	; 0x13
    22f0:	0f c0       	rjmp	.+30     	; 0x2310 <LCD_sendCommand+0x7be>
    22f2:	88 ec       	ldi	r24, 0xC8	; 200
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	9a 8b       	std	Y+18, r25	; 0x12
    22f8:	89 8b       	std	Y+17, r24	; 0x11
    22fa:	89 89       	ldd	r24, Y+17	; 0x11
    22fc:	9a 89       	ldd	r25, Y+18	; 0x12
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	f1 f7       	brne	.-4      	; 0x22fe <LCD_sendCommand+0x7ac>
    2302:	9a 8b       	std	Y+18, r25	; 0x12
    2304:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2306:	8b 89       	ldd	r24, Y+19	; 0x13
    2308:	9c 89       	ldd	r25, Y+20	; 0x14
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	9c 8b       	std	Y+20, r25	; 0x14
    230e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2310:	8b 89       	ldd	r24, Y+19	; 0x13
    2312:	9c 89       	ldd	r25, Y+20	; 0x14
    2314:	00 97       	sbiw	r24, 0x00	; 0
    2316:	69 f7       	brne	.-38     	; 0x22f2 <LCD_sendCommand+0x7a0>
    2318:	14 c0       	rjmp	.+40     	; 0x2342 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    231a:	6d 89       	ldd	r22, Y+21	; 0x15
    231c:	7e 89       	ldd	r23, Y+22	; 0x16
    231e:	8f 89       	ldd	r24, Y+23	; 0x17
    2320:	98 8d       	ldd	r25, Y+24	; 0x18
    2322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	9c 8b       	std	Y+20, r25	; 0x14
    232c:	8b 8b       	std	Y+19, r24	; 0x13
    232e:	8b 89       	ldd	r24, Y+19	; 0x13
    2330:	9c 89       	ldd	r25, Y+20	; 0x14
    2332:	98 8b       	std	Y+16, r25	; 0x10
    2334:	8f 87       	std	Y+15, r24	; 0x0f
    2336:	8f 85       	ldd	r24, Y+15	; 0x0f
    2338:	98 89       	ldd	r25, Y+16	; 0x10
    233a:	01 97       	sbiw	r24, 0x01	; 1
    233c:	f1 f7       	brne	.-4      	; 0x233a <LCD_sendCommand+0x7e8>
    233e:	98 8b       	std	Y+16, r25	; 0x10
    2340:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	62 e0       	ldi	r22, 0x02	; 2
    2346:	40 e0       	ldi	r20, 0x00	; 0
    2348:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
    234c:	80 e0       	ldi	r24, 0x00	; 0
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	a0 e8       	ldi	r26, 0x80	; 128
    2352:	bf e3       	ldi	r27, 0x3F	; 63
    2354:	8b 87       	std	Y+11, r24	; 0x0b
    2356:	9c 87       	std	Y+12, r25	; 0x0c
    2358:	ad 87       	std	Y+13, r26	; 0x0d
    235a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235c:	6b 85       	ldd	r22, Y+11	; 0x0b
    235e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2360:	8d 85       	ldd	r24, Y+13	; 0x0d
    2362:	9e 85       	ldd	r25, Y+14	; 0x0e
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	4a ef       	ldi	r20, 0xFA	; 250
    236a:	54 e4       	ldi	r21, 0x44	; 68
    236c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	8f 83       	std	Y+7, r24	; 0x07
    2376:	98 87       	std	Y+8, r25	; 0x08
    2378:	a9 87       	std	Y+9, r26	; 0x09
    237a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    237c:	6f 81       	ldd	r22, Y+7	; 0x07
    237e:	78 85       	ldd	r23, Y+8	; 0x08
    2380:	89 85       	ldd	r24, Y+9	; 0x09
    2382:	9a 85       	ldd	r25, Y+10	; 0x0a
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	40 e8       	ldi	r20, 0x80	; 128
    238a:	5f e3       	ldi	r21, 0x3F	; 63
    238c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2390:	88 23       	and	r24, r24
    2392:	2c f4       	brge	.+10     	; 0x239e <LCD_sendCommand+0x84c>
		__ticks = 1;
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	9e 83       	std	Y+6, r25	; 0x06
    239a:	8d 83       	std	Y+5, r24	; 0x05
    239c:	3f c0       	rjmp	.+126    	; 0x241c <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    239e:	6f 81       	ldd	r22, Y+7	; 0x07
    23a0:	78 85       	ldd	r23, Y+8	; 0x08
    23a2:	89 85       	ldd	r24, Y+9	; 0x09
    23a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	3f ef       	ldi	r19, 0xFF	; 255
    23aa:	4f e7       	ldi	r20, 0x7F	; 127
    23ac:	57 e4       	ldi	r21, 0x47	; 71
    23ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23b2:	18 16       	cp	r1, r24
    23b4:	4c f5       	brge	.+82     	; 0x2408 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    23b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    23bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	40 e2       	ldi	r20, 0x20	; 32
    23c4:	51 e4       	ldi	r21, 0x41	; 65
    23c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	bc 01       	movw	r22, r24
    23d0:	cd 01       	movw	r24, r26
    23d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	9e 83       	std	Y+6, r25	; 0x06
    23dc:	8d 83       	std	Y+5, r24	; 0x05
    23de:	0f c0       	rjmp	.+30     	; 0x23fe <LCD_sendCommand+0x8ac>
    23e0:	88 ec       	ldi	r24, 0xC8	; 200
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	9c 83       	std	Y+4, r25	; 0x04
    23e6:	8b 83       	std	Y+3, r24	; 0x03
    23e8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ea:	9c 81       	ldd	r25, Y+4	; 0x04
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	f1 f7       	brne	.-4      	; 0x23ec <LCD_sendCommand+0x89a>
    23f0:	9c 83       	std	Y+4, r25	; 0x04
    23f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f4:	8d 81       	ldd	r24, Y+5	; 0x05
    23f6:	9e 81       	ldd	r25, Y+6	; 0x06
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	9e 83       	std	Y+6, r25	; 0x06
    23fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2400:	9e 81       	ldd	r25, Y+6	; 0x06
    2402:	00 97       	sbiw	r24, 0x00	; 0
    2404:	69 f7       	brne	.-38     	; 0x23e0 <LCD_sendCommand+0x88e>
    2406:	14 c0       	rjmp	.+40     	; 0x2430 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2408:	6f 81       	ldd	r22, Y+7	; 0x07
    240a:	78 85       	ldd	r23, Y+8	; 0x08
    240c:	89 85       	ldd	r24, Y+9	; 0x09
    240e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	9e 83       	std	Y+6, r25	; 0x06
    241a:	8d 83       	std	Y+5, r24	; 0x05
    241c:	8d 81       	ldd	r24, Y+5	; 0x05
    241e:	9e 81       	ldd	r25, Y+6	; 0x06
    2420:	9a 83       	std	Y+2, r25	; 0x02
    2422:	89 83       	std	Y+1, r24	; 0x01
    2424:	89 81       	ldd	r24, Y+1	; 0x01
    2426:	9a 81       	ldd	r25, Y+2	; 0x02
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	f1 f7       	brne	.-4      	; 0x2428 <LCD_sendCommand+0x8d6>
    242c:	9a 83       	std	Y+2, r25	; 0x02
    242e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2430:	cd 59       	subi	r28, 0x9D	; 157
    2432:	df 4f       	sbci	r29, 0xFF	; 255
    2434:	0f b6       	in	r0, 0x3f	; 63
    2436:	f8 94       	cli
    2438:	de bf       	out	0x3e, r29	; 62
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	cd bf       	out	0x3d, r28	; 61
    243e:	cf 91       	pop	r28
    2440:	df 91       	pop	r29
    2442:	1f 91       	pop	r17
    2444:	0f 91       	pop	r16
    2446:	08 95       	ret

00002448 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2448:	0f 93       	push	r16
    244a:	1f 93       	push	r17
    244c:	df 93       	push	r29
    244e:	cf 93       	push	r28
    2450:	cd b7       	in	r28, 0x3d	; 61
    2452:	de b7       	in	r29, 0x3e	; 62
    2454:	c3 56       	subi	r28, 0x63	; 99
    2456:	d0 40       	sbci	r29, 0x00	; 0
    2458:	0f b6       	in	r0, 0x3f	; 63
    245a:	f8 94       	cli
    245c:	de bf       	out	0x3e, r29	; 62
    245e:	0f be       	out	0x3f, r0	; 63
    2460:	cd bf       	out	0x3d, r28	; 61
    2462:	fe 01       	movw	r30, r28
    2464:	ed 59       	subi	r30, 0x9D	; 157
    2466:	ff 4f       	sbci	r31, 0xFF	; 255
    2468:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    246a:	80 e0       	ldi	r24, 0x00	; 0
    246c:	61 e0       	ldi	r22, 0x01	; 1
    246e:	41 e0       	ldi	r20, 0x01	; 1
    2470:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
    2474:	fe 01       	movw	r30, r28
    2476:	e1 5a       	subi	r30, 0xA1	; 161
    2478:	ff 4f       	sbci	r31, 0xFF	; 255
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	a0 e8       	ldi	r26, 0x80	; 128
    2480:	bf e3       	ldi	r27, 0x3F	; 63
    2482:	80 83       	st	Z, r24
    2484:	91 83       	std	Z+1, r25	; 0x01
    2486:	a2 83       	std	Z+2, r26	; 0x02
    2488:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    248a:	8e 01       	movw	r16, r28
    248c:	05 5a       	subi	r16, 0xA5	; 165
    248e:	1f 4f       	sbci	r17, 0xFF	; 255
    2490:	fe 01       	movw	r30, r28
    2492:	e1 5a       	subi	r30, 0xA1	; 161
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	60 81       	ld	r22, Z
    2498:	71 81       	ldd	r23, Z+1	; 0x01
    249a:	82 81       	ldd	r24, Z+2	; 0x02
    249c:	93 81       	ldd	r25, Z+3	; 0x03
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	4a ef       	ldi	r20, 0xFA	; 250
    24a4:	54 e4       	ldi	r21, 0x44	; 68
    24a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24aa:	dc 01       	movw	r26, r24
    24ac:	cb 01       	movw	r24, r22
    24ae:	f8 01       	movw	r30, r16
    24b0:	80 83       	st	Z, r24
    24b2:	91 83       	std	Z+1, r25	; 0x01
    24b4:	a2 83       	std	Z+2, r26	; 0x02
    24b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24b8:	fe 01       	movw	r30, r28
    24ba:	e5 5a       	subi	r30, 0xA5	; 165
    24bc:	ff 4f       	sbci	r31, 0xFF	; 255
    24be:	60 81       	ld	r22, Z
    24c0:	71 81       	ldd	r23, Z+1	; 0x01
    24c2:	82 81       	ldd	r24, Z+2	; 0x02
    24c4:	93 81       	ldd	r25, Z+3	; 0x03
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	40 e8       	ldi	r20, 0x80	; 128
    24cc:	5f e3       	ldi	r21, 0x3F	; 63
    24ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24d2:	88 23       	and	r24, r24
    24d4:	44 f4       	brge	.+16     	; 0x24e6 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    24d6:	fe 01       	movw	r30, r28
    24d8:	e7 5a       	subi	r30, 0xA7	; 167
    24da:	ff 4f       	sbci	r31, 0xFF	; 255
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	91 83       	std	Z+1, r25	; 0x01
    24e2:	80 83       	st	Z, r24
    24e4:	64 c0       	rjmp	.+200    	; 0x25ae <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    24e6:	fe 01       	movw	r30, r28
    24e8:	e5 5a       	subi	r30, 0xA5	; 165
    24ea:	ff 4f       	sbci	r31, 0xFF	; 255
    24ec:	60 81       	ld	r22, Z
    24ee:	71 81       	ldd	r23, Z+1	; 0x01
    24f0:	82 81       	ldd	r24, Z+2	; 0x02
    24f2:	93 81       	ldd	r25, Z+3	; 0x03
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	3f ef       	ldi	r19, 0xFF	; 255
    24f8:	4f e7       	ldi	r20, 0x7F	; 127
    24fa:	57 e4       	ldi	r21, 0x47	; 71
    24fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2500:	18 16       	cp	r1, r24
    2502:	0c f0       	brlt	.+2      	; 0x2506 <LCD_displayCharacter+0xbe>
    2504:	43 c0       	rjmp	.+134    	; 0x258c <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2506:	fe 01       	movw	r30, r28
    2508:	e1 5a       	subi	r30, 0xA1	; 161
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	60 81       	ld	r22, Z
    250e:	71 81       	ldd	r23, Z+1	; 0x01
    2510:	82 81       	ldd	r24, Z+2	; 0x02
    2512:	93 81       	ldd	r25, Z+3	; 0x03
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	40 e2       	ldi	r20, 0x20	; 32
    251a:	51 e4       	ldi	r21, 0x41	; 65
    251c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	8e 01       	movw	r16, r28
    2526:	07 5a       	subi	r16, 0xA7	; 167
    2528:	1f 4f       	sbci	r17, 0xFF	; 255
    252a:	bc 01       	movw	r22, r24
    252c:	cd 01       	movw	r24, r26
    252e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	f8 01       	movw	r30, r16
    2538:	91 83       	std	Z+1, r25	; 0x01
    253a:	80 83       	st	Z, r24
    253c:	1f c0       	rjmp	.+62     	; 0x257c <LCD_displayCharacter+0x134>
    253e:	fe 01       	movw	r30, r28
    2540:	e9 5a       	subi	r30, 0xA9	; 169
    2542:	ff 4f       	sbci	r31, 0xFF	; 255
    2544:	88 ec       	ldi	r24, 0xC8	; 200
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	91 83       	std	Z+1, r25	; 0x01
    254a:	80 83       	st	Z, r24
    254c:	fe 01       	movw	r30, r28
    254e:	e9 5a       	subi	r30, 0xA9	; 169
    2550:	ff 4f       	sbci	r31, 0xFF	; 255
    2552:	80 81       	ld	r24, Z
    2554:	91 81       	ldd	r25, Z+1	; 0x01
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	f1 f7       	brne	.-4      	; 0x2556 <LCD_displayCharacter+0x10e>
    255a:	fe 01       	movw	r30, r28
    255c:	e9 5a       	subi	r30, 0xA9	; 169
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	91 83       	std	Z+1, r25	; 0x01
    2562:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2564:	de 01       	movw	r26, r28
    2566:	a7 5a       	subi	r26, 0xA7	; 167
    2568:	bf 4f       	sbci	r27, 0xFF	; 255
    256a:	fe 01       	movw	r30, r28
    256c:	e7 5a       	subi	r30, 0xA7	; 167
    256e:	ff 4f       	sbci	r31, 0xFF	; 255
    2570:	80 81       	ld	r24, Z
    2572:	91 81       	ldd	r25, Z+1	; 0x01
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	11 96       	adiw	r26, 0x01	; 1
    2578:	9c 93       	st	X, r25
    257a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    257c:	fe 01       	movw	r30, r28
    257e:	e7 5a       	subi	r30, 0xA7	; 167
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	80 81       	ld	r24, Z
    2584:	91 81       	ldd	r25, Z+1	; 0x01
    2586:	00 97       	sbiw	r24, 0x00	; 0
    2588:	d1 f6       	brne	.-76     	; 0x253e <LCD_displayCharacter+0xf6>
    258a:	27 c0       	rjmp	.+78     	; 0x25da <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    258c:	8e 01       	movw	r16, r28
    258e:	07 5a       	subi	r16, 0xA7	; 167
    2590:	1f 4f       	sbci	r17, 0xFF	; 255
    2592:	fe 01       	movw	r30, r28
    2594:	e5 5a       	subi	r30, 0xA5	; 165
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	60 81       	ld	r22, Z
    259a:	71 81       	ldd	r23, Z+1	; 0x01
    259c:	82 81       	ldd	r24, Z+2	; 0x02
    259e:	93 81       	ldd	r25, Z+3	; 0x03
    25a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	f8 01       	movw	r30, r16
    25aa:	91 83       	std	Z+1, r25	; 0x01
    25ac:	80 83       	st	Z, r24
    25ae:	de 01       	movw	r26, r28
    25b0:	ab 5a       	subi	r26, 0xAB	; 171
    25b2:	bf 4f       	sbci	r27, 0xFF	; 255
    25b4:	fe 01       	movw	r30, r28
    25b6:	e7 5a       	subi	r30, 0xA7	; 167
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	80 81       	ld	r24, Z
    25bc:	91 81       	ldd	r25, Z+1	; 0x01
    25be:	8d 93       	st	X+, r24
    25c0:	9c 93       	st	X, r25
    25c2:	fe 01       	movw	r30, r28
    25c4:	eb 5a       	subi	r30, 0xAB	; 171
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	80 81       	ld	r24, Z
    25ca:	91 81       	ldd	r25, Z+1	; 0x01
    25cc:	01 97       	sbiw	r24, 0x01	; 1
    25ce:	f1 f7       	brne	.-4      	; 0x25cc <LCD_displayCharacter+0x184>
    25d0:	fe 01       	movw	r30, r28
    25d2:	eb 5a       	subi	r30, 0xAB	; 171
    25d4:	ff 4f       	sbci	r31, 0xFF	; 255
    25d6:	91 83       	std	Z+1, r25	; 0x01
    25d8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    25da:	80 e0       	ldi	r24, 0x00	; 0
    25dc:	62 e0       	ldi	r22, 0x02	; 2
    25de:	41 e0       	ldi	r20, 0x01	; 1
    25e0:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
    25e4:	fe 01       	movw	r30, r28
    25e6:	ef 5a       	subi	r30, 0xAF	; 175
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	a0 e8       	ldi	r26, 0x80	; 128
    25f0:	bf e3       	ldi	r27, 0x3F	; 63
    25f2:	80 83       	st	Z, r24
    25f4:	91 83       	std	Z+1, r25	; 0x01
    25f6:	a2 83       	std	Z+2, r26	; 0x02
    25f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25fa:	8e 01       	movw	r16, r28
    25fc:	03 5b       	subi	r16, 0xB3	; 179
    25fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2600:	fe 01       	movw	r30, r28
    2602:	ef 5a       	subi	r30, 0xAF	; 175
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	60 81       	ld	r22, Z
    2608:	71 81       	ldd	r23, Z+1	; 0x01
    260a:	82 81       	ldd	r24, Z+2	; 0x02
    260c:	93 81       	ldd	r25, Z+3	; 0x03
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	4a ef       	ldi	r20, 0xFA	; 250
    2614:	54 e4       	ldi	r21, 0x44	; 68
    2616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	f8 01       	movw	r30, r16
    2620:	80 83       	st	Z, r24
    2622:	91 83       	std	Z+1, r25	; 0x01
    2624:	a2 83       	std	Z+2, r26	; 0x02
    2626:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2628:	fe 01       	movw	r30, r28
    262a:	e3 5b       	subi	r30, 0xB3	; 179
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	60 81       	ld	r22, Z
    2630:	71 81       	ldd	r23, Z+1	; 0x01
    2632:	82 81       	ldd	r24, Z+2	; 0x02
    2634:	93 81       	ldd	r25, Z+3	; 0x03
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	40 e8       	ldi	r20, 0x80	; 128
    263c:	5f e3       	ldi	r21, 0x3F	; 63
    263e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2642:	88 23       	and	r24, r24
    2644:	44 f4       	brge	.+16     	; 0x2656 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2646:	fe 01       	movw	r30, r28
    2648:	e5 5b       	subi	r30, 0xB5	; 181
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	91 83       	std	Z+1, r25	; 0x01
    2652:	80 83       	st	Z, r24
    2654:	64 c0       	rjmp	.+200    	; 0x271e <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2656:	fe 01       	movw	r30, r28
    2658:	e3 5b       	subi	r30, 0xB3	; 179
    265a:	ff 4f       	sbci	r31, 0xFF	; 255
    265c:	60 81       	ld	r22, Z
    265e:	71 81       	ldd	r23, Z+1	; 0x01
    2660:	82 81       	ldd	r24, Z+2	; 0x02
    2662:	93 81       	ldd	r25, Z+3	; 0x03
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	3f ef       	ldi	r19, 0xFF	; 255
    2668:	4f e7       	ldi	r20, 0x7F	; 127
    266a:	57 e4       	ldi	r21, 0x47	; 71
    266c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2670:	18 16       	cp	r1, r24
    2672:	0c f0       	brlt	.+2      	; 0x2676 <LCD_displayCharacter+0x22e>
    2674:	43 c0       	rjmp	.+134    	; 0x26fc <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2676:	fe 01       	movw	r30, r28
    2678:	ef 5a       	subi	r30, 0xAF	; 175
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	60 81       	ld	r22, Z
    267e:	71 81       	ldd	r23, Z+1	; 0x01
    2680:	82 81       	ldd	r24, Z+2	; 0x02
    2682:	93 81       	ldd	r25, Z+3	; 0x03
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	40 e2       	ldi	r20, 0x20	; 32
    268a:	51 e4       	ldi	r21, 0x41	; 65
    268c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	8e 01       	movw	r16, r28
    2696:	05 5b       	subi	r16, 0xB5	; 181
    2698:	1f 4f       	sbci	r17, 0xFF	; 255
    269a:	bc 01       	movw	r22, r24
    269c:	cd 01       	movw	r24, r26
    269e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	f8 01       	movw	r30, r16
    26a8:	91 83       	std	Z+1, r25	; 0x01
    26aa:	80 83       	st	Z, r24
    26ac:	1f c0       	rjmp	.+62     	; 0x26ec <LCD_displayCharacter+0x2a4>
    26ae:	fe 01       	movw	r30, r28
    26b0:	e7 5b       	subi	r30, 0xB7	; 183
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	88 ec       	ldi	r24, 0xC8	; 200
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	91 83       	std	Z+1, r25	; 0x01
    26ba:	80 83       	st	Z, r24
    26bc:	fe 01       	movw	r30, r28
    26be:	e7 5b       	subi	r30, 0xB7	; 183
    26c0:	ff 4f       	sbci	r31, 0xFF	; 255
    26c2:	80 81       	ld	r24, Z
    26c4:	91 81       	ldd	r25, Z+1	; 0x01
    26c6:	01 97       	sbiw	r24, 0x01	; 1
    26c8:	f1 f7       	brne	.-4      	; 0x26c6 <LCD_displayCharacter+0x27e>
    26ca:	fe 01       	movw	r30, r28
    26cc:	e7 5b       	subi	r30, 0xB7	; 183
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	91 83       	std	Z+1, r25	; 0x01
    26d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d4:	de 01       	movw	r26, r28
    26d6:	a5 5b       	subi	r26, 0xB5	; 181
    26d8:	bf 4f       	sbci	r27, 0xFF	; 255
    26da:	fe 01       	movw	r30, r28
    26dc:	e5 5b       	subi	r30, 0xB5	; 181
    26de:	ff 4f       	sbci	r31, 0xFF	; 255
    26e0:	80 81       	ld	r24, Z
    26e2:	91 81       	ldd	r25, Z+1	; 0x01
    26e4:	01 97       	sbiw	r24, 0x01	; 1
    26e6:	11 96       	adiw	r26, 0x01	; 1
    26e8:	9c 93       	st	X, r25
    26ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ec:	fe 01       	movw	r30, r28
    26ee:	e5 5b       	subi	r30, 0xB5	; 181
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	80 81       	ld	r24, Z
    26f4:	91 81       	ldd	r25, Z+1	; 0x01
    26f6:	00 97       	sbiw	r24, 0x00	; 0
    26f8:	d1 f6       	brne	.-76     	; 0x26ae <LCD_displayCharacter+0x266>
    26fa:	27 c0       	rjmp	.+78     	; 0x274a <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26fc:	8e 01       	movw	r16, r28
    26fe:	05 5b       	subi	r16, 0xB5	; 181
    2700:	1f 4f       	sbci	r17, 0xFF	; 255
    2702:	fe 01       	movw	r30, r28
    2704:	e3 5b       	subi	r30, 0xB3	; 179
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	60 81       	ld	r22, Z
    270a:	71 81       	ldd	r23, Z+1	; 0x01
    270c:	82 81       	ldd	r24, Z+2	; 0x02
    270e:	93 81       	ldd	r25, Z+3	; 0x03
    2710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	f8 01       	movw	r30, r16
    271a:	91 83       	std	Z+1, r25	; 0x01
    271c:	80 83       	st	Z, r24
    271e:	de 01       	movw	r26, r28
    2720:	a9 5b       	subi	r26, 0xB9	; 185
    2722:	bf 4f       	sbci	r27, 0xFF	; 255
    2724:	fe 01       	movw	r30, r28
    2726:	e5 5b       	subi	r30, 0xB5	; 181
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	80 81       	ld	r24, Z
    272c:	91 81       	ldd	r25, Z+1	; 0x01
    272e:	8d 93       	st	X+, r24
    2730:	9c 93       	st	X, r25
    2732:	fe 01       	movw	r30, r28
    2734:	e9 5b       	subi	r30, 0xB9	; 185
    2736:	ff 4f       	sbci	r31, 0xFF	; 255
    2738:	80 81       	ld	r24, Z
    273a:	91 81       	ldd	r25, Z+1	; 0x01
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	f1 f7       	brne	.-4      	; 0x273c <LCD_displayCharacter+0x2f4>
    2740:	fe 01       	movw	r30, r28
    2742:	e9 5b       	subi	r30, 0xB9	; 185
    2744:	ff 4f       	sbci	r31, 0xFF	; 255
    2746:	91 83       	std	Z+1, r25	; 0x01
    2748:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    274a:	fe 01       	movw	r30, r28
    274c:	ed 59       	subi	r30, 0x9D	; 157
    274e:	ff 4f       	sbci	r31, 0xFF	; 255
    2750:	80 81       	ld	r24, Z
    2752:	88 2f       	mov	r24, r24
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	80 71       	andi	r24, 0x10	; 16
    2758:	90 70       	andi	r25, 0x00	; 0
    275a:	95 95       	asr	r25
    275c:	87 95       	ror	r24
    275e:	95 95       	asr	r25
    2760:	87 95       	ror	r24
    2762:	95 95       	asr	r25
    2764:	87 95       	ror	r24
    2766:	95 95       	asr	r25
    2768:	87 95       	ror	r24
    276a:	98 2f       	mov	r25, r24
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	63 e0       	ldi	r22, 0x03	; 3
    2770:	49 2f       	mov	r20, r25
    2772:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2776:	fe 01       	movw	r30, r28
    2778:	ed 59       	subi	r30, 0x9D	; 157
    277a:	ff 4f       	sbci	r31, 0xFF	; 255
    277c:	80 81       	ld	r24, Z
    277e:	88 2f       	mov	r24, r24
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	80 72       	andi	r24, 0x20	; 32
    2784:	90 70       	andi	r25, 0x00	; 0
    2786:	95 95       	asr	r25
    2788:	87 95       	ror	r24
    278a:	95 95       	asr	r25
    278c:	87 95       	ror	r24
    278e:	95 95       	asr	r25
    2790:	87 95       	ror	r24
    2792:	95 95       	asr	r25
    2794:	87 95       	ror	r24
    2796:	95 95       	asr	r25
    2798:	87 95       	ror	r24
    279a:	98 2f       	mov	r25, r24
    279c:	80 e0       	ldi	r24, 0x00	; 0
    279e:	64 e0       	ldi	r22, 0x04	; 4
    27a0:	49 2f       	mov	r20, r25
    27a2:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    27a6:	fe 01       	movw	r30, r28
    27a8:	ed 59       	subi	r30, 0x9D	; 157
    27aa:	ff 4f       	sbci	r31, 0xFF	; 255
    27ac:	80 81       	ld	r24, Z
    27ae:	88 2f       	mov	r24, r24
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	80 74       	andi	r24, 0x40	; 64
    27b4:	90 70       	andi	r25, 0x00	; 0
    27b6:	08 2e       	mov	r0, r24
    27b8:	89 2f       	mov	r24, r25
    27ba:	00 0c       	add	r0, r0
    27bc:	88 1f       	adc	r24, r24
    27be:	99 0b       	sbc	r25, r25
    27c0:	00 0c       	add	r0, r0
    27c2:	88 1f       	adc	r24, r24
    27c4:	99 1f       	adc	r25, r25
    27c6:	98 2f       	mov	r25, r24
    27c8:	80 e0       	ldi	r24, 0x00	; 0
    27ca:	65 e0       	ldi	r22, 0x05	; 5
    27cc:	49 2f       	mov	r20, r25
    27ce:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    27d2:	fe 01       	movw	r30, r28
    27d4:	ed 59       	subi	r30, 0x9D	; 157
    27d6:	ff 4f       	sbci	r31, 0xFF	; 255
    27d8:	80 81       	ld	r24, Z
    27da:	98 2f       	mov	r25, r24
    27dc:	99 1f       	adc	r25, r25
    27de:	99 27       	eor	r25, r25
    27e0:	99 1f       	adc	r25, r25
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	66 e0       	ldi	r22, 0x06	; 6
    27e6:	49 2f       	mov	r20, r25
    27e8:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
    27ec:	fe 01       	movw	r30, r28
    27ee:	ed 5b       	subi	r30, 0xBD	; 189
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	a0 e8       	ldi	r26, 0x80	; 128
    27f8:	bf e3       	ldi	r27, 0x3F	; 63
    27fa:	80 83       	st	Z, r24
    27fc:	91 83       	std	Z+1, r25	; 0x01
    27fe:	a2 83       	std	Z+2, r26	; 0x02
    2800:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2802:	8e 01       	movw	r16, r28
    2804:	01 5c       	subi	r16, 0xC1	; 193
    2806:	1f 4f       	sbci	r17, 0xFF	; 255
    2808:	fe 01       	movw	r30, r28
    280a:	ed 5b       	subi	r30, 0xBD	; 189
    280c:	ff 4f       	sbci	r31, 0xFF	; 255
    280e:	60 81       	ld	r22, Z
    2810:	71 81       	ldd	r23, Z+1	; 0x01
    2812:	82 81       	ldd	r24, Z+2	; 0x02
    2814:	93 81       	ldd	r25, Z+3	; 0x03
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	4a ef       	ldi	r20, 0xFA	; 250
    281c:	54 e4       	ldi	r21, 0x44	; 68
    281e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	f8 01       	movw	r30, r16
    2828:	80 83       	st	Z, r24
    282a:	91 83       	std	Z+1, r25	; 0x01
    282c:	a2 83       	std	Z+2, r26	; 0x02
    282e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2830:	fe 01       	movw	r30, r28
    2832:	ff 96       	adiw	r30, 0x3f	; 63
    2834:	60 81       	ld	r22, Z
    2836:	71 81       	ldd	r23, Z+1	; 0x01
    2838:	82 81       	ldd	r24, Z+2	; 0x02
    283a:	93 81       	ldd	r25, Z+3	; 0x03
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	40 e8       	ldi	r20, 0x80	; 128
    2842:	5f e3       	ldi	r21, 0x3F	; 63
    2844:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2848:	88 23       	and	r24, r24
    284a:	2c f4       	brge	.+10     	; 0x2856 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	9e af       	std	Y+62, r25	; 0x3e
    2852:	8d af       	std	Y+61, r24	; 0x3d
    2854:	46 c0       	rjmp	.+140    	; 0x28e2 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2856:	fe 01       	movw	r30, r28
    2858:	ff 96       	adiw	r30, 0x3f	; 63
    285a:	60 81       	ld	r22, Z
    285c:	71 81       	ldd	r23, Z+1	; 0x01
    285e:	82 81       	ldd	r24, Z+2	; 0x02
    2860:	93 81       	ldd	r25, Z+3	; 0x03
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	3f ef       	ldi	r19, 0xFF	; 255
    2866:	4f e7       	ldi	r20, 0x7F	; 127
    2868:	57 e4       	ldi	r21, 0x47	; 71
    286a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    286e:	18 16       	cp	r1, r24
    2870:	64 f5       	brge	.+88     	; 0x28ca <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2872:	fe 01       	movw	r30, r28
    2874:	ed 5b       	subi	r30, 0xBD	; 189
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	60 81       	ld	r22, Z
    287a:	71 81       	ldd	r23, Z+1	; 0x01
    287c:	82 81       	ldd	r24, Z+2	; 0x02
    287e:	93 81       	ldd	r25, Z+3	; 0x03
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	40 e2       	ldi	r20, 0x20	; 32
    2886:	51 e4       	ldi	r21, 0x41	; 65
    2888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	bc 01       	movw	r22, r24
    2892:	cd 01       	movw	r24, r26
    2894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2898:	dc 01       	movw	r26, r24
    289a:	cb 01       	movw	r24, r22
    289c:	9e af       	std	Y+62, r25	; 0x3e
    289e:	8d af       	std	Y+61, r24	; 0x3d
    28a0:	0f c0       	rjmp	.+30     	; 0x28c0 <LCD_displayCharacter+0x478>
    28a2:	88 ec       	ldi	r24, 0xC8	; 200
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	9c af       	std	Y+60, r25	; 0x3c
    28a8:	8b af       	std	Y+59, r24	; 0x3b
    28aa:	8b ad       	ldd	r24, Y+59	; 0x3b
    28ac:	9c ad       	ldd	r25, Y+60	; 0x3c
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	f1 f7       	brne	.-4      	; 0x28ae <LCD_displayCharacter+0x466>
    28b2:	9c af       	std	Y+60, r25	; 0x3c
    28b4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    28b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    28ba:	01 97       	sbiw	r24, 0x01	; 1
    28bc:	9e af       	std	Y+62, r25	; 0x3e
    28be:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    28c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    28c4:	00 97       	sbiw	r24, 0x00	; 0
    28c6:	69 f7       	brne	.-38     	; 0x28a2 <LCD_displayCharacter+0x45a>
    28c8:	16 c0       	rjmp	.+44     	; 0x28f6 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ca:	fe 01       	movw	r30, r28
    28cc:	ff 96       	adiw	r30, 0x3f	; 63
    28ce:	60 81       	ld	r22, Z
    28d0:	71 81       	ldd	r23, Z+1	; 0x01
    28d2:	82 81       	ldd	r24, Z+2	; 0x02
    28d4:	93 81       	ldd	r25, Z+3	; 0x03
    28d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28da:	dc 01       	movw	r26, r24
    28dc:	cb 01       	movw	r24, r22
    28de:	9e af       	std	Y+62, r25	; 0x3e
    28e0:	8d af       	std	Y+61, r24	; 0x3d
    28e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    28e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    28e6:	9a af       	std	Y+58, r25	; 0x3a
    28e8:	89 af       	std	Y+57, r24	; 0x39
    28ea:	89 ad       	ldd	r24, Y+57	; 0x39
    28ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    28ee:	01 97       	sbiw	r24, 0x01	; 1
    28f0:	f1 f7       	brne	.-4      	; 0x28ee <LCD_displayCharacter+0x4a6>
    28f2:	9a af       	std	Y+58, r25	; 0x3a
    28f4:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    28f6:	80 e0       	ldi	r24, 0x00	; 0
    28f8:	62 e0       	ldi	r22, 0x02	; 2
    28fa:	40 e0       	ldi	r20, 0x00	; 0
    28fc:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
    2900:	80 e0       	ldi	r24, 0x00	; 0
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	a0 e8       	ldi	r26, 0x80	; 128
    2906:	bf e3       	ldi	r27, 0x3F	; 63
    2908:	8d ab       	std	Y+53, r24	; 0x35
    290a:	9e ab       	std	Y+54, r25	; 0x36
    290c:	af ab       	std	Y+55, r26	; 0x37
    290e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2910:	6d a9       	ldd	r22, Y+53	; 0x35
    2912:	7e a9       	ldd	r23, Y+54	; 0x36
    2914:	8f a9       	ldd	r24, Y+55	; 0x37
    2916:	98 ad       	ldd	r25, Y+56	; 0x38
    2918:	20 e0       	ldi	r18, 0x00	; 0
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	4a ef       	ldi	r20, 0xFA	; 250
    291e:	54 e4       	ldi	r21, 0x44	; 68
    2920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2924:	dc 01       	movw	r26, r24
    2926:	cb 01       	movw	r24, r22
    2928:	89 ab       	std	Y+49, r24	; 0x31
    292a:	9a ab       	std	Y+50, r25	; 0x32
    292c:	ab ab       	std	Y+51, r26	; 0x33
    292e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2930:	69 a9       	ldd	r22, Y+49	; 0x31
    2932:	7a a9       	ldd	r23, Y+50	; 0x32
    2934:	8b a9       	ldd	r24, Y+51	; 0x33
    2936:	9c a9       	ldd	r25, Y+52	; 0x34
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	40 e8       	ldi	r20, 0x80	; 128
    293e:	5f e3       	ldi	r21, 0x3F	; 63
    2940:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2944:	88 23       	and	r24, r24
    2946:	2c f4       	brge	.+10     	; 0x2952 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	98 ab       	std	Y+48, r25	; 0x30
    294e:	8f a7       	std	Y+47, r24	; 0x2f
    2950:	3f c0       	rjmp	.+126    	; 0x29d0 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2952:	69 a9       	ldd	r22, Y+49	; 0x31
    2954:	7a a9       	ldd	r23, Y+50	; 0x32
    2956:	8b a9       	ldd	r24, Y+51	; 0x33
    2958:	9c a9       	ldd	r25, Y+52	; 0x34
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	3f ef       	ldi	r19, 0xFF	; 255
    295e:	4f e7       	ldi	r20, 0x7F	; 127
    2960:	57 e4       	ldi	r21, 0x47	; 71
    2962:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2966:	18 16       	cp	r1, r24
    2968:	4c f5       	brge	.+82     	; 0x29bc <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    296a:	6d a9       	ldd	r22, Y+53	; 0x35
    296c:	7e a9       	ldd	r23, Y+54	; 0x36
    296e:	8f a9       	ldd	r24, Y+55	; 0x37
    2970:	98 ad       	ldd	r25, Y+56	; 0x38
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	40 e2       	ldi	r20, 0x20	; 32
    2978:	51 e4       	ldi	r21, 0x41	; 65
    297a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	bc 01       	movw	r22, r24
    2984:	cd 01       	movw	r24, r26
    2986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	98 ab       	std	Y+48, r25	; 0x30
    2990:	8f a7       	std	Y+47, r24	; 0x2f
    2992:	0f c0       	rjmp	.+30     	; 0x29b2 <LCD_displayCharacter+0x56a>
    2994:	88 ec       	ldi	r24, 0xC8	; 200
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	9e a7       	std	Y+46, r25	; 0x2e
    299a:	8d a7       	std	Y+45, r24	; 0x2d
    299c:	8d a5       	ldd	r24, Y+45	; 0x2d
    299e:	9e a5       	ldd	r25, Y+46	; 0x2e
    29a0:	01 97       	sbiw	r24, 0x01	; 1
    29a2:	f1 f7       	brne	.-4      	; 0x29a0 <LCD_displayCharacter+0x558>
    29a4:	9e a7       	std	Y+46, r25	; 0x2e
    29a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    29aa:	98 a9       	ldd	r25, Y+48	; 0x30
    29ac:	01 97       	sbiw	r24, 0x01	; 1
    29ae:	98 ab       	std	Y+48, r25	; 0x30
    29b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    29b4:	98 a9       	ldd	r25, Y+48	; 0x30
    29b6:	00 97       	sbiw	r24, 0x00	; 0
    29b8:	69 f7       	brne	.-38     	; 0x2994 <LCD_displayCharacter+0x54c>
    29ba:	14 c0       	rjmp	.+40     	; 0x29e4 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29bc:	69 a9       	ldd	r22, Y+49	; 0x31
    29be:	7a a9       	ldd	r23, Y+50	; 0x32
    29c0:	8b a9       	ldd	r24, Y+51	; 0x33
    29c2:	9c a9       	ldd	r25, Y+52	; 0x34
    29c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c8:	dc 01       	movw	r26, r24
    29ca:	cb 01       	movw	r24, r22
    29cc:	98 ab       	std	Y+48, r25	; 0x30
    29ce:	8f a7       	std	Y+47, r24	; 0x2f
    29d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    29d2:	98 a9       	ldd	r25, Y+48	; 0x30
    29d4:	9c a7       	std	Y+44, r25	; 0x2c
    29d6:	8b a7       	std	Y+43, r24	; 0x2b
    29d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    29da:	9c a5       	ldd	r25, Y+44	; 0x2c
    29dc:	01 97       	sbiw	r24, 0x01	; 1
    29de:	f1 f7       	brne	.-4      	; 0x29dc <LCD_displayCharacter+0x594>
    29e0:	9c a7       	std	Y+44, r25	; 0x2c
    29e2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    29e4:	80 e0       	ldi	r24, 0x00	; 0
    29e6:	62 e0       	ldi	r22, 0x02	; 2
    29e8:	41 e0       	ldi	r20, 0x01	; 1
    29ea:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
    29ee:	80 e0       	ldi	r24, 0x00	; 0
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	a0 e8       	ldi	r26, 0x80	; 128
    29f4:	bf e3       	ldi	r27, 0x3F	; 63
    29f6:	8f a3       	std	Y+39, r24	; 0x27
    29f8:	98 a7       	std	Y+40, r25	; 0x28
    29fa:	a9 a7       	std	Y+41, r26	; 0x29
    29fc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29fe:	6f a1       	ldd	r22, Y+39	; 0x27
    2a00:	78 a5       	ldd	r23, Y+40	; 0x28
    2a02:	89 a5       	ldd	r24, Y+41	; 0x29
    2a04:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	4a ef       	ldi	r20, 0xFA	; 250
    2a0c:	54 e4       	ldi	r21, 0x44	; 68
    2a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	8b a3       	std	Y+35, r24	; 0x23
    2a18:	9c a3       	std	Y+36, r25	; 0x24
    2a1a:	ad a3       	std	Y+37, r26	; 0x25
    2a1c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a1e:	6b a1       	ldd	r22, Y+35	; 0x23
    2a20:	7c a1       	ldd	r23, Y+36	; 0x24
    2a22:	8d a1       	ldd	r24, Y+37	; 0x25
    2a24:	9e a1       	ldd	r25, Y+38	; 0x26
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	40 e8       	ldi	r20, 0x80	; 128
    2a2c:	5f e3       	ldi	r21, 0x3F	; 63
    2a2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a32:	88 23       	and	r24, r24
    2a34:	2c f4       	brge	.+10     	; 0x2a40 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2a36:	81 e0       	ldi	r24, 0x01	; 1
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	9a a3       	std	Y+34, r25	; 0x22
    2a3c:	89 a3       	std	Y+33, r24	; 0x21
    2a3e:	3f c0       	rjmp	.+126    	; 0x2abe <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2a40:	6b a1       	ldd	r22, Y+35	; 0x23
    2a42:	7c a1       	ldd	r23, Y+36	; 0x24
    2a44:	8d a1       	ldd	r24, Y+37	; 0x25
    2a46:	9e a1       	ldd	r25, Y+38	; 0x26
    2a48:	20 e0       	ldi	r18, 0x00	; 0
    2a4a:	3f ef       	ldi	r19, 0xFF	; 255
    2a4c:	4f e7       	ldi	r20, 0x7F	; 127
    2a4e:	57 e4       	ldi	r21, 0x47	; 71
    2a50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a54:	18 16       	cp	r1, r24
    2a56:	4c f5       	brge	.+82     	; 0x2aaa <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a58:	6f a1       	ldd	r22, Y+39	; 0x27
    2a5a:	78 a5       	ldd	r23, Y+40	; 0x28
    2a5c:	89 a5       	ldd	r24, Y+41	; 0x29
    2a5e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	40 e2       	ldi	r20, 0x20	; 32
    2a66:	51 e4       	ldi	r21, 0x41	; 65
    2a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	cb 01       	movw	r24, r22
    2a70:	bc 01       	movw	r22, r24
    2a72:	cd 01       	movw	r24, r26
    2a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	9a a3       	std	Y+34, r25	; 0x22
    2a7e:	89 a3       	std	Y+33, r24	; 0x21
    2a80:	0f c0       	rjmp	.+30     	; 0x2aa0 <LCD_displayCharacter+0x658>
    2a82:	88 ec       	ldi	r24, 0xC8	; 200
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	98 a3       	std	Y+32, r25	; 0x20
    2a88:	8f 8f       	std	Y+31, r24	; 0x1f
    2a8a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a8c:	98 a1       	ldd	r25, Y+32	; 0x20
    2a8e:	01 97       	sbiw	r24, 0x01	; 1
    2a90:	f1 f7       	brne	.-4      	; 0x2a8e <LCD_displayCharacter+0x646>
    2a92:	98 a3       	std	Y+32, r25	; 0x20
    2a94:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a96:	89 a1       	ldd	r24, Y+33	; 0x21
    2a98:	9a a1       	ldd	r25, Y+34	; 0x22
    2a9a:	01 97       	sbiw	r24, 0x01	; 1
    2a9c:	9a a3       	std	Y+34, r25	; 0x22
    2a9e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa0:	89 a1       	ldd	r24, Y+33	; 0x21
    2aa2:	9a a1       	ldd	r25, Y+34	; 0x22
    2aa4:	00 97       	sbiw	r24, 0x00	; 0
    2aa6:	69 f7       	brne	.-38     	; 0x2a82 <LCD_displayCharacter+0x63a>
    2aa8:	14 c0       	rjmp	.+40     	; 0x2ad2 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aaa:	6b a1       	ldd	r22, Y+35	; 0x23
    2aac:	7c a1       	ldd	r23, Y+36	; 0x24
    2aae:	8d a1       	ldd	r24, Y+37	; 0x25
    2ab0:	9e a1       	ldd	r25, Y+38	; 0x26
    2ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	9a a3       	std	Y+34, r25	; 0x22
    2abc:	89 a3       	std	Y+33, r24	; 0x21
    2abe:	89 a1       	ldd	r24, Y+33	; 0x21
    2ac0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ac2:	9e 8f       	std	Y+30, r25	; 0x1e
    2ac4:	8d 8f       	std	Y+29, r24	; 0x1d
    2ac6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ac8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2aca:	01 97       	sbiw	r24, 0x01	; 1
    2acc:	f1 f7       	brne	.-4      	; 0x2aca <LCD_displayCharacter+0x682>
    2ace:	9e 8f       	std	Y+30, r25	; 0x1e
    2ad0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	ed 59       	subi	r30, 0x9D	; 157
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	80 81       	ld	r24, Z
    2ada:	98 2f       	mov	r25, r24
    2adc:	91 70       	andi	r25, 0x01	; 1
    2ade:	80 e0       	ldi	r24, 0x00	; 0
    2ae0:	63 e0       	ldi	r22, 0x03	; 3
    2ae2:	49 2f       	mov	r20, r25
    2ae4:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2ae8:	fe 01       	movw	r30, r28
    2aea:	ed 59       	subi	r30, 0x9D	; 157
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	80 81       	ld	r24, Z
    2af0:	88 2f       	mov	r24, r24
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	82 70       	andi	r24, 0x02	; 2
    2af6:	90 70       	andi	r25, 0x00	; 0
    2af8:	95 95       	asr	r25
    2afa:	87 95       	ror	r24
    2afc:	98 2f       	mov	r25, r24
    2afe:	80 e0       	ldi	r24, 0x00	; 0
    2b00:	64 e0       	ldi	r22, 0x04	; 4
    2b02:	49 2f       	mov	r20, r25
    2b04:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2b08:	fe 01       	movw	r30, r28
    2b0a:	ed 59       	subi	r30, 0x9D	; 157
    2b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0e:	80 81       	ld	r24, Z
    2b10:	88 2f       	mov	r24, r24
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	84 70       	andi	r24, 0x04	; 4
    2b16:	90 70       	andi	r25, 0x00	; 0
    2b18:	95 95       	asr	r25
    2b1a:	87 95       	ror	r24
    2b1c:	95 95       	asr	r25
    2b1e:	87 95       	ror	r24
    2b20:	98 2f       	mov	r25, r24
    2b22:	80 e0       	ldi	r24, 0x00	; 0
    2b24:	65 e0       	ldi	r22, 0x05	; 5
    2b26:	49 2f       	mov	r20, r25
    2b28:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2b2c:	fe 01       	movw	r30, r28
    2b2e:	ed 59       	subi	r30, 0x9D	; 157
    2b30:	ff 4f       	sbci	r31, 0xFF	; 255
    2b32:	80 81       	ld	r24, Z
    2b34:	88 2f       	mov	r24, r24
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	88 70       	andi	r24, 0x08	; 8
    2b3a:	90 70       	andi	r25, 0x00	; 0
    2b3c:	95 95       	asr	r25
    2b3e:	87 95       	ror	r24
    2b40:	95 95       	asr	r25
    2b42:	87 95       	ror	r24
    2b44:	95 95       	asr	r25
    2b46:	87 95       	ror	r24
    2b48:	98 2f       	mov	r25, r24
    2b4a:	80 e0       	ldi	r24, 0x00	; 0
    2b4c:	66 e0       	ldi	r22, 0x06	; 6
    2b4e:	49 2f       	mov	r20, r25
    2b50:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	a0 e8       	ldi	r26, 0x80	; 128
    2b5a:	bf e3       	ldi	r27, 0x3F	; 63
    2b5c:	89 8f       	std	Y+25, r24	; 0x19
    2b5e:	9a 8f       	std	Y+26, r25	; 0x1a
    2b60:	ab 8f       	std	Y+27, r26	; 0x1b
    2b62:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b64:	69 8d       	ldd	r22, Y+25	; 0x19
    2b66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	4a ef       	ldi	r20, 0xFA	; 250
    2b72:	54 e4       	ldi	r21, 0x44	; 68
    2b74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	8d 8b       	std	Y+21, r24	; 0x15
    2b7e:	9e 8b       	std	Y+22, r25	; 0x16
    2b80:	af 8b       	std	Y+23, r26	; 0x17
    2b82:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b84:	6d 89       	ldd	r22, Y+21	; 0x15
    2b86:	7e 89       	ldd	r23, Y+22	; 0x16
    2b88:	8f 89       	ldd	r24, Y+23	; 0x17
    2b8a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	40 e8       	ldi	r20, 0x80	; 128
    2b92:	5f e3       	ldi	r21, 0x3F	; 63
    2b94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b98:	88 23       	and	r24, r24
    2b9a:	2c f4       	brge	.+10     	; 0x2ba6 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	9c 8b       	std	Y+20, r25	; 0x14
    2ba2:	8b 8b       	std	Y+19, r24	; 0x13
    2ba4:	3f c0       	rjmp	.+126    	; 0x2c24 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2ba6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ba8:	7e 89       	ldd	r23, Y+22	; 0x16
    2baa:	8f 89       	ldd	r24, Y+23	; 0x17
    2bac:	98 8d       	ldd	r25, Y+24	; 0x18
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	3f ef       	ldi	r19, 0xFF	; 255
    2bb2:	4f e7       	ldi	r20, 0x7F	; 127
    2bb4:	57 e4       	ldi	r21, 0x47	; 71
    2bb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bba:	18 16       	cp	r1, r24
    2bbc:	4c f5       	brge	.+82     	; 0x2c10 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bbe:	69 8d       	ldd	r22, Y+25	; 0x19
    2bc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	40 e2       	ldi	r20, 0x20	; 32
    2bcc:	51 e4       	ldi	r21, 0x41	; 65
    2bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	bc 01       	movw	r22, r24
    2bd8:	cd 01       	movw	r24, r26
    2bda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	9c 8b       	std	Y+20, r25	; 0x14
    2be4:	8b 8b       	std	Y+19, r24	; 0x13
    2be6:	0f c0       	rjmp	.+30     	; 0x2c06 <LCD_displayCharacter+0x7be>
    2be8:	88 ec       	ldi	r24, 0xC8	; 200
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	9a 8b       	std	Y+18, r25	; 0x12
    2bee:	89 8b       	std	Y+17, r24	; 0x11
    2bf0:	89 89       	ldd	r24, Y+17	; 0x11
    2bf2:	9a 89       	ldd	r25, Y+18	; 0x12
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	f1 f7       	brne	.-4      	; 0x2bf4 <LCD_displayCharacter+0x7ac>
    2bf8:	9a 8b       	std	Y+18, r25	; 0x12
    2bfa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bfc:	8b 89       	ldd	r24, Y+19	; 0x13
    2bfe:	9c 89       	ldd	r25, Y+20	; 0x14
    2c00:	01 97       	sbiw	r24, 0x01	; 1
    2c02:	9c 8b       	std	Y+20, r25	; 0x14
    2c04:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c06:	8b 89       	ldd	r24, Y+19	; 0x13
    2c08:	9c 89       	ldd	r25, Y+20	; 0x14
    2c0a:	00 97       	sbiw	r24, 0x00	; 0
    2c0c:	69 f7       	brne	.-38     	; 0x2be8 <LCD_displayCharacter+0x7a0>
    2c0e:	14 c0       	rjmp	.+40     	; 0x2c38 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c10:	6d 89       	ldd	r22, Y+21	; 0x15
    2c12:	7e 89       	ldd	r23, Y+22	; 0x16
    2c14:	8f 89       	ldd	r24, Y+23	; 0x17
    2c16:	98 8d       	ldd	r25, Y+24	; 0x18
    2c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	9c 8b       	std	Y+20, r25	; 0x14
    2c22:	8b 8b       	std	Y+19, r24	; 0x13
    2c24:	8b 89       	ldd	r24, Y+19	; 0x13
    2c26:	9c 89       	ldd	r25, Y+20	; 0x14
    2c28:	98 8b       	std	Y+16, r25	; 0x10
    2c2a:	8f 87       	std	Y+15, r24	; 0x0f
    2c2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c2e:	98 89       	ldd	r25, Y+16	; 0x10
    2c30:	01 97       	sbiw	r24, 0x01	; 1
    2c32:	f1 f7       	brne	.-4      	; 0x2c30 <LCD_displayCharacter+0x7e8>
    2c34:	98 8b       	std	Y+16, r25	; 0x10
    2c36:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2c38:	80 e0       	ldi	r24, 0x00	; 0
    2c3a:	62 e0       	ldi	r22, 0x02	; 2
    2c3c:	40 e0       	ldi	r20, 0x00	; 0
    2c3e:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePin>
    2c42:	80 e0       	ldi	r24, 0x00	; 0
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	a0 e8       	ldi	r26, 0x80	; 128
    2c48:	bf e3       	ldi	r27, 0x3F	; 63
    2c4a:	8b 87       	std	Y+11, r24	; 0x0b
    2c4c:	9c 87       	std	Y+12, r25	; 0x0c
    2c4e:	ad 87       	std	Y+13, r26	; 0x0d
    2c50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c52:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c54:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c5a:	20 e0       	ldi	r18, 0x00	; 0
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	4a ef       	ldi	r20, 0xFA	; 250
    2c60:	54 e4       	ldi	r21, 0x44	; 68
    2c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c66:	dc 01       	movw	r26, r24
    2c68:	cb 01       	movw	r24, r22
    2c6a:	8f 83       	std	Y+7, r24	; 0x07
    2c6c:	98 87       	std	Y+8, r25	; 0x08
    2c6e:	a9 87       	std	Y+9, r26	; 0x09
    2c70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c72:	6f 81       	ldd	r22, Y+7	; 0x07
    2c74:	78 85       	ldd	r23, Y+8	; 0x08
    2c76:	89 85       	ldd	r24, Y+9	; 0x09
    2c78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	40 e8       	ldi	r20, 0x80	; 128
    2c80:	5f e3       	ldi	r21, 0x3F	; 63
    2c82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c86:	88 23       	and	r24, r24
    2c88:	2c f4       	brge	.+10     	; 0x2c94 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	9e 83       	std	Y+6, r25	; 0x06
    2c90:	8d 83       	std	Y+5, r24	; 0x05
    2c92:	3f c0       	rjmp	.+126    	; 0x2d12 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2c94:	6f 81       	ldd	r22, Y+7	; 0x07
    2c96:	78 85       	ldd	r23, Y+8	; 0x08
    2c98:	89 85       	ldd	r24, Y+9	; 0x09
    2c9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	3f ef       	ldi	r19, 0xFF	; 255
    2ca0:	4f e7       	ldi	r20, 0x7F	; 127
    2ca2:	57 e4       	ldi	r21, 0x47	; 71
    2ca4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ca8:	18 16       	cp	r1, r24
    2caa:	4c f5       	brge	.+82     	; 0x2cfe <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cac:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cae:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	40 e2       	ldi	r20, 0x20	; 32
    2cba:	51 e4       	ldi	r21, 0x41	; 65
    2cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	bc 01       	movw	r22, r24
    2cc6:	cd 01       	movw	r24, r26
    2cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	9e 83       	std	Y+6, r25	; 0x06
    2cd2:	8d 83       	std	Y+5, r24	; 0x05
    2cd4:	0f c0       	rjmp	.+30     	; 0x2cf4 <LCD_displayCharacter+0x8ac>
    2cd6:	88 ec       	ldi	r24, 0xC8	; 200
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	9c 83       	std	Y+4, r25	; 0x04
    2cdc:	8b 83       	std	Y+3, r24	; 0x03
    2cde:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce2:	01 97       	sbiw	r24, 0x01	; 1
    2ce4:	f1 f7       	brne	.-4      	; 0x2ce2 <LCD_displayCharacter+0x89a>
    2ce6:	9c 83       	std	Y+4, r25	; 0x04
    2ce8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cea:	8d 81       	ldd	r24, Y+5	; 0x05
    2cec:	9e 81       	ldd	r25, Y+6	; 0x06
    2cee:	01 97       	sbiw	r24, 0x01	; 1
    2cf0:	9e 83       	std	Y+6, r25	; 0x06
    2cf2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf8:	00 97       	sbiw	r24, 0x00	; 0
    2cfa:	69 f7       	brne	.-38     	; 0x2cd6 <LCD_displayCharacter+0x88e>
    2cfc:	14 c0       	rjmp	.+40     	; 0x2d26 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cfe:	6f 81       	ldd	r22, Y+7	; 0x07
    2d00:	78 85       	ldd	r23, Y+8	; 0x08
    2d02:	89 85       	ldd	r24, Y+9	; 0x09
    2d04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	9e 83       	std	Y+6, r25	; 0x06
    2d10:	8d 83       	std	Y+5, r24	; 0x05
    2d12:	8d 81       	ldd	r24, Y+5	; 0x05
    2d14:	9e 81       	ldd	r25, Y+6	; 0x06
    2d16:	9a 83       	std	Y+2, r25	; 0x02
    2d18:	89 83       	std	Y+1, r24	; 0x01
    2d1a:	89 81       	ldd	r24, Y+1	; 0x01
    2d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1e:	01 97       	sbiw	r24, 0x01	; 1
    2d20:	f1 f7       	brne	.-4      	; 0x2d1e <LCD_displayCharacter+0x8d6>
    2d22:	9a 83       	std	Y+2, r25	; 0x02
    2d24:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2d26:	cd 59       	subi	r28, 0x9D	; 157
    2d28:	df 4f       	sbci	r29, 0xFF	; 255
    2d2a:	0f b6       	in	r0, 0x3f	; 63
    2d2c:	f8 94       	cli
    2d2e:	de bf       	out	0x3e, r29	; 62
    2d30:	0f be       	out	0x3f, r0	; 63
    2d32:	cd bf       	out	0x3d, r28	; 61
    2d34:	cf 91       	pop	r28
    2d36:	df 91       	pop	r29
    2d38:	1f 91       	pop	r17
    2d3a:	0f 91       	pop	r16
    2d3c:	08 95       	ret

00002d3e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2d3e:	df 93       	push	r29
    2d40:	cf 93       	push	r28
    2d42:	00 d0       	rcall	.+0      	; 0x2d44 <LCD_displayString+0x6>
    2d44:	0f 92       	push	r0
    2d46:	cd b7       	in	r28, 0x3d	; 61
    2d48:	de b7       	in	r29, 0x3e	; 62
    2d4a:	9b 83       	std	Y+3, r25	; 0x03
    2d4c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d4e:	19 82       	std	Y+1, r1	; 0x01
    2d50:	0e c0       	rjmp	.+28     	; 0x2d6e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	28 2f       	mov	r18, r24
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	8a 81       	ldd	r24, Y+2	; 0x02
    2d5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d5c:	fc 01       	movw	r30, r24
    2d5e:	e2 0f       	add	r30, r18
    2d60:	f3 1f       	adc	r31, r19
    2d62:	80 81       	ld	r24, Z
    2d64:	0e 94 24 12 	call	0x2448	; 0x2448 <LCD_displayCharacter>
		i++;
    2d68:	89 81       	ldd	r24, Y+1	; 0x01
    2d6a:	8f 5f       	subi	r24, 0xFF	; 255
    2d6c:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2d6e:	89 81       	ldd	r24, Y+1	; 0x01
    2d70:	28 2f       	mov	r18, r24
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	8a 81       	ldd	r24, Y+2	; 0x02
    2d76:	9b 81       	ldd	r25, Y+3	; 0x03
    2d78:	fc 01       	movw	r30, r24
    2d7a:	e2 0f       	add	r30, r18
    2d7c:	f3 1f       	adc	r31, r19
    2d7e:	80 81       	ld	r24, Z
    2d80:	88 23       	and	r24, r24
    2d82:	39 f7       	brne	.-50     	; 0x2d52 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2d84:	0f 90       	pop	r0
    2d86:	0f 90       	pop	r0
    2d88:	0f 90       	pop	r0
    2d8a:	cf 91       	pop	r28
    2d8c:	df 91       	pop	r29
    2d8e:	08 95       	ret

00002d90 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2d90:	df 93       	push	r29
    2d92:	cf 93       	push	r28
    2d94:	00 d0       	rcall	.+0      	; 0x2d96 <LCD_moveCursor+0x6>
    2d96:	00 d0       	rcall	.+0      	; 0x2d98 <LCD_moveCursor+0x8>
    2d98:	0f 92       	push	r0
    2d9a:	cd b7       	in	r28, 0x3d	; 61
    2d9c:	de b7       	in	r29, 0x3e	; 62
    2d9e:	8a 83       	std	Y+2, r24	; 0x02
    2da0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2da2:	8a 81       	ldd	r24, Y+2	; 0x02
    2da4:	28 2f       	mov	r18, r24
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	3d 83       	std	Y+5, r19	; 0x05
    2daa:	2c 83       	std	Y+4, r18	; 0x04
    2dac:	8c 81       	ldd	r24, Y+4	; 0x04
    2dae:	9d 81       	ldd	r25, Y+5	; 0x05
    2db0:	81 30       	cpi	r24, 0x01	; 1
    2db2:	91 05       	cpc	r25, r1
    2db4:	c1 f0       	breq	.+48     	; 0x2de6 <LCD_moveCursor+0x56>
    2db6:	2c 81       	ldd	r18, Y+4	; 0x04
    2db8:	3d 81       	ldd	r19, Y+5	; 0x05
    2dba:	22 30       	cpi	r18, 0x02	; 2
    2dbc:	31 05       	cpc	r19, r1
    2dbe:	2c f4       	brge	.+10     	; 0x2dca <LCD_moveCursor+0x3a>
    2dc0:	8c 81       	ldd	r24, Y+4	; 0x04
    2dc2:	9d 81       	ldd	r25, Y+5	; 0x05
    2dc4:	00 97       	sbiw	r24, 0x00	; 0
    2dc6:	61 f0       	breq	.+24     	; 0x2de0 <LCD_moveCursor+0x50>
    2dc8:	19 c0       	rjmp	.+50     	; 0x2dfc <LCD_moveCursor+0x6c>
    2dca:	2c 81       	ldd	r18, Y+4	; 0x04
    2dcc:	3d 81       	ldd	r19, Y+5	; 0x05
    2dce:	22 30       	cpi	r18, 0x02	; 2
    2dd0:	31 05       	cpc	r19, r1
    2dd2:	69 f0       	breq	.+26     	; 0x2dee <LCD_moveCursor+0x5e>
    2dd4:	8c 81       	ldd	r24, Y+4	; 0x04
    2dd6:	9d 81       	ldd	r25, Y+5	; 0x05
    2dd8:	83 30       	cpi	r24, 0x03	; 3
    2dda:	91 05       	cpc	r25, r1
    2ddc:	61 f0       	breq	.+24     	; 0x2df6 <LCD_moveCursor+0x66>
    2dde:	0e c0       	rjmp	.+28     	; 0x2dfc <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2de0:	8b 81       	ldd	r24, Y+3	; 0x03
    2de2:	89 83       	std	Y+1, r24	; 0x01
    2de4:	0b c0       	rjmp	.+22     	; 0x2dfc <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2de6:	8b 81       	ldd	r24, Y+3	; 0x03
    2de8:	80 5c       	subi	r24, 0xC0	; 192
    2dea:	89 83       	std	Y+1, r24	; 0x01
    2dec:	07 c0       	rjmp	.+14     	; 0x2dfc <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2dee:	8b 81       	ldd	r24, Y+3	; 0x03
    2df0:	80 5f       	subi	r24, 0xF0	; 240
    2df2:	89 83       	std	Y+1, r24	; 0x01
    2df4:	03 c0       	rjmp	.+6      	; 0x2dfc <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2df6:	8b 81       	ldd	r24, Y+3	; 0x03
    2df8:	80 5b       	subi	r24, 0xB0	; 176
    2dfa:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2dfc:	89 81       	ldd	r24, Y+1	; 0x01
    2dfe:	80 68       	ori	r24, 0x80	; 128
    2e00:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <LCD_sendCommand>
}
    2e04:	0f 90       	pop	r0
    2e06:	0f 90       	pop	r0
    2e08:	0f 90       	pop	r0
    2e0a:	0f 90       	pop	r0
    2e0c:	0f 90       	pop	r0
    2e0e:	cf 91       	pop	r28
    2e10:	df 91       	pop	r29
    2e12:	08 95       	ret

00002e14 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2e14:	df 93       	push	r29
    2e16:	cf 93       	push	r28
    2e18:	00 d0       	rcall	.+0      	; 0x2e1a <LCD_displayStringRowColumn+0x6>
    2e1a:	00 d0       	rcall	.+0      	; 0x2e1c <LCD_displayStringRowColumn+0x8>
    2e1c:	cd b7       	in	r28, 0x3d	; 61
    2e1e:	de b7       	in	r29, 0x3e	; 62
    2e20:	89 83       	std	Y+1, r24	; 0x01
    2e22:	6a 83       	std	Y+2, r22	; 0x02
    2e24:	5c 83       	std	Y+4, r21	; 0x04
    2e26:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2e28:	89 81       	ldd	r24, Y+1	; 0x01
    2e2a:	6a 81       	ldd	r22, Y+2	; 0x02
    2e2c:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2e30:	8b 81       	ldd	r24, Y+3	; 0x03
    2e32:	9c 81       	ldd	r25, Y+4	; 0x04
    2e34:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <LCD_displayString>
}
    2e38:	0f 90       	pop	r0
    2e3a:	0f 90       	pop	r0
    2e3c:	0f 90       	pop	r0
    2e3e:	0f 90       	pop	r0
    2e40:	cf 91       	pop	r28
    2e42:	df 91       	pop	r29
    2e44:	08 95       	ret

00002e46 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2e46:	df 93       	push	r29
    2e48:	cf 93       	push	r28
    2e4a:	cd b7       	in	r28, 0x3d	; 61
    2e4c:	de b7       	in	r29, 0x3e	; 62
    2e4e:	62 97       	sbiw	r28, 0x12	; 18
    2e50:	0f b6       	in	r0, 0x3f	; 63
    2e52:	f8 94       	cli
    2e54:	de bf       	out	0x3e, r29	; 62
    2e56:	0f be       	out	0x3f, r0	; 63
    2e58:	cd bf       	out	0x3d, r28	; 61
    2e5a:	9a 8b       	std	Y+18, r25	; 0x12
    2e5c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2e5e:	89 89       	ldd	r24, Y+17	; 0x11
    2e60:	9a 89       	ldd	r25, Y+18	; 0x12
    2e62:	9e 01       	movw	r18, r28
    2e64:	2f 5f       	subi	r18, 0xFF	; 255
    2e66:	3f 4f       	sbci	r19, 0xFF	; 255
    2e68:	b9 01       	movw	r22, r18
    2e6a:	4a e0       	ldi	r20, 0x0A	; 10
    2e6c:	50 e0       	ldi	r21, 0x00	; 0
    2e6e:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <itoa>
   LCD_displayString(buff); /* Display the string */
    2e72:	ce 01       	movw	r24, r28
    2e74:	01 96       	adiw	r24, 0x01	; 1
    2e76:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <LCD_displayString>
}
    2e7a:	62 96       	adiw	r28, 0x12	; 18
    2e7c:	0f b6       	in	r0, 0x3f	; 63
    2e7e:	f8 94       	cli
    2e80:	de bf       	out	0x3e, r29	; 62
    2e82:	0f be       	out	0x3f, r0	; 63
    2e84:	cd bf       	out	0x3d, r28	; 61
    2e86:	cf 91       	pop	r28
    2e88:	df 91       	pop	r29
    2e8a:	08 95       	ret

00002e8c <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2e8c:	df 93       	push	r29
    2e8e:	cf 93       	push	r28
    2e90:	cd b7       	in	r28, 0x3d	; 61
    2e92:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <LCD_sendCommand>
}
    2e9a:	cf 91       	pop	r28
    2e9c:	df 91       	pop	r29
    2e9e:	08 95       	ret

00002ea0 <PIR_init>:

/*
 * Function: PIR_init
 * Description: Initializes the PIR sensor pin direction.
 */
void PIR_init(void) {
    2ea0:	df 93       	push	r29
    2ea2:	cf 93       	push	r28
    2ea4:	cd b7       	in	r28, 0x3d	; 61
    2ea6:	de b7       	in	r29, 0x3e	; 62
    /* Set the flame sensor pin direction to input */
    GPIO_setupPinDirection(PIR_SENSOR_PORT, PIR_SENSOR_PIN, PIN_INPUT);
    2ea8:	82 e0       	ldi	r24, 0x02	; 2
    2eaa:	62 e0       	ldi	r22, 0x02	; 2
    2eac:	40 e0       	ldi	r20, 0x00	; 0
    2eae:	0e 94 1f 08 	call	0x103e	; 0x103e <GPIO_setupPinDirection>
}
    2eb2:	cf 91       	pop	r28
    2eb4:	df 91       	pop	r29
    2eb6:	08 95       	ret

00002eb8 <PIR_getValue>:
/*
 * Function: PIR_getValue
 * Description: Reads the value from the PIR sensor and returns it.
 * Returns: 1 if someone is detected, 0 otherwise.
 */
uint8 PIR_getValue(void) {
    2eb8:	df 93       	push	r29
    2eba:	cf 93       	push	r28
    2ebc:	cd b7       	in	r28, 0x3d	; 61
    2ebe:	de b7       	in	r29, 0x3e	; 62
    /* Read the value from the PIR sensor pin */
    /* Return 1 if the sensor detects someone, otherwise return 0 */
    return GPIO_readPin(PIR_SENSOR_PORT, PIR_SENSOR_PIN);
    2ec0:	82 e0       	ldi	r24, 0x02	; 2
    2ec2:	62 e0       	ldi	r22, 0x02	; 2
    2ec4:	0e 94 f5 09 	call	0x13ea	; 0x13ea <GPIO_readPin>
}
    2ec8:	cf 91       	pop	r28
    2eca:	df 91       	pop	r29
    2ecc:	08 95       	ret

00002ece <__vector_11>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect) {
    2ece:	1f 92       	push	r1
    2ed0:	0f 92       	push	r0
    2ed2:	0f b6       	in	r0, 0x3f	; 63
    2ed4:	0f 92       	push	r0
    2ed6:	11 24       	eor	r1, r1
    2ed8:	2f 93       	push	r18
    2eda:	3f 93       	push	r19
    2edc:	4f 93       	push	r20
    2ede:	5f 93       	push	r21
    2ee0:	6f 93       	push	r22
    2ee2:	7f 93       	push	r23
    2ee4:	8f 93       	push	r24
    2ee6:	9f 93       	push	r25
    2ee8:	af 93       	push	r26
    2eea:	bf 93       	push	r27
    2eec:	ef 93       	push	r30
    2eee:	ff 93       	push	r31
    2ef0:	df 93       	push	r29
    2ef2:	cf 93       	push	r28
    2ef4:	cd b7       	in	r28, 0x3d	; 61
    2ef6:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr[0] != NULL_PTR) {
    2ef8:	80 91 7b 00 	lds	r24, 0x007B
    2efc:	90 91 7c 00 	lds	r25, 0x007C
    2f00:	00 97       	sbiw	r24, 0x00	; 0
    2f02:	29 f0       	breq	.+10     	; 0x2f0e <__vector_11+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr[0])();
    2f04:	e0 91 7b 00 	lds	r30, 0x007B
    2f08:	f0 91 7c 00 	lds	r31, 0x007C
    2f0c:	09 95       	icall
	}
}
    2f0e:	cf 91       	pop	r28
    2f10:	df 91       	pop	r29
    2f12:	ff 91       	pop	r31
    2f14:	ef 91       	pop	r30
    2f16:	bf 91       	pop	r27
    2f18:	af 91       	pop	r26
    2f1a:	9f 91       	pop	r25
    2f1c:	8f 91       	pop	r24
    2f1e:	7f 91       	pop	r23
    2f20:	6f 91       	pop	r22
    2f22:	5f 91       	pop	r21
    2f24:	4f 91       	pop	r20
    2f26:	3f 91       	pop	r19
    2f28:	2f 91       	pop	r18
    2f2a:	0f 90       	pop	r0
    2f2c:	0f be       	out	0x3f, r0	; 63
    2f2e:	0f 90       	pop	r0
    2f30:	1f 90       	pop	r1
    2f32:	18 95       	reti

00002f34 <__vector_10>:

ISR(TIMER0_COMP_vect) {
    2f34:	1f 92       	push	r1
    2f36:	0f 92       	push	r0
    2f38:	0f b6       	in	r0, 0x3f	; 63
    2f3a:	0f 92       	push	r0
    2f3c:	11 24       	eor	r1, r1
    2f3e:	2f 93       	push	r18
    2f40:	3f 93       	push	r19
    2f42:	4f 93       	push	r20
    2f44:	5f 93       	push	r21
    2f46:	6f 93       	push	r22
    2f48:	7f 93       	push	r23
    2f4a:	8f 93       	push	r24
    2f4c:	9f 93       	push	r25
    2f4e:	af 93       	push	r26
    2f50:	bf 93       	push	r27
    2f52:	ef 93       	push	r30
    2f54:	ff 93       	push	r31
    2f56:	df 93       	push	r29
    2f58:	cf 93       	push	r28
    2f5a:	cd b7       	in	r28, 0x3d	; 61
    2f5c:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr[0] != NULL_PTR) {
    2f5e:	80 91 7b 00 	lds	r24, 0x007B
    2f62:	90 91 7c 00 	lds	r25, 0x007C
    2f66:	00 97       	sbiw	r24, 0x00	; 0
    2f68:	29 f0       	breq	.+10     	; 0x2f74 <__vector_10+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr[0])();
    2f6a:	e0 91 7b 00 	lds	r30, 0x007B
    2f6e:	f0 91 7c 00 	lds	r31, 0x007C
    2f72:	09 95       	icall
	}
}
    2f74:	cf 91       	pop	r28
    2f76:	df 91       	pop	r29
    2f78:	ff 91       	pop	r31
    2f7a:	ef 91       	pop	r30
    2f7c:	bf 91       	pop	r27
    2f7e:	af 91       	pop	r26
    2f80:	9f 91       	pop	r25
    2f82:	8f 91       	pop	r24
    2f84:	7f 91       	pop	r23
    2f86:	6f 91       	pop	r22
    2f88:	5f 91       	pop	r21
    2f8a:	4f 91       	pop	r20
    2f8c:	3f 91       	pop	r19
    2f8e:	2f 91       	pop	r18
    2f90:	0f 90       	pop	r0
    2f92:	0f be       	out	0x3f, r0	; 63
    2f94:	0f 90       	pop	r0
    2f96:	1f 90       	pop	r1
    2f98:	18 95       	reti

00002f9a <__vector_9>:

ISR(TIMER1_OVF_vect) {
    2f9a:	1f 92       	push	r1
    2f9c:	0f 92       	push	r0
    2f9e:	0f b6       	in	r0, 0x3f	; 63
    2fa0:	0f 92       	push	r0
    2fa2:	11 24       	eor	r1, r1
    2fa4:	2f 93       	push	r18
    2fa6:	3f 93       	push	r19
    2fa8:	4f 93       	push	r20
    2faa:	5f 93       	push	r21
    2fac:	6f 93       	push	r22
    2fae:	7f 93       	push	r23
    2fb0:	8f 93       	push	r24
    2fb2:	9f 93       	push	r25
    2fb4:	af 93       	push	r26
    2fb6:	bf 93       	push	r27
    2fb8:	ef 93       	push	r30
    2fba:	ff 93       	push	r31
    2fbc:	df 93       	push	r29
    2fbe:	cf 93       	push	r28
    2fc0:	cd b7       	in	r28, 0x3d	; 61
    2fc2:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr[1] != NULL_PTR) {
    2fc4:	80 91 7d 00 	lds	r24, 0x007D
    2fc8:	90 91 7e 00 	lds	r25, 0x007E
    2fcc:	00 97       	sbiw	r24, 0x00	; 0
    2fce:	29 f0       	breq	.+10     	; 0x2fda <__vector_9+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr[1])();
    2fd0:	e0 91 7d 00 	lds	r30, 0x007D
    2fd4:	f0 91 7e 00 	lds	r31, 0x007E
    2fd8:	09 95       	icall
	}
}
    2fda:	cf 91       	pop	r28
    2fdc:	df 91       	pop	r29
    2fde:	ff 91       	pop	r31
    2fe0:	ef 91       	pop	r30
    2fe2:	bf 91       	pop	r27
    2fe4:	af 91       	pop	r26
    2fe6:	9f 91       	pop	r25
    2fe8:	8f 91       	pop	r24
    2fea:	7f 91       	pop	r23
    2fec:	6f 91       	pop	r22
    2fee:	5f 91       	pop	r21
    2ff0:	4f 91       	pop	r20
    2ff2:	3f 91       	pop	r19
    2ff4:	2f 91       	pop	r18
    2ff6:	0f 90       	pop	r0
    2ff8:	0f be       	out	0x3f, r0	; 63
    2ffa:	0f 90       	pop	r0
    2ffc:	1f 90       	pop	r1
    2ffe:	18 95       	reti

00003000 <__vector_7>:

ISR(TIMER1_COMPA_vect) {
    3000:	1f 92       	push	r1
    3002:	0f 92       	push	r0
    3004:	0f b6       	in	r0, 0x3f	; 63
    3006:	0f 92       	push	r0
    3008:	11 24       	eor	r1, r1
    300a:	2f 93       	push	r18
    300c:	3f 93       	push	r19
    300e:	4f 93       	push	r20
    3010:	5f 93       	push	r21
    3012:	6f 93       	push	r22
    3014:	7f 93       	push	r23
    3016:	8f 93       	push	r24
    3018:	9f 93       	push	r25
    301a:	af 93       	push	r26
    301c:	bf 93       	push	r27
    301e:	ef 93       	push	r30
    3020:	ff 93       	push	r31
    3022:	df 93       	push	r29
    3024:	cf 93       	push	r28
    3026:	cd b7       	in	r28, 0x3d	; 61
    3028:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr[1] != NULL_PTR) {
    302a:	80 91 7d 00 	lds	r24, 0x007D
    302e:	90 91 7e 00 	lds	r25, 0x007E
    3032:	00 97       	sbiw	r24, 0x00	; 0
    3034:	29 f0       	breq	.+10     	; 0x3040 <__vector_7+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr[1])();
    3036:	e0 91 7d 00 	lds	r30, 0x007D
    303a:	f0 91 7e 00 	lds	r31, 0x007E
    303e:	09 95       	icall
	}
}
    3040:	cf 91       	pop	r28
    3042:	df 91       	pop	r29
    3044:	ff 91       	pop	r31
    3046:	ef 91       	pop	r30
    3048:	bf 91       	pop	r27
    304a:	af 91       	pop	r26
    304c:	9f 91       	pop	r25
    304e:	8f 91       	pop	r24
    3050:	7f 91       	pop	r23
    3052:	6f 91       	pop	r22
    3054:	5f 91       	pop	r21
    3056:	4f 91       	pop	r20
    3058:	3f 91       	pop	r19
    305a:	2f 91       	pop	r18
    305c:	0f 90       	pop	r0
    305e:	0f be       	out	0x3f, r0	; 63
    3060:	0f 90       	pop	r0
    3062:	1f 90       	pop	r1
    3064:	18 95       	reti

00003066 <__vector_5>:

ISR(TIMER2_OVF_vect) {
    3066:	1f 92       	push	r1
    3068:	0f 92       	push	r0
    306a:	0f b6       	in	r0, 0x3f	; 63
    306c:	0f 92       	push	r0
    306e:	11 24       	eor	r1, r1
    3070:	2f 93       	push	r18
    3072:	3f 93       	push	r19
    3074:	4f 93       	push	r20
    3076:	5f 93       	push	r21
    3078:	6f 93       	push	r22
    307a:	7f 93       	push	r23
    307c:	8f 93       	push	r24
    307e:	9f 93       	push	r25
    3080:	af 93       	push	r26
    3082:	bf 93       	push	r27
    3084:	ef 93       	push	r30
    3086:	ff 93       	push	r31
    3088:	df 93       	push	r29
    308a:	cf 93       	push	r28
    308c:	cd b7       	in	r28, 0x3d	; 61
    308e:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr[2] != NULL_PTR) {
    3090:	80 91 7f 00 	lds	r24, 0x007F
    3094:	90 91 80 00 	lds	r25, 0x0080
    3098:	00 97       	sbiw	r24, 0x00	; 0
    309a:	29 f0       	breq	.+10     	; 0x30a6 <__vector_5+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr[2])();
    309c:	e0 91 7f 00 	lds	r30, 0x007F
    30a0:	f0 91 80 00 	lds	r31, 0x0080
    30a4:	09 95       	icall
	}
}
    30a6:	cf 91       	pop	r28
    30a8:	df 91       	pop	r29
    30aa:	ff 91       	pop	r31
    30ac:	ef 91       	pop	r30
    30ae:	bf 91       	pop	r27
    30b0:	af 91       	pop	r26
    30b2:	9f 91       	pop	r25
    30b4:	8f 91       	pop	r24
    30b6:	7f 91       	pop	r23
    30b8:	6f 91       	pop	r22
    30ba:	5f 91       	pop	r21
    30bc:	4f 91       	pop	r20
    30be:	3f 91       	pop	r19
    30c0:	2f 91       	pop	r18
    30c2:	0f 90       	pop	r0
    30c4:	0f be       	out	0x3f, r0	; 63
    30c6:	0f 90       	pop	r0
    30c8:	1f 90       	pop	r1
    30ca:	18 95       	reti

000030cc <__vector_4>:

ISR(TIMER2_COMP_vect) {
    30cc:	1f 92       	push	r1
    30ce:	0f 92       	push	r0
    30d0:	0f b6       	in	r0, 0x3f	; 63
    30d2:	0f 92       	push	r0
    30d4:	11 24       	eor	r1, r1
    30d6:	2f 93       	push	r18
    30d8:	3f 93       	push	r19
    30da:	4f 93       	push	r20
    30dc:	5f 93       	push	r21
    30de:	6f 93       	push	r22
    30e0:	7f 93       	push	r23
    30e2:	8f 93       	push	r24
    30e4:	9f 93       	push	r25
    30e6:	af 93       	push	r26
    30e8:	bf 93       	push	r27
    30ea:	ef 93       	push	r30
    30ec:	ff 93       	push	r31
    30ee:	df 93       	push	r29
    30f0:	cf 93       	push	r28
    30f2:	cd b7       	in	r28, 0x3d	; 61
    30f4:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr[2] != NULL_PTR) {
    30f6:	80 91 7f 00 	lds	r24, 0x007F
    30fa:	90 91 80 00 	lds	r25, 0x0080
    30fe:	00 97       	sbiw	r24, 0x00	; 0
    3100:	29 f0       	breq	.+10     	; 0x310c <__vector_4+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr[2])();
    3102:	e0 91 7f 00 	lds	r30, 0x007F
    3106:	f0 91 80 00 	lds	r31, 0x0080
    310a:	09 95       	icall
	}
}
    310c:	cf 91       	pop	r28
    310e:	df 91       	pop	r29
    3110:	ff 91       	pop	r31
    3112:	ef 91       	pop	r30
    3114:	bf 91       	pop	r27
    3116:	af 91       	pop	r26
    3118:	9f 91       	pop	r25
    311a:	8f 91       	pop	r24
    311c:	7f 91       	pop	r23
    311e:	6f 91       	pop	r22
    3120:	5f 91       	pop	r21
    3122:	4f 91       	pop	r20
    3124:	3f 91       	pop	r19
    3126:	2f 91       	pop	r18
    3128:	0f 90       	pop	r0
    312a:	0f be       	out	0x3f, r0	; 63
    312c:	0f 90       	pop	r0
    312e:	1f 90       	pop	r1
    3130:	18 95       	reti

00003132 <Timer_init>:

/*******************************************************************************
 *                            Function Definitions                             *
 *******************************************************************************/

void Timer_init(const Timer_ConfigType *Config_Ptr) {
    3132:	df 93       	push	r29
    3134:	cf 93       	push	r28
    3136:	00 d0       	rcall	.+0      	; 0x3138 <Timer_init+0x6>
    3138:	00 d0       	rcall	.+0      	; 0x313a <Timer_init+0x8>
    313a:	cd b7       	in	r28, 0x3d	; 61
    313c:	de b7       	in	r29, 0x3e	; 62
    313e:	9a 83       	std	Y+2, r25	; 0x02
    3140:	89 83       	std	Y+1, r24	; 0x01
	switch (Config_Ptr->timer_ID) {
    3142:	e9 81       	ldd	r30, Y+1	; 0x01
    3144:	fa 81       	ldd	r31, Y+2	; 0x02
    3146:	84 81       	ldd	r24, Z+4	; 0x04
    3148:	28 2f       	mov	r18, r24
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	3c 83       	std	Y+4, r19	; 0x04
    314e:	2b 83       	std	Y+3, r18	; 0x03
    3150:	8b 81       	ldd	r24, Y+3	; 0x03
    3152:	9c 81       	ldd	r25, Y+4	; 0x04
    3154:	81 30       	cpi	r24, 0x01	; 1
    3156:	91 05       	cpc	r25, r1
    3158:	71 f0       	breq	.+28     	; 0x3176 <Timer_init+0x44>
    315a:	2b 81       	ldd	r18, Y+3	; 0x03
    315c:	3c 81       	ldd	r19, Y+4	; 0x04
    315e:	22 30       	cpi	r18, 0x02	; 2
    3160:	31 05       	cpc	r19, r1
    3162:	71 f0       	breq	.+28     	; 0x3180 <Timer_init+0x4e>
    3164:	8b 81       	ldd	r24, Y+3	; 0x03
    3166:	9c 81       	ldd	r25, Y+4	; 0x04
    3168:	00 97       	sbiw	r24, 0x00	; 0
    316a:	71 f4       	brne	.+28     	; 0x3188 <Timer_init+0x56>
	case TIMER0:
		Timer0_init(Config_Ptr);
    316c:	89 81       	ldd	r24, Y+1	; 0x01
    316e:	9a 81       	ldd	r25, Y+2	; 0x02
    3170:	0e 94 0e 19 	call	0x321c	; 0x321c <Timer0_init>
    3174:	09 c0       	rjmp	.+18     	; 0x3188 <Timer_init+0x56>
		break;
	case TIMER1:
		Timer1_init(Config_Ptr);
    3176:	89 81       	ldd	r24, Y+1	; 0x01
    3178:	9a 81       	ldd	r25, Y+2	; 0x02
    317a:	0e 94 c9 19 	call	0x3392	; 0x3392 <Timer1_init>
    317e:	04 c0       	rjmp	.+8      	; 0x3188 <Timer_init+0x56>
		break;
	case TIMER2:
		Timer2_init(Config_Ptr);
    3180:	89 81       	ldd	r24, Y+1	; 0x01
    3182:	9a 81       	ldd	r25, Y+2	; 0x02
    3184:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <Timer2_init>
		break;
	}
}
    3188:	0f 90       	pop	r0
    318a:	0f 90       	pop	r0
    318c:	0f 90       	pop	r0
    318e:	0f 90       	pop	r0
    3190:	cf 91       	pop	r28
    3192:	df 91       	pop	r29
    3194:	08 95       	ret

00003196 <Timer_deInit>:

void Timer_deInit(Timer_ID_Type timer_type) {
    3196:	df 93       	push	r29
    3198:	cf 93       	push	r28
    319a:	00 d0       	rcall	.+0      	; 0x319c <Timer_deInit+0x6>
    319c:	0f 92       	push	r0
    319e:	cd b7       	in	r28, 0x3d	; 61
    31a0:	de b7       	in	r29, 0x3e	; 62
    31a2:	89 83       	std	Y+1, r24	; 0x01
	switch (timer_type) {
    31a4:	89 81       	ldd	r24, Y+1	; 0x01
    31a6:	28 2f       	mov	r18, r24
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	3b 83       	std	Y+3, r19	; 0x03
    31ac:	2a 83       	std	Y+2, r18	; 0x02
    31ae:	8a 81       	ldd	r24, Y+2	; 0x02
    31b0:	9b 81       	ldd	r25, Y+3	; 0x03
    31b2:	81 30       	cpi	r24, 0x01	; 1
    31b4:	91 05       	cpc	r25, r1
    31b6:	61 f0       	breq	.+24     	; 0x31d0 <Timer_deInit+0x3a>
    31b8:	2a 81       	ldd	r18, Y+2	; 0x02
    31ba:	3b 81       	ldd	r19, Y+3	; 0x03
    31bc:	22 30       	cpi	r18, 0x02	; 2
    31be:	31 05       	cpc	r19, r1
    31c0:	51 f0       	breq	.+20     	; 0x31d6 <Timer_deInit+0x40>
    31c2:	8a 81       	ldd	r24, Y+2	; 0x02
    31c4:	9b 81       	ldd	r25, Y+3	; 0x03
    31c6:	00 97       	sbiw	r24, 0x00	; 0
    31c8:	41 f4       	brne	.+16     	; 0x31da <Timer_deInit+0x44>
	case TIMER0:
		Timer0_deInit();
    31ca:	0e 94 a2 19 	call	0x3344	; 0x3344 <Timer0_deInit>
    31ce:	05 c0       	rjmp	.+10     	; 0x31da <Timer_deInit+0x44>
		break;
	case TIMER1:
		Timer1_deInit();
    31d0:	0e 94 45 1a 	call	0x348a	; 0x348a <Timer1_deInit>
    31d4:	02 c0       	rjmp	.+4      	; 0x31da <Timer_deInit+0x44>
		break;
	case TIMER2:
		Timer2_deInit();
    31d6:	0e 94 1a 1b 	call	0x3634	; 0x3634 <Timer2_deInit>
		break;
	}
}
    31da:	0f 90       	pop	r0
    31dc:	0f 90       	pop	r0
    31de:	0f 90       	pop	r0
    31e0:	cf 91       	pop	r28
    31e2:	df 91       	pop	r29
    31e4:	08 95       	ret

000031e6 <Timer_setCallBack>:

void Timer_setCallBack(void (*a_ptr)(void), Timer_ID_Type a_timer_ID) {
    31e6:	df 93       	push	r29
    31e8:	cf 93       	push	r28
    31ea:	00 d0       	rcall	.+0      	; 0x31ec <Timer_setCallBack+0x6>
    31ec:	0f 92       	push	r0
    31ee:	cd b7       	in	r28, 0x3d	; 61
    31f0:	de b7       	in	r29, 0x3e	; 62
    31f2:	9a 83       	std	Y+2, r25	; 0x02
    31f4:	89 83       	std	Y+1, r24	; 0x01
    31f6:	6b 83       	std	Y+3, r22	; 0x03
	g_callBackPtr[a_timer_ID] = a_ptr;
    31f8:	8b 81       	ldd	r24, Y+3	; 0x03
    31fa:	88 2f       	mov	r24, r24
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	29 81       	ldd	r18, Y+1	; 0x01
    3200:	3a 81       	ldd	r19, Y+2	; 0x02
    3202:	88 0f       	add	r24, r24
    3204:	99 1f       	adc	r25, r25
    3206:	fc 01       	movw	r30, r24
    3208:	e5 58       	subi	r30, 0x85	; 133
    320a:	ff 4f       	sbci	r31, 0xFF	; 255
    320c:	31 83       	std	Z+1, r19	; 0x01
    320e:	20 83       	st	Z, r18
}
    3210:	0f 90       	pop	r0
    3212:	0f 90       	pop	r0
    3214:	0f 90       	pop	r0
    3216:	cf 91       	pop	r28
    3218:	df 91       	pop	r29
    321a:	08 95       	ret

0000321c <Timer0_init>:

/*******************************************************************************
 *                          Timer0 Functions                                   *
 *******************************************************************************/

static void Timer0_init(const Timer_ConfigType *Config_Ptr) {
    321c:	df 93       	push	r29
    321e:	cf 93       	push	r28
    3220:	00 d0       	rcall	.+0      	; 0x3222 <Timer0_init+0x6>
    3222:	00 d0       	rcall	.+0      	; 0x3224 <Timer0_init+0x8>
    3224:	cd b7       	in	r28, 0x3d	; 61
    3226:	de b7       	in	r29, 0x3e	; 62
    3228:	9a 83       	std	Y+2, r25	; 0x02
    322a:	89 83       	std	Y+1, r24	; 0x01
	/* Set the initial value */
	TCNT0_REG.Byte = Config_Ptr->timer_InitialValue;
    322c:	a2 e5       	ldi	r26, 0x52	; 82
    322e:	b0 e0       	ldi	r27, 0x00	; 0
    3230:	e9 81       	ldd	r30, Y+1	; 0x01
    3232:	fa 81       	ldd	r31, Y+2	; 0x02
    3234:	80 81       	ld	r24, Z
    3236:	91 81       	ldd	r25, Z+1	; 0x01
    3238:	8c 93       	st	X, r24

	/* Set the prescaler based on the provided timer_clock */
	switch (Config_Ptr->timer_clock) {
    323a:	e9 81       	ldd	r30, Y+1	; 0x01
    323c:	fa 81       	ldd	r31, Y+2	; 0x02
    323e:	85 81       	ldd	r24, Z+5	; 0x05
    3240:	28 2f       	mov	r18, r24
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	3c 83       	std	Y+4, r19	; 0x04
    3246:	2b 83       	std	Y+3, r18	; 0x03
    3248:	8b 81       	ldd	r24, Y+3	; 0x03
    324a:	9c 81       	ldd	r25, Y+4	; 0x04
    324c:	82 30       	cpi	r24, 0x02	; 2
    324e:	91 05       	cpc	r25, r1
    3250:	a9 f1       	breq	.+106    	; 0x32bc <Timer0_init+0xa0>
    3252:	2b 81       	ldd	r18, Y+3	; 0x03
    3254:	3c 81       	ldd	r19, Y+4	; 0x04
    3256:	23 30       	cpi	r18, 0x03	; 3
    3258:	31 05       	cpc	r19, r1
    325a:	54 f4       	brge	.+20     	; 0x3270 <Timer0_init+0x54>
    325c:	8b 81       	ldd	r24, Y+3	; 0x03
    325e:	9c 81       	ldd	r25, Y+4	; 0x04
    3260:	00 97       	sbiw	r24, 0x00	; 0
    3262:	b1 f0       	breq	.+44     	; 0x3290 <Timer0_init+0x74>
    3264:	2b 81       	ldd	r18, Y+3	; 0x03
    3266:	3c 81       	ldd	r19, Y+4	; 0x04
    3268:	21 30       	cpi	r18, 0x01	; 1
    326a:	31 05       	cpc	r19, r1
    326c:	09 f1       	breq	.+66     	; 0x32b0 <Timer0_init+0x94>
    326e:	47 c0       	rjmp	.+142    	; 0x32fe <Timer0_init+0xe2>
    3270:	8b 81       	ldd	r24, Y+3	; 0x03
    3272:	9c 81       	ldd	r25, Y+4	; 0x04
    3274:	84 30       	cpi	r24, 0x04	; 4
    3276:	91 05       	cpc	r25, r1
    3278:	91 f1       	breq	.+100    	; 0x32de <Timer0_init+0xc2>
    327a:	2b 81       	ldd	r18, Y+3	; 0x03
    327c:	3c 81       	ldd	r19, Y+4	; 0x04
    327e:	24 30       	cpi	r18, 0x04	; 4
    3280:	31 05       	cpc	r19, r1
    3282:	14 f1       	brlt	.+68     	; 0x32c8 <Timer0_init+0xac>
    3284:	8b 81       	ldd	r24, Y+3	; 0x03
    3286:	9c 81       	ldd	r25, Y+4	; 0x04
    3288:	85 30       	cpi	r24, 0x05	; 5
    328a:	91 05       	cpc	r25, r1
    328c:	71 f1       	breq	.+92     	; 0x32ea <Timer0_init+0xce>
    328e:	37 c0       	rjmp	.+110    	; 0x32fe <Timer0_init+0xe2>
	case NO_CLOCK:
		/* Stop the timer */
		TCCR0_REG.Bits.CS00_Bit = 0;
    3290:	e3 e5       	ldi	r30, 0x53	; 83
    3292:	f0 e0       	ldi	r31, 0x00	; 0
    3294:	80 81       	ld	r24, Z
    3296:	8e 7f       	andi	r24, 0xFE	; 254
    3298:	80 83       	st	Z, r24
		TCCR0_REG.Bits.CS01_Bit = 0;
    329a:	e3 e5       	ldi	r30, 0x53	; 83
    329c:	f0 e0       	ldi	r31, 0x00	; 0
    329e:	80 81       	ld	r24, Z
    32a0:	8d 7f       	andi	r24, 0xFD	; 253
    32a2:	80 83       	st	Z, r24
		TCCR0_REG.Bits.CS02_Bit = 0;
    32a4:	e3 e5       	ldi	r30, 0x53	; 83
    32a6:	f0 e0       	ldi	r31, 0x00	; 0
    32a8:	80 81       	ld	r24, Z
    32aa:	8b 7f       	andi	r24, 0xFB	; 251
    32ac:	80 83       	st	Z, r24
    32ae:	27 c0       	rjmp	.+78     	; 0x32fe <Timer0_init+0xe2>
		break;
	case PRESCALER_1:
		TCCR0_REG.Bits.CS00_Bit = 1;
    32b0:	e3 e5       	ldi	r30, 0x53	; 83
    32b2:	f0 e0       	ldi	r31, 0x00	; 0
    32b4:	80 81       	ld	r24, Z
    32b6:	81 60       	ori	r24, 0x01	; 1
    32b8:	80 83       	st	Z, r24
    32ba:	21 c0       	rjmp	.+66     	; 0x32fe <Timer0_init+0xe2>
		break;
	case PRESCALER_8:
		TCCR0_REG.Bits.CS01_Bit = 1;
    32bc:	e3 e5       	ldi	r30, 0x53	; 83
    32be:	f0 e0       	ldi	r31, 0x00	; 0
    32c0:	80 81       	ld	r24, Z
    32c2:	82 60       	ori	r24, 0x02	; 2
    32c4:	80 83       	st	Z, r24
    32c6:	1b c0       	rjmp	.+54     	; 0x32fe <Timer0_init+0xe2>
		break;
	case PRESCALER_64:
		TCCR0_REG.Bits.CS00_Bit = 1;
    32c8:	e3 e5       	ldi	r30, 0x53	; 83
    32ca:	f0 e0       	ldi	r31, 0x00	; 0
    32cc:	80 81       	ld	r24, Z
    32ce:	81 60       	ori	r24, 0x01	; 1
    32d0:	80 83       	st	Z, r24
		TCCR0_REG.Bits.CS01_Bit = 1;
    32d2:	e3 e5       	ldi	r30, 0x53	; 83
    32d4:	f0 e0       	ldi	r31, 0x00	; 0
    32d6:	80 81       	ld	r24, Z
    32d8:	82 60       	ori	r24, 0x02	; 2
    32da:	80 83       	st	Z, r24
    32dc:	10 c0       	rjmp	.+32     	; 0x32fe <Timer0_init+0xe2>
		break;
	case PRESCALER_256:
		TCCR0_REG.Bits.CS02_Bit = 1;
    32de:	e3 e5       	ldi	r30, 0x53	; 83
    32e0:	f0 e0       	ldi	r31, 0x00	; 0
    32e2:	80 81       	ld	r24, Z
    32e4:	84 60       	ori	r24, 0x04	; 4
    32e6:	80 83       	st	Z, r24
    32e8:	0a c0       	rjmp	.+20     	; 0x32fe <Timer0_init+0xe2>
		break;
	case PRESCALER_1024:
		TCCR0_REG.Bits.CS02_Bit = 1;
    32ea:	e3 e5       	ldi	r30, 0x53	; 83
    32ec:	f0 e0       	ldi	r31, 0x00	; 0
    32ee:	80 81       	ld	r24, Z
    32f0:	84 60       	ori	r24, 0x04	; 4
    32f2:	80 83       	st	Z, r24
		TCCR0_REG.Bits.CS00_Bit = 1;
    32f4:	e3 e5       	ldi	r30, 0x53	; 83
    32f6:	f0 e0       	ldi	r31, 0x00	; 0
    32f8:	80 81       	ld	r24, Z
    32fa:	81 60       	ori	r24, 0x01	; 1
    32fc:	80 83       	st	Z, r24
		break;
	}

	if (Config_Ptr->timer_mode == NORMAL_MODE) {
    32fe:	e9 81       	ldd	r30, Y+1	; 0x01
    3300:	fa 81       	ldd	r31, Y+2	; 0x02
    3302:	86 81       	ldd	r24, Z+6	; 0x06
    3304:	88 23       	and	r24, r24
    3306:	31 f4       	brne	.+12     	; 0x3314 <Timer0_init+0xf8>
		/* Enable Timer0 overflow interrupt */
		TIMSK_REG.Bits.TOIE0_Bit = 1;
    3308:	e9 e5       	ldi	r30, 0x59	; 89
    330a:	f0 e0       	ldi	r31, 0x00	; 0
    330c:	80 81       	ld	r24, Z
    330e:	81 60       	ori	r24, 0x01	; 1
    3310:	80 83       	st	Z, r24
    3312:	11 c0       	rjmp	.+34     	; 0x3336 <Timer0_init+0x11a>
	} else if (Config_Ptr->timer_mode == COMPARE_MODE) {
    3314:	e9 81       	ldd	r30, Y+1	; 0x01
    3316:	fa 81       	ldd	r31, Y+2	; 0x02
    3318:	86 81       	ldd	r24, Z+6	; 0x06
    331a:	81 30       	cpi	r24, 0x01	; 1
    331c:	61 f4       	brne	.+24     	; 0x3336 <Timer0_init+0x11a>
		/* Set compare match value */
		OCR0_REG.Byte = Config_Ptr->timer_compare_MatchValue;
    331e:	ac e5       	ldi	r26, 0x5C	; 92
    3320:	b0 e0       	ldi	r27, 0x00	; 0
    3322:	e9 81       	ldd	r30, Y+1	; 0x01
    3324:	fa 81       	ldd	r31, Y+2	; 0x02
    3326:	82 81       	ldd	r24, Z+2	; 0x02
    3328:	93 81       	ldd	r25, Z+3	; 0x03
    332a:	8c 93       	st	X, r24

		/* Enable Timer0 compare interrupt */
		TIMSK_REG.Bits.OCIE0_Bit = 1;
    332c:	e9 e5       	ldi	r30, 0x59	; 89
    332e:	f0 e0       	ldi	r31, 0x00	; 0
    3330:	80 81       	ld	r24, Z
    3332:	82 60       	ori	r24, 0x02	; 2
    3334:	80 83       	st	Z, r24
	}
}
    3336:	0f 90       	pop	r0
    3338:	0f 90       	pop	r0
    333a:	0f 90       	pop	r0
    333c:	0f 90       	pop	r0
    333e:	cf 91       	pop	r28
    3340:	df 91       	pop	r29
    3342:	08 95       	ret

00003344 <Timer0_deInit>:

// Timer0 de-initialization
static void Timer0_deInit(void) {
    3344:	df 93       	push	r29
    3346:	cf 93       	push	r28
    3348:	cd b7       	in	r28, 0x3d	; 61
    334a:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG.Byte = 0; /* Stop the timer */
    334c:	e3 e5       	ldi	r30, 0x53	; 83
    334e:	f0 e0       	ldi	r31, 0x00	; 0
    3350:	10 82       	st	Z, r1
	 /* Clear the prescaler bits in TCCR0 to stop the timer */
	TCCR0_REG.Bits.CS00_Bit = 0; /* Clear Clock Select Bit 0 */
    3352:	e3 e5       	ldi	r30, 0x53	; 83
    3354:	f0 e0       	ldi	r31, 0x00	; 0
    3356:	80 81       	ld	r24, Z
    3358:	8e 7f       	andi	r24, 0xFE	; 254
    335a:	80 83       	st	Z, r24
	TCCR0_REG.Bits.CS01_Bit = 0; /* Clear Clock Select Bit 1 */
    335c:	e3 e5       	ldi	r30, 0x53	; 83
    335e:	f0 e0       	ldi	r31, 0x00	; 0
    3360:	80 81       	ld	r24, Z
    3362:	8d 7f       	andi	r24, 0xFD	; 253
    3364:	80 83       	st	Z, r24
	TCCR0_REG.Bits.CS02_Bit = 0; /* Clear Clock Select Bit 2 */
    3366:	e3 e5       	ldi	r30, 0x53	; 83
    3368:	f0 e0       	ldi	r31, 0x00	; 0
    336a:	80 81       	ld	r24, Z
    336c:	8b 7f       	andi	r24, 0xFB	; 251
    336e:	80 83       	st	Z, r24

	TIMSK_REG.Bits.TOIE0_Bit = 0; /* Disable Timer0 overflow interrupt */
    3370:	e9 e5       	ldi	r30, 0x59	; 89
    3372:	f0 e0       	ldi	r31, 0x00	; 0
    3374:	80 81       	ld	r24, Z
    3376:	8e 7f       	andi	r24, 0xFE	; 254
    3378:	80 83       	st	Z, r24
	TIMSK_REG.Bits.OCIE0_Bit = 0; /* Disable Timer0 compare interrupt */
    337a:	e9 e5       	ldi	r30, 0x59	; 89
    337c:	f0 e0       	ldi	r31, 0x00	; 0
    337e:	80 81       	ld	r24, Z
    3380:	8d 7f       	andi	r24, 0xFD	; 253
    3382:	80 83       	st	Z, r24

	g_callBackPtr[0] = NULL_PTR;
    3384:	10 92 7c 00 	sts	0x007C, r1
    3388:	10 92 7b 00 	sts	0x007B, r1
}
    338c:	cf 91       	pop	r28
    338e:	df 91       	pop	r29
    3390:	08 95       	ret

00003392 <Timer1_init>:

/*******************************************************************************
 *                          Timer1 Functions                                   *
 *******************************************************************************/

static void Timer1_init(const Timer_ConfigType *Config_Ptr) {
    3392:	df 93       	push	r29
    3394:	cf 93       	push	r28
    3396:	00 d0       	rcall	.+0      	; 0x3398 <Timer1_init+0x6>
    3398:	cd b7       	in	r28, 0x3d	; 61
    339a:	de b7       	in	r29, 0x3e	; 62
    339c:	9a 83       	std	Y+2, r25	; 0x02
    339e:	89 83       	std	Y+1, r24	; 0x01
	 * FOC1A    = 1   Force Output Compare for Compare unit A (non-PWM mode)
	 * FOC1B    = 1   Force Output Compare for Compare unit B (non-PWM mode)
	 * WGM11:0        Waveform Generation Mode, selected in configuration
	 ***********************************************************************/

	TCCR1A_REG.Bits.FOC1A_Bit = 1;
    33a0:	ef e4       	ldi	r30, 0x4F	; 79
    33a2:	f0 e0       	ldi	r31, 0x00	; 0
    33a4:	80 81       	ld	r24, Z
    33a6:	88 60       	ori	r24, 0x08	; 8
    33a8:	80 83       	st	Z, r24
	TCCR1A_REG.Bits.FOC1B_Bit = 1;
    33aa:	ef e4       	ldi	r30, 0x4F	; 79
    33ac:	f0 e0       	ldi	r31, 0x00	; 0
    33ae:	80 81       	ld	r24, Z
    33b0:	84 60       	ori	r24, 0x04	; 4
    33b2:	80 83       	st	Z, r24
	/*
	 * insert the required mode in WGM bits (WGM10 and WGM11) of TCCR1A Register
	 * and (WGM12 and WGM13) of TCCR1B Register
	 */

	if (Config_Ptr->timer_mode == NORMAL_MODE) {
    33b4:	e9 81       	ldd	r30, Y+1	; 0x01
    33b6:	fa 81       	ldd	r31, Y+2	; 0x02
    33b8:	86 81       	ldd	r24, Z+6	; 0x06
    33ba:	88 23       	and	r24, r24
    33bc:	a9 f4       	brne	.+42     	; 0x33e8 <Timer1_init+0x56>
		TCCR1A_REG.Bits.WGM10_Bit = 0;
    33be:	ef e4       	ldi	r30, 0x4F	; 79
    33c0:	f0 e0       	ldi	r31, 0x00	; 0
    33c2:	80 81       	ld	r24, Z
    33c4:	8e 7f       	andi	r24, 0xFE	; 254
    33c6:	80 83       	st	Z, r24
		TCCR1A_REG.Bits.WGM11_Bit = 0;
    33c8:	ef e4       	ldi	r30, 0x4F	; 79
    33ca:	f0 e0       	ldi	r31, 0x00	; 0
    33cc:	80 81       	ld	r24, Z
    33ce:	8d 7f       	andi	r24, 0xFD	; 253
    33d0:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.WGM12_Bit = 0;
    33d2:	ee e4       	ldi	r30, 0x4E	; 78
    33d4:	f0 e0       	ldi	r31, 0x00	; 0
    33d6:	80 81       	ld	r24, Z
    33d8:	87 7f       	andi	r24, 0xF7	; 247
    33da:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.WGM13_Bit = 0;
    33dc:	ee e4       	ldi	r30, 0x4E	; 78
    33de:	f0 e0       	ldi	r31, 0x00	; 0
    33e0:	80 81       	ld	r24, Z
    33e2:	8f 7e       	andi	r24, 0xEF	; 239
    33e4:	80 83       	st	Z, r24
    33e6:	19 c0       	rjmp	.+50     	; 0x341a <Timer1_init+0x88>
	} else if (Config_Ptr->timer_mode == COMPARE_MODE) {
    33e8:	e9 81       	ldd	r30, Y+1	; 0x01
    33ea:	fa 81       	ldd	r31, Y+2	; 0x02
    33ec:	86 81       	ldd	r24, Z+6	; 0x06
    33ee:	81 30       	cpi	r24, 0x01	; 1
    33f0:	a1 f4       	brne	.+40     	; 0x341a <Timer1_init+0x88>
		TCCR1A_REG.Bits.WGM10_Bit = 0;
    33f2:	ef e4       	ldi	r30, 0x4F	; 79
    33f4:	f0 e0       	ldi	r31, 0x00	; 0
    33f6:	80 81       	ld	r24, Z
    33f8:	8e 7f       	andi	r24, 0xFE	; 254
    33fa:	80 83       	st	Z, r24
		TCCR1A_REG.Bits.WGM11_Bit = 0;
    33fc:	ef e4       	ldi	r30, 0x4F	; 79
    33fe:	f0 e0       	ldi	r31, 0x00	; 0
    3400:	80 81       	ld	r24, Z
    3402:	8d 7f       	andi	r24, 0xFD	; 253
    3404:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.WGM12_Bit = 1;
    3406:	ee e4       	ldi	r30, 0x4E	; 78
    3408:	f0 e0       	ldi	r31, 0x00	; 0
    340a:	80 81       	ld	r24, Z
    340c:	88 60       	ori	r24, 0x08	; 8
    340e:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.WGM13_Bit = 0;
    3410:	ee e4       	ldi	r30, 0x4E	; 78
    3412:	f0 e0       	ldi	r31, 0x00	; 0
    3414:	80 81       	ld	r24, Z
    3416:	8f 7e       	andi	r24, 0xEF	; 239
    3418:	80 83       	st	Z, r24
	 * WGM13:2        Waveform Generation Mode, selected in configuration
	 * CS12:0   = 0   Clock Select, selected in configuration
	 ***********************************************************************/

	/* Set the prescaler based on the provided timer_clock */
	TCCR1B_REG.Byte = (0xF8 & TCCR1B_REG.Byte) | (Config_Ptr->timer_clock);
    341a:	ae e4       	ldi	r26, 0x4E	; 78
    341c:	b0 e0       	ldi	r27, 0x00	; 0
    341e:	ee e4       	ldi	r30, 0x4E	; 78
    3420:	f0 e0       	ldi	r31, 0x00	; 0
    3422:	80 81       	ld	r24, Z
    3424:	98 2f       	mov	r25, r24
    3426:	98 7f       	andi	r25, 0xF8	; 248
    3428:	e9 81       	ldd	r30, Y+1	; 0x01
    342a:	fa 81       	ldd	r31, Y+2	; 0x02
    342c:	85 81       	ldd	r24, Z+5	; 0x05
    342e:	89 2b       	or	r24, r25
    3430:	8c 93       	st	X, r24

	/* Set Initial value */
	TCNT1_REG.Word = Config_Ptr->timer_InitialValue;
    3432:	ac e4       	ldi	r26, 0x4C	; 76
    3434:	b0 e0       	ldi	r27, 0x00	; 0
    3436:	e9 81       	ldd	r30, Y+1	; 0x01
    3438:	fa 81       	ldd	r31, Y+2	; 0x02
    343a:	80 81       	ld	r24, Z
    343c:	91 81       	ldd	r25, Z+1	; 0x01
    343e:	11 96       	adiw	r26, 0x01	; 1
    3440:	9c 93       	st	X, r25
    3442:	8e 93       	st	-X, r24

	/* Check For mode */
	if (Config_Ptr->timer_mode == NORMAL_MODE) {
    3444:	e9 81       	ldd	r30, Y+1	; 0x01
    3446:	fa 81       	ldd	r31, Y+2	; 0x02
    3448:	86 81       	ldd	r24, Z+6	; 0x06
    344a:	88 23       	and	r24, r24
    344c:	31 f4       	brne	.+12     	; 0x345a <Timer1_init+0xc8>
		/* Enable Timer1 overflow interrupt */
		TIMSK1_REG.Bits.TOIE1_Bit = 1;
    344e:	e9 e5       	ldi	r30, 0x59	; 89
    3450:	f0 e0       	ldi	r31, 0x00	; 0
    3452:	80 81       	ld	r24, Z
    3454:	84 60       	ori	r24, 0x04	; 4
    3456:	80 83       	st	Z, r24
    3458:	13 c0       	rjmp	.+38     	; 0x3480 <Timer1_init+0xee>

	} else if (Config_Ptr->timer_mode == COMPARE_MODE) {
    345a:	e9 81       	ldd	r30, Y+1	; 0x01
    345c:	fa 81       	ldd	r31, Y+2	; 0x02
    345e:	86 81       	ldd	r24, Z+6	; 0x06
    3460:	81 30       	cpi	r24, 0x01	; 1
    3462:	71 f4       	brne	.+28     	; 0x3480 <Timer1_init+0xee>
		/* Set compare match value */
		OCR1A_REG.Word = Config_Ptr->timer_compare_MatchValue;
    3464:	aa e4       	ldi	r26, 0x4A	; 74
    3466:	b0 e0       	ldi	r27, 0x00	; 0
    3468:	e9 81       	ldd	r30, Y+1	; 0x01
    346a:	fa 81       	ldd	r31, Y+2	; 0x02
    346c:	82 81       	ldd	r24, Z+2	; 0x02
    346e:	93 81       	ldd	r25, Z+3	; 0x03
    3470:	11 96       	adiw	r26, 0x01	; 1
    3472:	9c 93       	st	X, r25
    3474:	8e 93       	st	-X, r24

		/* Enable Timer1 compare interrupt */
		TIMSK1_REG.Bits.OCIE1A_Bit = 1;
    3476:	e9 e5       	ldi	r30, 0x59	; 89
    3478:	f0 e0       	ldi	r31, 0x00	; 0
    347a:	80 81       	ld	r24, Z
    347c:	80 61       	ori	r24, 0x10	; 16
    347e:	80 83       	st	Z, r24
	}
}
    3480:	0f 90       	pop	r0
    3482:	0f 90       	pop	r0
    3484:	cf 91       	pop	r28
    3486:	df 91       	pop	r29
    3488:	08 95       	ret

0000348a <Timer1_deInit>:

static void Timer1_deInit(void) {
    348a:	df 93       	push	r29
    348c:	cf 93       	push	r28
    348e:	cd b7       	in	r28, 0x3d	; 61
    3490:	de b7       	in	r29, 0x3e	; 62
	/* Reset TCCR1A and TCCR1B registers to their default values */
	TCCR1A_REG.Byte = 0;
    3492:	ef e4       	ldi	r30, 0x4F	; 79
    3494:	f0 e0       	ldi	r31, 0x00	; 0
    3496:	10 82       	st	Z, r1
	TCCR1B_REG.Byte = 0;
    3498:	ee e4       	ldi	r30, 0x4E	; 78
    349a:	f0 e0       	ldi	r31, 0x00	; 0
    349c:	10 82       	st	Z, r1

	/* Clear the Timer1 counter register */
	TCNT1_REG.Word = 0;
    349e:	ec e4       	ldi	r30, 0x4C	; 76
    34a0:	f0 e0       	ldi	r31, 0x00	; 0
    34a2:	11 82       	std	Z+1, r1	; 0x01
    34a4:	10 82       	st	Z, r1

	/* Clear the Output Compare Register */
	OCR1A_REG.Word = 0;
    34a6:	ea e4       	ldi	r30, 0x4A	; 74
    34a8:	f0 e0       	ldi	r31, 0x00	; 0
    34aa:	11 82       	std	Z+1, r1	; 0x01
    34ac:	10 82       	st	Z, r1

	/* Disable Timer1 overflow interrupt */
	TIMSK1_REG.Bits.TOIE1_Bit = 0;
    34ae:	e9 e5       	ldi	r30, 0x59	; 89
    34b0:	f0 e0       	ldi	r31, 0x00	; 0
    34b2:	80 81       	ld	r24, Z
    34b4:	8b 7f       	andi	r24, 0xFB	; 251
    34b6:	80 83       	st	Z, r24

	/* Disable Timer1 compare match interrupt */
	TIMSK1_REG.Bits.OCIE1A_Bit = 0;
    34b8:	e9 e5       	ldi	r30, 0x59	; 89
    34ba:	f0 e0       	ldi	r31, 0x00	; 0
    34bc:	80 81       	ld	r24, Z
    34be:	8f 7e       	andi	r24, 0xEF	; 239
    34c0:	80 83       	st	Z, r24

	g_callBackPtr[1] = NULL_PTR;
    34c2:	10 92 7e 00 	sts	0x007E, r1
    34c6:	10 92 7d 00 	sts	0x007D, r1
}
    34ca:	cf 91       	pop	r28
    34cc:	df 91       	pop	r29
    34ce:	08 95       	ret

000034d0 <Timer2_init>:

/*******************************************************************************
 *                          Timer2 Functions                                   *
 *******************************************************************************/

static void Timer2_init(const Timer_ConfigType *Config_Ptr) {
    34d0:	df 93       	push	r29
    34d2:	cf 93       	push	r28
    34d4:	00 d0       	rcall	.+0      	; 0x34d6 <Timer2_init+0x6>
    34d6:	00 d0       	rcall	.+0      	; 0x34d8 <Timer2_init+0x8>
    34d8:	cd b7       	in	r28, 0x3d	; 61
    34da:	de b7       	in	r29, 0x3e	; 62
    34dc:	9a 83       	std	Y+2, r25	; 0x02
    34de:	89 83       	std	Y+1, r24	; 0x01
	/* Set the initial value */
	TCNT2_REG.Byte = Config_Ptr->timer_InitialValue;
    34e0:	a4 e4       	ldi	r26, 0x44	; 68
    34e2:	b0 e0       	ldi	r27, 0x00	; 0
    34e4:	e9 81       	ldd	r30, Y+1	; 0x01
    34e6:	fa 81       	ldd	r31, Y+2	; 0x02
    34e8:	80 81       	ld	r24, Z
    34ea:	91 81       	ldd	r25, Z+1	; 0x01
    34ec:	8c 93       	st	X, r24

	/* Force Output Compare */
	TCCR2_REG.Bits.FOC2_Bit = 1;
    34ee:	e5 e4       	ldi	r30, 0x45	; 69
    34f0:	f0 e0       	ldi	r31, 0x00	; 0
    34f2:	80 81       	ld	r24, Z
    34f4:	80 68       	ori	r24, 0x80	; 128
    34f6:	80 83       	st	Z, r24

	switch (Config_Ptr->timer_clock) {
    34f8:	e9 81       	ldd	r30, Y+1	; 0x01
    34fa:	fa 81       	ldd	r31, Y+2	; 0x02
    34fc:	85 81       	ldd	r24, Z+5	; 0x05
    34fe:	28 2f       	mov	r18, r24
    3500:	30 e0       	ldi	r19, 0x00	; 0
    3502:	3c 83       	std	Y+4, r19	; 0x04
    3504:	2b 83       	std	Y+3, r18	; 0x03
    3506:	8b 81       	ldd	r24, Y+3	; 0x03
    3508:	9c 81       	ldd	r25, Y+4	; 0x04
    350a:	82 30       	cpi	r24, 0x02	; 2
    350c:	91 05       	cpc	r25, r1
    350e:	a9 f1       	breq	.+106    	; 0x357a <Timer2_init+0xaa>
    3510:	2b 81       	ldd	r18, Y+3	; 0x03
    3512:	3c 81       	ldd	r19, Y+4	; 0x04
    3514:	23 30       	cpi	r18, 0x03	; 3
    3516:	31 05       	cpc	r19, r1
    3518:	54 f4       	brge	.+20     	; 0x352e <Timer2_init+0x5e>
    351a:	8b 81       	ldd	r24, Y+3	; 0x03
    351c:	9c 81       	ldd	r25, Y+4	; 0x04
    351e:	00 97       	sbiw	r24, 0x00	; 0
    3520:	b1 f0       	breq	.+44     	; 0x354e <Timer2_init+0x7e>
    3522:	2b 81       	ldd	r18, Y+3	; 0x03
    3524:	3c 81       	ldd	r19, Y+4	; 0x04
    3526:	21 30       	cpi	r18, 0x01	; 1
    3528:	31 05       	cpc	r19, r1
    352a:	09 f1       	breq	.+66     	; 0x356e <Timer2_init+0x9e>
    352c:	4c c0       	rjmp	.+152    	; 0x35c6 <Timer2_init+0xf6>
    352e:	8b 81       	ldd	r24, Y+3	; 0x03
    3530:	9c 81       	ldd	r25, Y+4	; 0x04
    3532:	84 30       	cpi	r24, 0x04	; 4
    3534:	91 05       	cpc	r25, r1
    3536:	69 f1       	breq	.+90     	; 0x3592 <Timer2_init+0xc2>
    3538:	2b 81       	ldd	r18, Y+3	; 0x03
    353a:	3c 81       	ldd	r19, Y+4	; 0x04
    353c:	24 30       	cpi	r18, 0x04	; 4
    353e:	31 05       	cpc	r19, r1
    3540:	14 f1       	brlt	.+68     	; 0x3586 <Timer2_init+0xb6>
    3542:	8b 81       	ldd	r24, Y+3	; 0x03
    3544:	9c 81       	ldd	r25, Y+4	; 0x04
    3546:	85 30       	cpi	r24, 0x05	; 5
    3548:	91 05       	cpc	r25, r1
    354a:	71 f1       	breq	.+92     	; 0x35a8 <Timer2_init+0xd8>
    354c:	3c c0       	rjmp	.+120    	; 0x35c6 <Timer2_init+0xf6>
	case NO_CLOCK:
		/* Stop the timer */
		TCCR2_REG.Bits.CS20_Bit = 0;
    354e:	e5 e4       	ldi	r30, 0x45	; 69
    3550:	f0 e0       	ldi	r31, 0x00	; 0
    3552:	80 81       	ld	r24, Z
    3554:	8e 7f       	andi	r24, 0xFE	; 254
    3556:	80 83       	st	Z, r24
		TCCR2_REG.Bits.CS21_Bit = 0;
    3558:	e5 e4       	ldi	r30, 0x45	; 69
    355a:	f0 e0       	ldi	r31, 0x00	; 0
    355c:	80 81       	ld	r24, Z
    355e:	8d 7f       	andi	r24, 0xFD	; 253
    3560:	80 83       	st	Z, r24
		TCCR2_REG.Bits.CS22_Bit = 0;
    3562:	e5 e4       	ldi	r30, 0x45	; 69
    3564:	f0 e0       	ldi	r31, 0x00	; 0
    3566:	80 81       	ld	r24, Z
    3568:	8b 7f       	andi	r24, 0xFB	; 251
    356a:	80 83       	st	Z, r24
    356c:	2c c0       	rjmp	.+88     	; 0x35c6 <Timer2_init+0xf6>
		break;
	case PRESCALER_1:
		TCCR2_REG.Bits.CS20_Bit = 1;
    356e:	e5 e4       	ldi	r30, 0x45	; 69
    3570:	f0 e0       	ldi	r31, 0x00	; 0
    3572:	80 81       	ld	r24, Z
    3574:	81 60       	ori	r24, 0x01	; 1
    3576:	80 83       	st	Z, r24
    3578:	26 c0       	rjmp	.+76     	; 0x35c6 <Timer2_init+0xf6>
		break;
	case PRESCALER_8:
		TCCR2_REG.Bits.CS21_Bit = 1;
    357a:	e5 e4       	ldi	r30, 0x45	; 69
    357c:	f0 e0       	ldi	r31, 0x00	; 0
    357e:	80 81       	ld	r24, Z
    3580:	82 60       	ori	r24, 0x02	; 2
    3582:	80 83       	st	Z, r24
    3584:	20 c0       	rjmp	.+64     	; 0x35c6 <Timer2_init+0xf6>
		break;
	case PRESCALER_64:
		TCCR2_REG.Bits.CS22_Bit = 1;
    3586:	e5 e4       	ldi	r30, 0x45	; 69
    3588:	f0 e0       	ldi	r31, 0x00	; 0
    358a:	80 81       	ld	r24, Z
    358c:	84 60       	ori	r24, 0x04	; 4
    358e:	80 83       	st	Z, r24
    3590:	1a c0       	rjmp	.+52     	; 0x35c6 <Timer2_init+0xf6>
		break;
	case PRESCALER_256:
		TCCR2_REG.Bits.CS21_Bit = 1;
    3592:	e5 e4       	ldi	r30, 0x45	; 69
    3594:	f0 e0       	ldi	r31, 0x00	; 0
    3596:	80 81       	ld	r24, Z
    3598:	82 60       	ori	r24, 0x02	; 2
    359a:	80 83       	st	Z, r24
		TCCR2_REG.Bits.CS22_Bit = 1;
    359c:	e5 e4       	ldi	r30, 0x45	; 69
    359e:	f0 e0       	ldi	r31, 0x00	; 0
    35a0:	80 81       	ld	r24, Z
    35a2:	84 60       	ori	r24, 0x04	; 4
    35a4:	80 83       	st	Z, r24
    35a6:	0f c0       	rjmp	.+30     	; 0x35c6 <Timer2_init+0xf6>
		break;
	case PRESCALER_1024:
		TCCR2_REG.Bits.CS22_Bit = 1;
    35a8:	e5 e4       	ldi	r30, 0x45	; 69
    35aa:	f0 e0       	ldi	r31, 0x00	; 0
    35ac:	80 81       	ld	r24, Z
    35ae:	84 60       	ori	r24, 0x04	; 4
    35b0:	80 83       	st	Z, r24
		TCCR2_REG.Bits.CS21_Bit = 1;
    35b2:	e5 e4       	ldi	r30, 0x45	; 69
    35b4:	f0 e0       	ldi	r31, 0x00	; 0
    35b6:	80 81       	ld	r24, Z
    35b8:	82 60       	ori	r24, 0x02	; 2
    35ba:	80 83       	st	Z, r24
		TCCR2_REG.Bits.CS20_Bit = 1;
    35bc:	e5 e4       	ldi	r30, 0x45	; 69
    35be:	f0 e0       	ldi	r31, 0x00	; 0
    35c0:	80 81       	ld	r24, Z
    35c2:	81 60       	ori	r24, 0x01	; 1
    35c4:	80 83       	st	Z, r24
		break;
	}
	if (Config_Ptr->timer_mode == NORMAL_MODE) {
    35c6:	e9 81       	ldd	r30, Y+1	; 0x01
    35c8:	fa 81       	ldd	r31, Y+2	; 0x02
    35ca:	86 81       	ldd	r24, Z+6	; 0x06
    35cc:	88 23       	and	r24, r24
    35ce:	81 f4       	brne	.+32     	; 0x35f0 <Timer2_init+0x120>
		/* Waveform Generation Mode For CTC */
		TCCR2_REG.Bits.WGM20_Bit = 0;
    35d0:	e5 e4       	ldi	r30, 0x45	; 69
    35d2:	f0 e0       	ldi	r31, 0x00	; 0
    35d4:	80 81       	ld	r24, Z
    35d6:	8f 7b       	andi	r24, 0xBF	; 191
    35d8:	80 83       	st	Z, r24
		TCCR2_REG.Bits.WGM21_Bit = 0;
    35da:	e5 e4       	ldi	r30, 0x45	; 69
    35dc:	f0 e0       	ldi	r31, 0x00	; 0
    35de:	80 81       	ld	r24, Z
    35e0:	87 7f       	andi	r24, 0xF7	; 247
    35e2:	80 83       	st	Z, r24

		/* Enable Timer2 OverFlow interrupt */
		TIMSK2_REG.Bits.TOIE2_Bit = 1;
    35e4:	e9 e5       	ldi	r30, 0x59	; 89
    35e6:	f0 e0       	ldi	r31, 0x00	; 0
    35e8:	80 81       	ld	r24, Z
    35ea:	80 68       	ori	r24, 0x80	; 128
    35ec:	80 83       	st	Z, r24
    35ee:	1b c0       	rjmp	.+54     	; 0x3626 <Timer2_init+0x156>

	} else if (Config_Ptr->timer_mode == COMPARE_MODE) {
    35f0:	e9 81       	ldd	r30, Y+1	; 0x01
    35f2:	fa 81       	ldd	r31, Y+2	; 0x02
    35f4:	86 81       	ldd	r24, Z+6	; 0x06
    35f6:	81 30       	cpi	r24, 0x01	; 1
    35f8:	b1 f4       	brne	.+44     	; 0x3626 <Timer2_init+0x156>

		/* Waveform Generation Mode For CTC */

		TCCR2_REG.Bits.WGM20_Bit = 0;
    35fa:	e5 e4       	ldi	r30, 0x45	; 69
    35fc:	f0 e0       	ldi	r31, 0x00	; 0
    35fe:	80 81       	ld	r24, Z
    3600:	8f 7b       	andi	r24, 0xBF	; 191
    3602:	80 83       	st	Z, r24
		TCCR2_REG.Bits.WGM21_Bit = 1;
    3604:	e5 e4       	ldi	r30, 0x45	; 69
    3606:	f0 e0       	ldi	r31, 0x00	; 0
    3608:	80 81       	ld	r24, Z
    360a:	88 60       	ori	r24, 0x08	; 8
    360c:	80 83       	st	Z, r24

		/* Set compare match value */

		OCR2_REG.Byte = Config_Ptr->timer_compare_MatchValue;
    360e:	a3 e4       	ldi	r26, 0x43	; 67
    3610:	b0 e0       	ldi	r27, 0x00	; 0
    3612:	e9 81       	ldd	r30, Y+1	; 0x01
    3614:	fa 81       	ldd	r31, Y+2	; 0x02
    3616:	82 81       	ldd	r24, Z+2	; 0x02
    3618:	93 81       	ldd	r25, Z+3	; 0x03
    361a:	8c 93       	st	X, r24

		/* Enable Timer2 compare interrupt */

		TIMSK2_REG.Bits.OCIE2_Bit = 1;
    361c:	e9 e5       	ldi	r30, 0x59	; 89
    361e:	f0 e0       	ldi	r31, 0x00	; 0
    3620:	80 81       	ld	r24, Z
    3622:	80 64       	ori	r24, 0x40	; 64
    3624:	80 83       	st	Z, r24

	}
}
    3626:	0f 90       	pop	r0
    3628:	0f 90       	pop	r0
    362a:	0f 90       	pop	r0
    362c:	0f 90       	pop	r0
    362e:	cf 91       	pop	r28
    3630:	df 91       	pop	r29
    3632:	08 95       	ret

00003634 <Timer2_deInit>:

static void Timer2_deInit(void) {
    3634:	df 93       	push	r29
    3636:	cf 93       	push	r28
    3638:	cd b7       	in	r28, 0x3d	; 61
    363a:	de b7       	in	r29, 0x3e	; 62
	/* Reset TCCR2 register to its default value */
	TCCR2_REG.Byte = 0;
    363c:	e5 e4       	ldi	r30, 0x45	; 69
    363e:	f0 e0       	ldi	r31, 0x00	; 0
    3640:	10 82       	st	Z, r1

	/* Clear the Timer2 counter register */
	TCNT2_REG.Byte = 0;
    3642:	e4 e4       	ldi	r30, 0x44	; 68
    3644:	f0 e0       	ldi	r31, 0x00	; 0
    3646:	10 82       	st	Z, r1

	/* Clear the Output Compare Register */
	OCR2_REG.Byte = 0;
    3648:	e3 e4       	ldi	r30, 0x43	; 67
    364a:	f0 e0       	ldi	r31, 0x00	; 0
    364c:	10 82       	st	Z, r1

	/* Disable Timer2 overflow interrupt */
	TIMSK2_REG.Bits.TOIE2_Bit = 0;
    364e:	e9 e5       	ldi	r30, 0x59	; 89
    3650:	f0 e0       	ldi	r31, 0x00	; 0
    3652:	80 81       	ld	r24, Z
    3654:	8f 77       	andi	r24, 0x7F	; 127
    3656:	80 83       	st	Z, r24

	/* Disable Timer2 compare match interrupt */
	TIMSK2_REG.Bits.OCIE2_Bit = 0;
    3658:	e9 e5       	ldi	r30, 0x59	; 89
    365a:	f0 e0       	ldi	r31, 0x00	; 0
    365c:	80 81       	ld	r24, Z
    365e:	8f 7b       	andi	r24, 0xBF	; 191
    3660:	80 83       	st	Z, r24

	g_callBackPtr[2] = NULL_PTR;
    3662:	10 92 80 00 	sts	0x0080, r1
    3666:	10 92 7f 00 	sts	0x007F, r1
}
    366a:	cf 91       	pop	r28
    366c:	df 91       	pop	r29
    366e:	08 95       	ret

00003670 <Timer0_init_PWM>:
#include "Timer0_PWM.h"
#include "common_macros.h"
#include "std_types.h"
#include <avr/io.h>

void Timer0_init_PWM() {
    3670:	df 93       	push	r29
    3672:	cf 93       	push	r28
    3674:	cd b7       	in	r28, 0x3d	; 61
    3676:	de b7       	in	r29, 0x3e	; 62

	/* Initialize Timer0 counter to 0 */
	TCNT0 = 0;
    3678:	e2 e5       	ldi	r30, 0x52	; 82
    367a:	f0 e0       	ldi	r31, 0x00	; 0
    367c:	10 82       	st	Z, r1

	/* Set PB3/OC0 as output pin -> pin where the PWM signal is generated from MC */
	DDRB |= (1 << PWM_OUTPUT_PIN);
    367e:	a7 e3       	ldi	r26, 0x37	; 55
    3680:	b0 e0       	ldi	r27, 0x00	; 0
    3682:	e7 e3       	ldi	r30, 0x37	; 55
    3684:	f0 e0       	ldi	r31, 0x00	; 0
    3686:	80 81       	ld	r24, Z
    3688:	88 60       	ori	r24, 0x08	; 8
    368a:	8c 93       	st	X, r24

	/* Configure Timer0 for Fast PWM mode and set prescaler to 1024 */

	/* Set WGM00, WGM01 bits for Fast PWM mode */
	TCCR0 |= (1 << WGM00) | (1 << WGM01);
    368c:	a3 e5       	ldi	r26, 0x53	; 83
    368e:	b0 e0       	ldi	r27, 0x00	; 0
    3690:	e3 e5       	ldi	r30, 0x53	; 83
    3692:	f0 e0       	ldi	r31, 0x00	; 0
    3694:	80 81       	ld	r24, Z
    3696:	88 64       	ori	r24, 0x48	; 72
    3698:	8c 93       	st	X, r24

	/* Clear OC0 on Compare Match (non-inverted mode) */
	TCCR0 |= (1 << COM01);
    369a:	a3 e5       	ldi	r26, 0x53	; 83
    369c:	b0 e0       	ldi	r27, 0x00	; 0
    369e:	e3 e5       	ldi	r30, 0x53	; 83
    36a0:	f0 e0       	ldi	r31, 0x00	; 0
    36a2:	80 81       	ld	r24, Z
    36a4:	80 62       	ori	r24, 0x20	; 32
    36a6:	8c 93       	st	X, r24

	/* Set CS00, CS02 bits for prescaler = 1024 */
	TCCR0 |= (1 << CS00) | (1 << CS02);
    36a8:	a3 e5       	ldi	r26, 0x53	; 83
    36aa:	b0 e0       	ldi	r27, 0x00	; 0
    36ac:	e3 e5       	ldi	r30, 0x53	; 83
    36ae:	f0 e0       	ldi	r31, 0x00	; 0
    36b0:	80 81       	ld	r24, Z
    36b2:	85 60       	ori	r24, 0x05	; 5
    36b4:	8c 93       	st	X, r24
}
    36b6:	cf 91       	pop	r28
    36b8:	df 91       	pop	r29
    36ba:	08 95       	ret

000036bc <PWM_Set_Duty_Cycle>:
void PWM_Set_Duty_Cycle(uint8 duty_cycle) {
    36bc:	df 93       	push	r29
    36be:	cf 93       	push	r28
    36c0:	0f 92       	push	r0
    36c2:	cd b7       	in	r28, 0x3d	; 61
    36c4:	de b7       	in	r29, 0x3e	; 62
    36c6:	89 83       	std	Y+1, r24	; 0x01

	/*Set the Output Compare Register with duty cycle*/

	/** Set the duty cycle */

	if (duty_cycle > 100) {
    36c8:	89 81       	ldd	r24, Y+1	; 0x01
    36ca:	85 36       	cpi	r24, 0x65	; 101
    36cc:	10 f0       	brcs	.+4      	; 0x36d2 <PWM_Set_Duty_Cycle+0x16>
		duty_cycle = 100; /*Cap the duty cycle to 100%*/
    36ce:	84 e6       	ldi	r24, 0x64	; 100
    36d0:	89 83       	std	Y+1, r24	; 0x01
	}

	OCR0 = (uint8)(((uint16) duty_cycle * 255) / 100); /*Convert percentage to OCR value (0-255)*/
    36d2:	ec e5       	ldi	r30, 0x5C	; 92
    36d4:	f0 e0       	ldi	r31, 0x00	; 0
    36d6:	89 81       	ldd	r24, Y+1	; 0x01
    36d8:	48 2f       	mov	r20, r24
    36da:	50 e0       	ldi	r21, 0x00	; 0
    36dc:	ca 01       	movw	r24, r20
    36de:	9c 01       	movw	r18, r24
    36e0:	22 0f       	add	r18, r18
    36e2:	33 1f       	adc	r19, r19
    36e4:	c9 01       	movw	r24, r18
    36e6:	96 95       	lsr	r25
    36e8:	98 2f       	mov	r25, r24
    36ea:	88 27       	eor	r24, r24
    36ec:	97 95       	ror	r25
    36ee:	87 95       	ror	r24
    36f0:	82 1b       	sub	r24, r18
    36f2:	93 0b       	sbc	r25, r19
    36f4:	84 0f       	add	r24, r20
    36f6:	95 1f       	adc	r25, r21
    36f8:	24 e6       	ldi	r18, 0x64	; 100
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	b9 01       	movw	r22, r18
    36fe:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__udivmodhi4>
    3702:	cb 01       	movw	r24, r22
    3704:	80 83       	st	Z, r24
}
    3706:	0f 90       	pop	r0
    3708:	cf 91       	pop	r28
    370a:	df 91       	pop	r29
    370c:	08 95       	ret

0000370e <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    370e:	df 93       	push	r29
    3710:	cf 93       	push	r28
    3712:	00 d0       	rcall	.+0      	; 0x3714 <EEPROM_writeByte+0x6>
    3714:	00 d0       	rcall	.+0      	; 0x3716 <EEPROM_writeByte+0x8>
    3716:	cd b7       	in	r28, 0x3d	; 61
    3718:	de b7       	in	r29, 0x3e	; 62
    371a:	9a 83       	std	Y+2, r25	; 0x02
    371c:	89 83       	std	Y+1, r24	; 0x01
    371e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    3720:	0e 94 9c 1c 	call	0x3938	; 0x3938 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    3724:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <TWI_getStatus>
    3728:	88 30       	cpi	r24, 0x08	; 8
    372a:	11 f0       	breq	.+4      	; 0x3730 <EEPROM_writeByte+0x22>
        return ERROR;
    372c:	1c 82       	std	Y+4, r1	; 0x04
    372e:	28 c0       	rjmp	.+80     	; 0x3780 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    3730:	89 81       	ldd	r24, Y+1	; 0x01
    3732:	9a 81       	ldd	r25, Y+2	; 0x02
    3734:	80 70       	andi	r24, 0x00	; 0
    3736:	97 70       	andi	r25, 0x07	; 7
    3738:	88 0f       	add	r24, r24
    373a:	89 2f       	mov	r24, r25
    373c:	88 1f       	adc	r24, r24
    373e:	99 0b       	sbc	r25, r25
    3740:	91 95       	neg	r25
    3742:	80 6a       	ori	r24, 0xA0	; 160
    3744:	0e 94 b8 1c 	call	0x3970	; 0x3970 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    3748:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <TWI_getStatus>
    374c:	88 31       	cpi	r24, 0x18	; 24
    374e:	11 f0       	breq	.+4      	; 0x3754 <EEPROM_writeByte+0x46>
        return ERROR; 
    3750:	1c 82       	std	Y+4, r1	; 0x04
    3752:	16 c0       	rjmp	.+44     	; 0x3780 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    3754:	89 81       	ldd	r24, Y+1	; 0x01
    3756:	0e 94 b8 1c 	call	0x3970	; 0x3970 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    375a:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <TWI_getStatus>
    375e:	88 32       	cpi	r24, 0x28	; 40
    3760:	11 f0       	breq	.+4      	; 0x3766 <EEPROM_writeByte+0x58>
        return ERROR;
    3762:	1c 82       	std	Y+4, r1	; 0x04
    3764:	0d c0       	rjmp	.+26     	; 0x3780 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    3766:	8b 81       	ldd	r24, Y+3	; 0x03
    3768:	0e 94 b8 1c 	call	0x3970	; 0x3970 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    376c:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <TWI_getStatus>
    3770:	88 32       	cpi	r24, 0x28	; 40
    3772:	11 f0       	breq	.+4      	; 0x3778 <EEPROM_writeByte+0x6a>
        return ERROR;
    3774:	1c 82       	std	Y+4, r1	; 0x04
    3776:	04 c0       	rjmp	.+8      	; 0x3780 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    3778:	0e 94 ad 1c 	call	0x395a	; 0x395a <TWI_stop>
	
    return SUCCESS;
    377c:	81 e0       	ldi	r24, 0x01	; 1
    377e:	8c 83       	std	Y+4, r24	; 0x04
    3780:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3782:	0f 90       	pop	r0
    3784:	0f 90       	pop	r0
    3786:	0f 90       	pop	r0
    3788:	0f 90       	pop	r0
    378a:	cf 91       	pop	r28
    378c:	df 91       	pop	r29
    378e:	08 95       	ret

00003790 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    3790:	df 93       	push	r29
    3792:	cf 93       	push	r28
    3794:	00 d0       	rcall	.+0      	; 0x3796 <EEPROM_readByte+0x6>
    3796:	00 d0       	rcall	.+0      	; 0x3798 <EEPROM_readByte+0x8>
    3798:	0f 92       	push	r0
    379a:	cd b7       	in	r28, 0x3d	; 61
    379c:	de b7       	in	r29, 0x3e	; 62
    379e:	9a 83       	std	Y+2, r25	; 0x02
    37a0:	89 83       	std	Y+1, r24	; 0x01
    37a2:	7c 83       	std	Y+4, r23	; 0x04
    37a4:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    37a6:	0e 94 9c 1c 	call	0x3938	; 0x3938 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    37aa:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <TWI_getStatus>
    37ae:	88 30       	cpi	r24, 0x08	; 8
    37b0:	11 f0       	breq	.+4      	; 0x37b6 <EEPROM_readByte+0x26>
        return ERROR;
    37b2:	1d 82       	std	Y+5, r1	; 0x05
    37b4:	44 c0       	rjmp	.+136    	; 0x383e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    37b6:	89 81       	ldd	r24, Y+1	; 0x01
    37b8:	9a 81       	ldd	r25, Y+2	; 0x02
    37ba:	80 70       	andi	r24, 0x00	; 0
    37bc:	97 70       	andi	r25, 0x07	; 7
    37be:	88 0f       	add	r24, r24
    37c0:	89 2f       	mov	r24, r25
    37c2:	88 1f       	adc	r24, r24
    37c4:	99 0b       	sbc	r25, r25
    37c6:	91 95       	neg	r25
    37c8:	80 6a       	ori	r24, 0xA0	; 160
    37ca:	0e 94 b8 1c 	call	0x3970	; 0x3970 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    37ce:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <TWI_getStatus>
    37d2:	88 31       	cpi	r24, 0x18	; 24
    37d4:	11 f0       	breq	.+4      	; 0x37da <EEPROM_readByte+0x4a>
        return ERROR;
    37d6:	1d 82       	std	Y+5, r1	; 0x05
    37d8:	32 c0       	rjmp	.+100    	; 0x383e <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    37da:	89 81       	ldd	r24, Y+1	; 0x01
    37dc:	0e 94 b8 1c 	call	0x3970	; 0x3970 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    37e0:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <TWI_getStatus>
    37e4:	88 32       	cpi	r24, 0x28	; 40
    37e6:	11 f0       	breq	.+4      	; 0x37ec <EEPROM_readByte+0x5c>
        return ERROR;
    37e8:	1d 82       	std	Y+5, r1	; 0x05
    37ea:	29 c0       	rjmp	.+82     	; 0x383e <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    37ec:	0e 94 9c 1c 	call	0x3938	; 0x3938 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    37f0:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <TWI_getStatus>
    37f4:	80 31       	cpi	r24, 0x10	; 16
    37f6:	11 f0       	breq	.+4      	; 0x37fc <EEPROM_readByte+0x6c>
        return ERROR;
    37f8:	1d 82       	std	Y+5, r1	; 0x05
    37fa:	21 c0       	rjmp	.+66     	; 0x383e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    37fc:	89 81       	ldd	r24, Y+1	; 0x01
    37fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3800:	80 70       	andi	r24, 0x00	; 0
    3802:	97 70       	andi	r25, 0x07	; 7
    3804:	88 0f       	add	r24, r24
    3806:	89 2f       	mov	r24, r25
    3808:	88 1f       	adc	r24, r24
    380a:	99 0b       	sbc	r25, r25
    380c:	91 95       	neg	r25
    380e:	81 6a       	ori	r24, 0xA1	; 161
    3810:	0e 94 b8 1c 	call	0x3970	; 0x3970 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    3814:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <TWI_getStatus>
    3818:	80 34       	cpi	r24, 0x40	; 64
    381a:	11 f0       	breq	.+4      	; 0x3820 <EEPROM_readByte+0x90>
        return ERROR;
    381c:	1d 82       	std	Y+5, r1	; 0x05
    381e:	0f c0       	rjmp	.+30     	; 0x383e <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    3820:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <TWI_readByteWithNACK>
    3824:	eb 81       	ldd	r30, Y+3	; 0x03
    3826:	fc 81       	ldd	r31, Y+4	; 0x04
    3828:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    382a:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <TWI_getStatus>
    382e:	88 35       	cpi	r24, 0x58	; 88
    3830:	11 f0       	breq	.+4      	; 0x3836 <EEPROM_readByte+0xa6>
        return ERROR;
    3832:	1d 82       	std	Y+5, r1	; 0x05
    3834:	04 c0       	rjmp	.+8      	; 0x383e <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    3836:	0e 94 ad 1c 	call	0x395a	; 0x395a <TWI_stop>

    return SUCCESS;
    383a:	81 e0       	ldi	r24, 0x01	; 1
    383c:	8d 83       	std	Y+5, r24	; 0x05
    383e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3840:	0f 90       	pop	r0
    3842:	0f 90       	pop	r0
    3844:	0f 90       	pop	r0
    3846:	0f 90       	pop	r0
    3848:	0f 90       	pop	r0
    384a:	cf 91       	pop	r28
    384c:	df 91       	pop	r29
    384e:	08 95       	ret

00003850 <TWI_init>:
 * 	1. Set the required address.
 * 	2. Set the required Prescaler.
 * 	3. Set the required Prescaler bit_rate.
 * 	4. Enable TWI.
 */
void TWI_init(const TWI_ConfigType *Config_Ptr) {
    3850:	df 93       	push	r29
    3852:	cf 93       	push	r28
    3854:	00 d0       	rcall	.+0      	; 0x3856 <TWI_init+0x6>
    3856:	00 d0       	rcall	.+0      	; 0x3858 <TWI_init+0x8>
    3858:	cd b7       	in	r28, 0x3d	; 61
    385a:	de b7       	in	r29, 0x3e	; 62
    385c:	9a 83       	std	Y+2, r25	; 0x02
    385e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Bit Rate: 400.000 kbps and F_CPU=8Mhz
	 * Insert the prescaler in (TWPS0 and TWPS1) Bits in TWSR register.
	 */
	switch (Config_Ptr->Prescaler) {
    3860:	e9 81       	ldd	r30, Y+1	; 0x01
    3862:	fa 81       	ldd	r31, Y+2	; 0x02
    3864:	81 81       	ldd	r24, Z+1	; 0x01
    3866:	28 2f       	mov	r18, r24
    3868:	30 e0       	ldi	r19, 0x00	; 0
    386a:	3c 83       	std	Y+4, r19	; 0x04
    386c:	2b 83       	std	Y+3, r18	; 0x03
    386e:	8b 81       	ldd	r24, Y+3	; 0x03
    3870:	9c 81       	ldd	r25, Y+4	; 0x04
    3872:	81 30       	cpi	r24, 0x01	; 1
    3874:	91 05       	cpc	r25, r1
    3876:	21 f1       	breq	.+72     	; 0x38c0 <TWI_init+0x70>
    3878:	2b 81       	ldd	r18, Y+3	; 0x03
    387a:	3c 81       	ldd	r19, Y+4	; 0x04
    387c:	22 30       	cpi	r18, 0x02	; 2
    387e:	31 05       	cpc	r19, r1
    3880:	2c f4       	brge	.+10     	; 0x388c <TWI_init+0x3c>
    3882:	8b 81       	ldd	r24, Y+3	; 0x03
    3884:	9c 81       	ldd	r25, Y+4	; 0x04
    3886:	00 97       	sbiw	r24, 0x00	; 0
    3888:	61 f0       	breq	.+24     	; 0x38a2 <TWI_init+0x52>
    388a:	43 c0       	rjmp	.+134    	; 0x3912 <TWI_init+0xc2>
    388c:	2b 81       	ldd	r18, Y+3	; 0x03
    388e:	3c 81       	ldd	r19, Y+4	; 0x04
    3890:	22 30       	cpi	r18, 0x02	; 2
    3892:	31 05       	cpc	r19, r1
    3894:	19 f1       	breq	.+70     	; 0x38dc <TWI_init+0x8c>
    3896:	8b 81       	ldd	r24, Y+3	; 0x03
    3898:	9c 81       	ldd	r25, Y+4	; 0x04
    389a:	83 30       	cpi	r24, 0x03	; 3
    389c:	91 05       	cpc	r25, r1
    389e:	61 f1       	breq	.+88     	; 0x38f8 <TWI_init+0xa8>
    38a0:	38 c0       	rjmp	.+112    	; 0x3912 <TWI_init+0xc2>
	case TWI_PRESCALER_1:
		TWBR_REG.Byte = 0x02;
    38a2:	e0 e2       	ldi	r30, 0x20	; 32
    38a4:	f0 e0       	ldi	r31, 0x00	; 0
    38a6:	82 e0       	ldi	r24, 0x02	; 2
    38a8:	80 83       	st	Z, r24
		TWSR_REG.Bits.TWPS0_Bit = 0;
    38aa:	e1 e2       	ldi	r30, 0x21	; 33
    38ac:	f0 e0       	ldi	r31, 0x00	; 0
    38ae:	80 81       	ld	r24, Z
    38b0:	8e 7f       	andi	r24, 0xFE	; 254
    38b2:	80 83       	st	Z, r24
		TWSR_REG.Bits.TWPS1_Bit = 0;
    38b4:	e1 e2       	ldi	r30, 0x21	; 33
    38b6:	f0 e0       	ldi	r31, 0x00	; 0
    38b8:	80 81       	ld	r24, Z
    38ba:	8d 7f       	andi	r24, 0xFD	; 253
    38bc:	80 83       	st	Z, r24
    38be:	29 c0       	rjmp	.+82     	; 0x3912 <TWI_init+0xc2>
		break;
	case TWI_PRESCALER_4:
		TWBR_REG.Byte = 0x00;
    38c0:	e0 e2       	ldi	r30, 0x20	; 32
    38c2:	f0 e0       	ldi	r31, 0x00	; 0
    38c4:	10 82       	st	Z, r1
		TWSR_REG.Bits.TWPS0_Bit = 1;
    38c6:	e1 e2       	ldi	r30, 0x21	; 33
    38c8:	f0 e0       	ldi	r31, 0x00	; 0
    38ca:	80 81       	ld	r24, Z
    38cc:	81 60       	ori	r24, 0x01	; 1
    38ce:	80 83       	st	Z, r24
		TWSR_REG.Bits.TWPS1_Bit = 0;
    38d0:	e1 e2       	ldi	r30, 0x21	; 33
    38d2:	f0 e0       	ldi	r31, 0x00	; 0
    38d4:	80 81       	ld	r24, Z
    38d6:	8d 7f       	andi	r24, 0xFD	; 253
    38d8:	80 83       	st	Z, r24
    38da:	1b c0       	rjmp	.+54     	; 0x3912 <TWI_init+0xc2>
		break;
	case TWI_PRESCALER_16:
		TWBR_REG.Byte = 0x00;
    38dc:	e0 e2       	ldi	r30, 0x20	; 32
    38de:	f0 e0       	ldi	r31, 0x00	; 0
    38e0:	10 82       	st	Z, r1
		TWSR_REG.Bits.TWPS0_Bit = 0;
    38e2:	e1 e2       	ldi	r30, 0x21	; 33
    38e4:	f0 e0       	ldi	r31, 0x00	; 0
    38e6:	80 81       	ld	r24, Z
    38e8:	8e 7f       	andi	r24, 0xFE	; 254
    38ea:	80 83       	st	Z, r24
		TWSR_REG.Bits.TWPS1_Bit = 1;
    38ec:	e1 e2       	ldi	r30, 0x21	; 33
    38ee:	f0 e0       	ldi	r31, 0x00	; 0
    38f0:	80 81       	ld	r24, Z
    38f2:	82 60       	ori	r24, 0x02	; 2
    38f4:	80 83       	st	Z, r24
    38f6:	0d c0       	rjmp	.+26     	; 0x3912 <TWI_init+0xc2>
		break;
	case TWI_PRESCALER_64:
		TWBR_REG.Byte = 0x00;
    38f8:	e0 e2       	ldi	r30, 0x20	; 32
    38fa:	f0 e0       	ldi	r31, 0x00	; 0
    38fc:	10 82       	st	Z, r1
		TWSR_REG.Bits.TWPS0_Bit = 1;
    38fe:	e1 e2       	ldi	r30, 0x21	; 33
    3900:	f0 e0       	ldi	r31, 0x00	; 0
    3902:	80 81       	ld	r24, Z
    3904:	81 60       	ori	r24, 0x01	; 1
    3906:	80 83       	st	Z, r24
		TWSR_REG.Bits.TWPS1_Bit = 1;
    3908:	e1 e2       	ldi	r30, 0x21	; 33
    390a:	f0 e0       	ldi	r31, 0x00	; 0
    390c:	80 81       	ld	r24, Z
    390e:	82 60       	ori	r24, 0x02	; 2
    3910:	80 83       	st	Z, r24
		break;
	}

	/* Insert the required address in TWAR salve address register */
	TWAR_REG.Byte = ((Config_Ptr->Address) << 1);
    3912:	a2 e2       	ldi	r26, 0x22	; 34
    3914:	b0 e0       	ldi	r27, 0x00	; 0
    3916:	e9 81       	ldd	r30, Y+1	; 0x01
    3918:	fa 81       	ldd	r31, Y+2	; 0x02
    391a:	80 81       	ld	r24, Z
    391c:	88 0f       	add	r24, r24
    391e:	8c 93       	st	X, r24

	/* Enable TWI */
	TWCR_REG.Bits.TWEN_Bit = 1;
    3920:	e6 e5       	ldi	r30, 0x56	; 86
    3922:	f0 e0       	ldi	r31, 0x00	; 0
    3924:	80 81       	ld	r24, Z
    3926:	84 60       	ori	r24, 0x04	; 4
    3928:	80 83       	st	Z, r24
}
    392a:	0f 90       	pop	r0
    392c:	0f 90       	pop	r0
    392e:	0f 90       	pop	r0
    3930:	0f 90       	pop	r0
    3932:	cf 91       	pop	r28
    3934:	df 91       	pop	r29
    3936:	08 95       	ret

00003938 <TWI_start>:

/*
 * Description : Function to send start bit to the frame.
 */
void TWI_start(void) {
    3938:	df 93       	push	r29
    393a:	cf 93       	push	r28
    393c:	cd b7       	in	r28, 0x3d	; 61
    393e:	de b7       	in	r29, 0x3e	; 62
	 * TWSTO  = 0 We don't need to generate stop condition in generate start condition mode
	 * TWSTA  = 1 generating start condition
	 * TWEA   = 0 We don't need to generate acknowledge pulse in generate start condition mode
	 * TWINT  = 1 Clear the TWINT flag before reading the data
	 ***********************************************************************/
	TWCR_REG.Byte = 0xA4;
    3940:	e6 e5       	ldi	r30, 0x56	; 86
    3942:	f0 e0       	ldi	r31, 0x00	; 0
    3944:	84 ea       	ldi	r24, 0xA4	; 164
    3946:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while (TWCR_REG.Bits.TWINT_Bit == 0);
    3948:	e6 e5       	ldi	r30, 0x56	; 86
    394a:	f0 e0       	ldi	r31, 0x00	; 0
    394c:	80 81       	ld	r24, Z
    394e:	80 78       	andi	r24, 0x80	; 128
    3950:	88 23       	and	r24, r24
    3952:	d1 f3       	breq	.-12     	; 0x3948 <TWI_start+0x10>
}
    3954:	cf 91       	pop	r28
    3956:	df 91       	pop	r29
    3958:	08 95       	ret

0000395a <TWI_stop>:

/*
 * Description : Function to send stop bit to the frame.
 */
void TWI_stop(void) {
    395a:	df 93       	push	r29
    395c:	cf 93       	push	r28
    395e:	cd b7       	in	r28, 0x3d	; 61
    3960:	de b7       	in	r29, 0x3e	; 62
	 * TWSTO  = 1 generating stop condition
	 * TWSTA  = 0 We don't need to generate start condition in generate stop condition mode
	 * TWEA   = 0 We don't need to generate acknowledge pulse in generate stop condition mode
	 * TWINT  = 1 Clear the TWINT flag before reading the data
	 ***********************************************************************/
	TWCR_REG.Byte = 0x94;
    3962:	e6 e5       	ldi	r30, 0x56	; 86
    3964:	f0 e0       	ldi	r31, 0x00	; 0
    3966:	84 e9       	ldi	r24, 0x94	; 148
    3968:	80 83       	st	Z, r24
}
    396a:	cf 91       	pop	r28
    396c:	df 91       	pop	r29
    396e:	08 95       	ret

00003970 <TWI_writeByte>:

/*
 * Description : Function to write a data on TWI data Register and send it.
 */
void TWI_writeByte(uint8 data) {
    3970:	df 93       	push	r29
    3972:	cf 93       	push	r28
    3974:	0f 92       	push	r0
    3976:	cd b7       	in	r28, 0x3d	; 61
    3978:	de b7       	in	r29, 0x3e	; 62
    397a:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR_REG.Byte = data;
    397c:	e3 e2       	ldi	r30, 0x23	; 35
    397e:	f0 e0       	ldi	r31, 0x00	; 0
    3980:	89 81       	ldd	r24, Y+1	; 0x01
    3982:	80 83       	st	Z, r24
	 * TWSTO  = 0 We don't need to generate stop condition in send data mode
	 * TWSTA  = 0 We don't need to generate start condition in send data mode
	 * TWEA   = 0 We don't need to generate acknowledge pulse in send data mode
	 * TWINT  = 1 Clear the TWINT flag before reading the data
	 ***********************************************************************/
	TWCR_REG.Byte = 0x84;
    3984:	e6 e5       	ldi	r30, 0x56	; 86
    3986:	f0 e0       	ldi	r31, 0x00	; 0
    3988:	84 e8       	ldi	r24, 0x84	; 132
    398a:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while (TWCR_REG.Bits.TWINT_Bit == 0);
    398c:	e6 e5       	ldi	r30, 0x56	; 86
    398e:	f0 e0       	ldi	r31, 0x00	; 0
    3990:	80 81       	ld	r24, Z
    3992:	80 78       	andi	r24, 0x80	; 128
    3994:	88 23       	and	r24, r24
    3996:	d1 f3       	breq	.-12     	; 0x398c <TWI_writeByte+0x1c>
}
    3998:	0f 90       	pop	r0
    399a:	cf 91       	pop	r28
    399c:	df 91       	pop	r29
    399e:	08 95       	ret

000039a0 <TWI_readByteWithACK>:

/*
 * Description : Function to read a data and send ACK after reading.
 */
uint8 TWI_readByteWithACK(void) {
    39a0:	df 93       	push	r29
    39a2:	cf 93       	push	r28
    39a4:	cd b7       	in	r28, 0x3d	; 61
    39a6:	de b7       	in	r29, 0x3e	; 62
	 * TWSTO  = 0 We don't need to generate stop condition in receive mode
	 * TWSTA  = 0 We don't need to generate start condition in receive mode
	 * TWEA   = 1 generating acknowledge pulse
	 * TWINT  = 1 Clear the TWINT flag before reading the data
	 ***********************************************************************/
	TWCR_REG.Byte = 0XC4;
    39a8:	e6 e5       	ldi	r30, 0x56	; 86
    39aa:	f0 e0       	ldi	r31, 0x00	; 0
    39ac:	84 ec       	ldi	r24, 0xC4	; 196
    39ae:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (TWCR_REG.Bits.TWINT_Bit == 0);
    39b0:	e6 e5       	ldi	r30, 0x56	; 86
    39b2:	f0 e0       	ldi	r31, 0x00	; 0
    39b4:	80 81       	ld	r24, Z
    39b6:	80 78       	andi	r24, 0x80	; 128
    39b8:	88 23       	and	r24, r24
    39ba:	d1 f3       	breq	.-12     	; 0x39b0 <TWI_readByteWithACK+0x10>
	/* Read Data */
	return (TWDR_REG.Byte);
    39bc:	e3 e2       	ldi	r30, 0x23	; 35
    39be:	f0 e0       	ldi	r31, 0x00	; 0
    39c0:	80 81       	ld	r24, Z
}
    39c2:	cf 91       	pop	r28
    39c4:	df 91       	pop	r29
    39c6:	08 95       	ret

000039c8 <TWI_readByteWithNACK>:

/*
 * Description : Function to read a data and send NACK after reading.
 */
uint8 TWI_readByteWithNACK(void) {
    39c8:	df 93       	push	r29
    39ca:	cf 93       	push	r28
    39cc:	cd b7       	in	r28, 0x3d	; 61
    39ce:	de b7       	in	r29, 0x3e	; 62
	 * TWSTO  = 0 We don't need to generate stop condition in receive mode
	 * TWSTA  = 0 We don't need to generate start condition in receive mode
	 * TWEA   = 0 We don't need to generate acknowledge pulse as we are in receive mode with NACK
	 * TWINT  = 1 Clear the TWINT flag before reading the data
	 ***********************************************************************/
	TWCR_REG.Byte = 0x84;
    39d0:	e6 e5       	ldi	r30, 0x56	; 86
    39d2:	f0 e0       	ldi	r31, 0x00	; 0
    39d4:	84 e8       	ldi	r24, 0x84	; 132
    39d6:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (TWCR_REG.Bits.TWINT_Bit == 0);
    39d8:	e6 e5       	ldi	r30, 0x56	; 86
    39da:	f0 e0       	ldi	r31, 0x00	; 0
    39dc:	80 81       	ld	r24, Z
    39de:	80 78       	andi	r24, 0x80	; 128
    39e0:	88 23       	and	r24, r24
    39e2:	d1 f3       	breq	.-12     	; 0x39d8 <TWI_readByteWithNACK+0x10>
	/* Read Data */
	return (TWDR_REG.Byte);
    39e4:	e3 e2       	ldi	r30, 0x23	; 35
    39e6:	f0 e0       	ldi	r31, 0x00	; 0
    39e8:	80 81       	ld	r24, Z
}
    39ea:	cf 91       	pop	r28
    39ec:	df 91       	pop	r29
    39ee:	08 95       	ret

000039f0 <TWI_getStatus>:

/*
 * Description : Function to get the TWSR register value(status).
 */
uint8 TWI_getStatus(void) {
    39f0:	df 93       	push	r29
    39f2:	cf 93       	push	r28
    39f4:	0f 92       	push	r0
    39f6:	cd b7       	in	r28, 0x3d	; 61
    39f8:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = (TWSR_REG.Byte) & 0xF8;
    39fa:	e1 e2       	ldi	r30, 0x21	; 33
    39fc:	f0 e0       	ldi	r31, 0x00	; 0
    39fe:	80 81       	ld	r24, Z
    3a00:	88 7f       	andi	r24, 0xF8	; 248
    3a02:	89 83       	std	Y+1, r24	; 0x01
	return status;
    3a04:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a06:	0f 90       	pop	r0
    3a08:	cf 91       	pop	r28
    3a0a:	df 91       	pop	r29
    3a0c:	08 95       	ret

00003a0e <UART_init>:
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_Ptr) {
    3a0e:	df 93       	push	r29
    3a10:	cf 93       	push	r28
    3a12:	00 d0       	rcall	.+0      	; 0x3a14 <UART_init+0x6>
    3a14:	00 d0       	rcall	.+0      	; 0x3a16 <UART_init+0x8>
    3a16:	cd b7       	in	r28, 0x3d	; 61
    3a18:	de b7       	in	r29, 0x3e	; 62
    3a1a:	9c 83       	std	Y+4, r25	; 0x04
    3a1c:	8b 83       	std	Y+3, r24	; 0x03

	uint16 ubrr_value = 0;
    3a1e:	1a 82       	std	Y+2, r1	; 0x02
    3a20:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA_REG.Bits.U2X_Bit = 1;
    3a22:	eb e2       	ldi	r30, 0x2B	; 43
    3a24:	f0 e0       	ldi	r31, 0x00	; 0
    3a26:	80 81       	ld	r24, Z
    3a28:	82 60       	ori	r24, 0x02	; 2
    3a2a:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB_REG.Bits.TXEN_Bit = 1;
    3a2c:	ea e2       	ldi	r30, 0x2A	; 42
    3a2e:	f0 e0       	ldi	r31, 0x00	; 0
    3a30:	80 81       	ld	r24, Z
    3a32:	88 60       	ori	r24, 0x08	; 8
    3a34:	80 83       	st	Z, r24
	UCSRB_REG.Bits.RXEN_Bit = 1;
    3a36:	ea e2       	ldi	r30, 0x2A	; 42
    3a38:	f0 e0       	ldi	r31, 0x00	; 0
    3a3a:	80 81       	ld	r24, Z
    3a3c:	80 61       	ori	r24, 0x10	; 16
    3a3e:	80 83       	st	Z, r24

	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC_REG.Bits.URSEL_Bit = 1;
    3a40:	e0 e4       	ldi	r30, 0x40	; 64
    3a42:	f0 e0       	ldi	r31, 0x00	; 0
    3a44:	80 81       	ld	r24, Z
    3a46:	80 68       	ori	r24, 0x80	; 128
    3a48:	80 83       	st	Z, r24
	UCSRC_REG.Bits.UCPOL_Bit = 0;
    3a4a:	e0 e4       	ldi	r30, 0x40	; 64
    3a4c:	f0 e0       	ldi	r31, 0x00	; 0
    3a4e:	80 81       	ld	r24, Z
    3a50:	8e 7f       	andi	r24, 0xFE	; 254
    3a52:	80 83       	st	Z, r24

	/*
	 * insert the required mode in UMSEL bit of UCSRC Register
	 */
	UCSRC_REG.Bits.UMSEL_Bit = Config_Ptr->Mode;
    3a54:	a0 e4       	ldi	r26, 0x40	; 64
    3a56:	b0 e0       	ldi	r27, 0x00	; 0
    3a58:	eb 81       	ldd	r30, Y+3	; 0x03
    3a5a:	fc 81       	ldd	r31, Y+4	; 0x04
    3a5c:	80 81       	ld	r24, Z
    3a5e:	81 70       	andi	r24, 0x01	; 1
    3a60:	81 70       	andi	r24, 0x01	; 1
    3a62:	98 2f       	mov	r25, r24
    3a64:	92 95       	swap	r25
    3a66:	99 0f       	add	r25, r25
    3a68:	99 0f       	add	r25, r25
    3a6a:	90 7c       	andi	r25, 0xC0	; 192
    3a6c:	8c 91       	ld	r24, X
    3a6e:	8f 7b       	andi	r24, 0xBF	; 191
    3a70:	89 2b       	or	r24, r25
    3a72:	8c 93       	st	X, r24

	/*
	 * insert the required parity mode in UPM1 bit (UPM0 and UPM1) of UCSRC Register
	 */
	UCSRC_REG.Byte = (UCSRC_REG.Byte & 0xCF) | ((Config_Ptr->Parity) << 4);
    3a74:	a0 e4       	ldi	r26, 0x40	; 64
    3a76:	b0 e0       	ldi	r27, 0x00	; 0
    3a78:	e0 e4       	ldi	r30, 0x40	; 64
    3a7a:	f0 e0       	ldi	r31, 0x00	; 0
    3a7c:	80 81       	ld	r24, Z
    3a7e:	28 2f       	mov	r18, r24
    3a80:	2f 7c       	andi	r18, 0xCF	; 207
    3a82:	eb 81       	ldd	r30, Y+3	; 0x03
    3a84:	fc 81       	ldd	r31, Y+4	; 0x04
    3a86:	82 81       	ldd	r24, Z+2	; 0x02
    3a88:	88 2f       	mov	r24, r24
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	82 95       	swap	r24
    3a8e:	92 95       	swap	r25
    3a90:	90 7f       	andi	r25, 0xF0	; 240
    3a92:	98 27       	eor	r25, r24
    3a94:	80 7f       	andi	r24, 0xF0	; 240
    3a96:	98 27       	eor	r25, r24
    3a98:	82 2b       	or	r24, r18
    3a9a:	8c 93       	st	X, r24

	/*
	 * insert the required stop bit in USBS bit of UCSRC Register
	 */
	UCSRC_REG.Bits.USBS_Bit = Config_Ptr->Stop_Bit;
    3a9c:	a0 e4       	ldi	r26, 0x40	; 64
    3a9e:	b0 e0       	ldi	r27, 0x00	; 0
    3aa0:	eb 81       	ldd	r30, Y+3	; 0x03
    3aa2:	fc 81       	ldd	r31, Y+4	; 0x04
    3aa4:	83 81       	ldd	r24, Z+3	; 0x03
    3aa6:	81 70       	andi	r24, 0x01	; 1
    3aa8:	81 70       	andi	r24, 0x01	; 1
    3aaa:	98 2f       	mov	r25, r24
    3aac:	99 0f       	add	r25, r25
    3aae:	99 0f       	add	r25, r25
    3ab0:	99 0f       	add	r25, r25
    3ab2:	8c 91       	ld	r24, X
    3ab4:	87 7f       	andi	r24, 0xF7	; 247
    3ab6:	89 2b       	or	r24, r25
    3ab8:	8c 93       	st	X, r24

	/*
	 * insert the required character size in UCSZ bits(UCSZ0, UCSZ1 and UCSZ2) of UCSRC and UCSRB Register
	 */
	UCSRC_REG.Byte = (UCSRC_REG.Byte & 0xF9)
    3aba:	a0 e4       	ldi	r26, 0x40	; 64
    3abc:	b0 e0       	ldi	r27, 0x00	; 0
    3abe:	e0 e4       	ldi	r30, 0x40	; 64
    3ac0:	f0 e0       	ldi	r31, 0x00	; 0
    3ac2:	80 81       	ld	r24, Z
    3ac4:	28 2f       	mov	r18, r24
    3ac6:	29 7f       	andi	r18, 0xF9	; 249
    3ac8:	eb 81       	ldd	r30, Y+3	; 0x03
    3aca:	fc 81       	ldd	r31, Y+4	; 0x04
    3acc:	81 81       	ldd	r24, Z+1	; 0x01
    3ace:	88 2f       	mov	r24, r24
    3ad0:	90 e0       	ldi	r25, 0x00	; 0
    3ad2:	88 0f       	add	r24, r24
    3ad4:	99 1f       	adc	r25, r25
    3ad6:	86 70       	andi	r24, 0x06	; 6
    3ad8:	82 2b       	or	r24, r18
    3ada:	8c 93       	st	X, r24
			| (((Config_Ptr->Bit_Size) << 1) & 0x06);

	/* Calculate the UBRR register value */
	ubrr_value = (uint16) (((F_CPU / ((Config_Ptr->Baud_Rate) * 8UL))) - 1);
    3adc:	eb 81       	ldd	r30, Y+3	; 0x03
    3ade:	fc 81       	ldd	r31, Y+4	; 0x04
    3ae0:	84 81       	ldd	r24, Z+4	; 0x04
    3ae2:	95 81       	ldd	r25, Z+5	; 0x05
    3ae4:	a6 81       	ldd	r26, Z+6	; 0x06
    3ae6:	b7 81       	ldd	r27, Z+7	; 0x07
    3ae8:	88 0f       	add	r24, r24
    3aea:	99 1f       	adc	r25, r25
    3aec:	aa 1f       	adc	r26, r26
    3aee:	bb 1f       	adc	r27, r27
    3af0:	88 0f       	add	r24, r24
    3af2:	99 1f       	adc	r25, r25
    3af4:	aa 1f       	adc	r26, r26
    3af6:	bb 1f       	adc	r27, r27
    3af8:	88 0f       	add	r24, r24
    3afa:	99 1f       	adc	r25, r25
    3afc:	aa 1f       	adc	r26, r26
    3afe:	bb 1f       	adc	r27, r27
    3b00:	9c 01       	movw	r18, r24
    3b02:	ad 01       	movw	r20, r26
    3b04:	80 e0       	ldi	r24, 0x00	; 0
    3b06:	92 e1       	ldi	r25, 0x12	; 18
    3b08:	aa e7       	ldi	r26, 0x7A	; 122
    3b0a:	b0 e0       	ldi	r27, 0x00	; 0
    3b0c:	bc 01       	movw	r22, r24
    3b0e:	cd 01       	movw	r24, r26
    3b10:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__udivmodsi4>
    3b14:	da 01       	movw	r26, r20
    3b16:	c9 01       	movw	r24, r18
    3b18:	01 97       	sbiw	r24, 0x01	; 1
    3b1a:	9a 83       	std	Y+2, r25	; 0x02
    3b1c:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH_REG = ubrr_value >> 8;
    3b1e:	e0 e4       	ldi	r30, 0x40	; 64
    3b20:	f0 e0       	ldi	r31, 0x00	; 0
    3b22:	89 81       	ldd	r24, Y+1	; 0x01
    3b24:	9a 81       	ldd	r25, Y+2	; 0x02
    3b26:	89 2f       	mov	r24, r25
    3b28:	99 27       	eor	r25, r25
    3b2a:	80 83       	st	Z, r24
	UBRRL_REG = ubrr_value;
    3b2c:	e9 e2       	ldi	r30, 0x29	; 41
    3b2e:	f0 e0       	ldi	r31, 0x00	; 0
    3b30:	89 81       	ldd	r24, Y+1	; 0x01
    3b32:	80 83       	st	Z, r24
}
    3b34:	0f 90       	pop	r0
    3b36:	0f 90       	pop	r0
    3b38:	0f 90       	pop	r0
    3b3a:	0f 90       	pop	r0
    3b3c:	cf 91       	pop	r28
    3b3e:	df 91       	pop	r29
    3b40:	08 95       	ret

00003b42 <UART_sendByte>:

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data) {
    3b42:	df 93       	push	r29
    3b44:	cf 93       	push	r28
    3b46:	0f 92       	push	r0
    3b48:	cd b7       	in	r28, 0x3d	; 61
    3b4a:	de b7       	in	r29, 0x3e	; 62
    3b4c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (UCSRA_REG.Bits.UDRE_Bit == 0) {
    3b4e:	eb e2       	ldi	r30, 0x2B	; 43
    3b50:	f0 e0       	ldi	r31, 0x00	; 0
    3b52:	80 81       	ld	r24, Z
    3b54:	80 72       	andi	r24, 0x20	; 32
    3b56:	88 23       	and	r24, r24
    3b58:	d1 f3       	breq	.-12     	; 0x3b4e <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clears the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR_REG = data;
    3b5a:	ec e2       	ldi	r30, 0x2C	; 44
    3b5c:	f0 e0       	ldi	r31, 0x00	; 0
    3b5e:	89 81       	ldd	r24, Y+1	; 0x01
    3b60:	80 83       	st	Z, r24
	/************************* Another Method *************************
	 UDR_REG = data;
	 while(BIT_IS_CLEAR(UCSRA_REG.Bits.TXC_Bit, 0)){} // Wait until the transmission is complete TXC = 1
	 SET_BIT(UCSRA_REG.Bits.TXC_Bit, 0); // Clear the TXC flag
	 *******************************************************************/
}
    3b62:	0f 90       	pop	r0
    3b64:	cf 91       	pop	r28
    3b66:	df 91       	pop	r29
    3b68:	08 95       	ret

00003b6a <UART_recieveByte>:

/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void) {
    3b6a:	df 93       	push	r29
    3b6c:	cf 93       	push	r28
    3b6e:	cd b7       	in	r28, 0x3d	; 61
    3b70:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (UCSRA_REG.Bits.RXC_Bit == 0) {
    3b72:	eb e2       	ldi	r30, 0x2B	; 43
    3b74:	f0 e0       	ldi	r31, 0x00	; 0
    3b76:	80 81       	ld	r24, Z
    3b78:	80 78       	andi	r24, 0x80	; 128
    3b7a:	88 23       	and	r24, r24
    3b7c:	d1 f3       	breq	.-12     	; 0x3b72 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR_REG;
    3b7e:	ec e2       	ldi	r30, 0x2C	; 44
    3b80:	f0 e0       	ldi	r31, 0x00	; 0
    3b82:	80 81       	ld	r24, Z
}
    3b84:	cf 91       	pop	r28
    3b86:	df 91       	pop	r29
    3b88:	08 95       	ret

00003b8a <UART_sendString>:

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str) {
    3b8a:	df 93       	push	r29
    3b8c:	cf 93       	push	r28
    3b8e:	00 d0       	rcall	.+0      	; 0x3b90 <UART_sendString+0x6>
    3b90:	0f 92       	push	r0
    3b92:	cd b7       	in	r28, 0x3d	; 61
    3b94:	de b7       	in	r29, 0x3e	; 62
    3b96:	9b 83       	std	Y+3, r25	; 0x03
    3b98:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3b9a:	19 82       	std	Y+1, r1	; 0x01
    3b9c:	0e c0       	rjmp	.+28     	; 0x3bba <UART_sendString+0x30>

	/* Send the whole string */
	while (Str[i] != '\0') {
		UART_sendByte(Str[i]);
    3b9e:	89 81       	ldd	r24, Y+1	; 0x01
    3ba0:	28 2f       	mov	r18, r24
    3ba2:	30 e0       	ldi	r19, 0x00	; 0
    3ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ba6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ba8:	fc 01       	movw	r30, r24
    3baa:	e2 0f       	add	r30, r18
    3bac:	f3 1f       	adc	r31, r19
    3bae:	80 81       	ld	r24, Z
    3bb0:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <UART_sendByte>
		i++;
    3bb4:	89 81       	ldd	r24, Y+1	; 0x01
    3bb6:	8f 5f       	subi	r24, 0xFF	; 255
    3bb8:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const uint8 *Str) {
	uint8 i = 0;

	/* Send the whole string */
	while (Str[i] != '\0') {
    3bba:	89 81       	ldd	r24, Y+1	; 0x01
    3bbc:	28 2f       	mov	r18, r24
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
    3bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc2:	9b 81       	ldd	r25, Y+3	; 0x03
    3bc4:	fc 01       	movw	r30, r24
    3bc6:	e2 0f       	add	r30, r18
    3bc8:	f3 1f       	adc	r31, r19
    3bca:	80 81       	ld	r24, Z
    3bcc:	88 23       	and	r24, r24
    3bce:	39 f7       	brne	.-50     	; 0x3b9e <UART_sendString+0x14>
	 {
	 UART_sendByte(*Str);
	 Str++;
	 }
	 *******************************************************************/
}
    3bd0:	0f 90       	pop	r0
    3bd2:	0f 90       	pop	r0
    3bd4:	0f 90       	pop	r0
    3bd6:	cf 91       	pop	r28
    3bd8:	df 91       	pop	r29
    3bda:	08 95       	ret

00003bdc <UART_receiveString>:

/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str) {
    3bdc:	0f 93       	push	r16
    3bde:	1f 93       	push	r17
    3be0:	df 93       	push	r29
    3be2:	cf 93       	push	r28
    3be4:	00 d0       	rcall	.+0      	; 0x3be6 <UART_receiveString+0xa>
    3be6:	0f 92       	push	r0
    3be8:	cd b7       	in	r28, 0x3d	; 61
    3bea:	de b7       	in	r29, 0x3e	; 62
    3bec:	9b 83       	std	Y+3, r25	; 0x03
    3bee:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3bf0:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3bf2:	89 81       	ldd	r24, Y+1	; 0x01
    3bf4:	28 2f       	mov	r18, r24
    3bf6:	30 e0       	ldi	r19, 0x00	; 0
    3bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bfa:	9b 81       	ldd	r25, Y+3	; 0x03
    3bfc:	8c 01       	movw	r16, r24
    3bfe:	02 0f       	add	r16, r18
    3c00:	13 1f       	adc	r17, r19
    3c02:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <UART_recieveByte>
    3c06:	f8 01       	movw	r30, r16
    3c08:	80 83       	st	Z, r24
    3c0a:	0f c0       	rjmp	.+30     	; 0x3c2a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while (Str[i] != '#') {
		i++;
    3c0c:	89 81       	ldd	r24, Y+1	; 0x01
    3c0e:	8f 5f       	subi	r24, 0xFF	; 255
    3c10:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3c12:	89 81       	ldd	r24, Y+1	; 0x01
    3c14:	28 2f       	mov	r18, r24
    3c16:	30 e0       	ldi	r19, 0x00	; 0
    3c18:	8a 81       	ldd	r24, Y+2	; 0x02
    3c1a:	9b 81       	ldd	r25, Y+3	; 0x03
    3c1c:	8c 01       	movw	r16, r24
    3c1e:	02 0f       	add	r16, r18
    3c20:	13 1f       	adc	r17, r19
    3c22:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <UART_recieveByte>
    3c26:	f8 01       	movw	r30, r16
    3c28:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while (Str[i] != '#') {
    3c2a:	89 81       	ldd	r24, Y+1	; 0x01
    3c2c:	28 2f       	mov	r18, r24
    3c2e:	30 e0       	ldi	r19, 0x00	; 0
    3c30:	8a 81       	ldd	r24, Y+2	; 0x02
    3c32:	9b 81       	ldd	r25, Y+3	; 0x03
    3c34:	fc 01       	movw	r30, r24
    3c36:	e2 0f       	add	r30, r18
    3c38:	f3 1f       	adc	r31, r19
    3c3a:	80 81       	ld	r24, Z
    3c3c:	83 32       	cpi	r24, 0x23	; 35
    3c3e:	31 f7       	brne	.-52     	; 0x3c0c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3c40:	89 81       	ldd	r24, Y+1	; 0x01
    3c42:	28 2f       	mov	r18, r24
    3c44:	30 e0       	ldi	r19, 0x00	; 0
    3c46:	8a 81       	ldd	r24, Y+2	; 0x02
    3c48:	9b 81       	ldd	r25, Y+3	; 0x03
    3c4a:	fc 01       	movw	r30, r24
    3c4c:	e2 0f       	add	r30, r18
    3c4e:	f3 1f       	adc	r31, r19
    3c50:	10 82       	st	Z, r1
}
    3c52:	0f 90       	pop	r0
    3c54:	0f 90       	pop	r0
    3c56:	0f 90       	pop	r0
    3c58:	cf 91       	pop	r28
    3c5a:	df 91       	pop	r29
    3c5c:	1f 91       	pop	r17
    3c5e:	0f 91       	pop	r16
    3c60:	08 95       	ret

00003c62 <__udivmodhi4>:
    3c62:	aa 1b       	sub	r26, r26
    3c64:	bb 1b       	sub	r27, r27
    3c66:	51 e1       	ldi	r21, 0x11	; 17
    3c68:	07 c0       	rjmp	.+14     	; 0x3c78 <__udivmodhi4_ep>

00003c6a <__udivmodhi4_loop>:
    3c6a:	aa 1f       	adc	r26, r26
    3c6c:	bb 1f       	adc	r27, r27
    3c6e:	a6 17       	cp	r26, r22
    3c70:	b7 07       	cpc	r27, r23
    3c72:	10 f0       	brcs	.+4      	; 0x3c78 <__udivmodhi4_ep>
    3c74:	a6 1b       	sub	r26, r22
    3c76:	b7 0b       	sbc	r27, r23

00003c78 <__udivmodhi4_ep>:
    3c78:	88 1f       	adc	r24, r24
    3c7a:	99 1f       	adc	r25, r25
    3c7c:	5a 95       	dec	r21
    3c7e:	a9 f7       	brne	.-22     	; 0x3c6a <__udivmodhi4_loop>
    3c80:	80 95       	com	r24
    3c82:	90 95       	com	r25
    3c84:	bc 01       	movw	r22, r24
    3c86:	cd 01       	movw	r24, r26
    3c88:	08 95       	ret

00003c8a <__udivmodsi4>:
    3c8a:	a1 e2       	ldi	r26, 0x21	; 33
    3c8c:	1a 2e       	mov	r1, r26
    3c8e:	aa 1b       	sub	r26, r26
    3c90:	bb 1b       	sub	r27, r27
    3c92:	fd 01       	movw	r30, r26
    3c94:	0d c0       	rjmp	.+26     	; 0x3cb0 <__udivmodsi4_ep>

00003c96 <__udivmodsi4_loop>:
    3c96:	aa 1f       	adc	r26, r26
    3c98:	bb 1f       	adc	r27, r27
    3c9a:	ee 1f       	adc	r30, r30
    3c9c:	ff 1f       	adc	r31, r31
    3c9e:	a2 17       	cp	r26, r18
    3ca0:	b3 07       	cpc	r27, r19
    3ca2:	e4 07       	cpc	r30, r20
    3ca4:	f5 07       	cpc	r31, r21
    3ca6:	20 f0       	brcs	.+8      	; 0x3cb0 <__udivmodsi4_ep>
    3ca8:	a2 1b       	sub	r26, r18
    3caa:	b3 0b       	sbc	r27, r19
    3cac:	e4 0b       	sbc	r30, r20
    3cae:	f5 0b       	sbc	r31, r21

00003cb0 <__udivmodsi4_ep>:
    3cb0:	66 1f       	adc	r22, r22
    3cb2:	77 1f       	adc	r23, r23
    3cb4:	88 1f       	adc	r24, r24
    3cb6:	99 1f       	adc	r25, r25
    3cb8:	1a 94       	dec	r1
    3cba:	69 f7       	brne	.-38     	; 0x3c96 <__udivmodsi4_loop>
    3cbc:	60 95       	com	r22
    3cbe:	70 95       	com	r23
    3cc0:	80 95       	com	r24
    3cc2:	90 95       	com	r25
    3cc4:	9b 01       	movw	r18, r22
    3cc6:	ac 01       	movw	r20, r24
    3cc8:	bd 01       	movw	r22, r26
    3cca:	cf 01       	movw	r24, r30
    3ccc:	08 95       	ret

00003cce <__prologue_saves__>:
    3cce:	2f 92       	push	r2
    3cd0:	3f 92       	push	r3
    3cd2:	4f 92       	push	r4
    3cd4:	5f 92       	push	r5
    3cd6:	6f 92       	push	r6
    3cd8:	7f 92       	push	r7
    3cda:	8f 92       	push	r8
    3cdc:	9f 92       	push	r9
    3cde:	af 92       	push	r10
    3ce0:	bf 92       	push	r11
    3ce2:	cf 92       	push	r12
    3ce4:	df 92       	push	r13
    3ce6:	ef 92       	push	r14
    3ce8:	ff 92       	push	r15
    3cea:	0f 93       	push	r16
    3cec:	1f 93       	push	r17
    3cee:	cf 93       	push	r28
    3cf0:	df 93       	push	r29
    3cf2:	cd b7       	in	r28, 0x3d	; 61
    3cf4:	de b7       	in	r29, 0x3e	; 62
    3cf6:	ca 1b       	sub	r28, r26
    3cf8:	db 0b       	sbc	r29, r27
    3cfa:	0f b6       	in	r0, 0x3f	; 63
    3cfc:	f8 94       	cli
    3cfe:	de bf       	out	0x3e, r29	; 62
    3d00:	0f be       	out	0x3f, r0	; 63
    3d02:	cd bf       	out	0x3d, r28	; 61
    3d04:	09 94       	ijmp

00003d06 <__epilogue_restores__>:
    3d06:	2a 88       	ldd	r2, Y+18	; 0x12
    3d08:	39 88       	ldd	r3, Y+17	; 0x11
    3d0a:	48 88       	ldd	r4, Y+16	; 0x10
    3d0c:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d0e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d10:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d12:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d14:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d16:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d18:	b9 84       	ldd	r11, Y+9	; 0x09
    3d1a:	c8 84       	ldd	r12, Y+8	; 0x08
    3d1c:	df 80       	ldd	r13, Y+7	; 0x07
    3d1e:	ee 80       	ldd	r14, Y+6	; 0x06
    3d20:	fd 80       	ldd	r15, Y+5	; 0x05
    3d22:	0c 81       	ldd	r16, Y+4	; 0x04
    3d24:	1b 81       	ldd	r17, Y+3	; 0x03
    3d26:	aa 81       	ldd	r26, Y+2	; 0x02
    3d28:	b9 81       	ldd	r27, Y+1	; 0x01
    3d2a:	ce 0f       	add	r28, r30
    3d2c:	d1 1d       	adc	r29, r1
    3d2e:	0f b6       	in	r0, 0x3f	; 63
    3d30:	f8 94       	cli
    3d32:	de bf       	out	0x3e, r29	; 62
    3d34:	0f be       	out	0x3f, r0	; 63
    3d36:	cd bf       	out	0x3d, r28	; 61
    3d38:	ed 01       	movw	r28, r26
    3d3a:	08 95       	ret

00003d3c <itoa>:
    3d3c:	fb 01       	movw	r30, r22
    3d3e:	9f 01       	movw	r18, r30
    3d40:	e8 94       	clt
    3d42:	42 30       	cpi	r20, 0x02	; 2
    3d44:	c4 f0       	brlt	.+48     	; 0x3d76 <itoa+0x3a>
    3d46:	45 32       	cpi	r20, 0x25	; 37
    3d48:	b4 f4       	brge	.+44     	; 0x3d76 <itoa+0x3a>
    3d4a:	4a 30       	cpi	r20, 0x0A	; 10
    3d4c:	29 f4       	brne	.+10     	; 0x3d58 <itoa+0x1c>
    3d4e:	97 fb       	bst	r25, 7
    3d50:	1e f4       	brtc	.+6      	; 0x3d58 <itoa+0x1c>
    3d52:	90 95       	com	r25
    3d54:	81 95       	neg	r24
    3d56:	9f 4f       	sbci	r25, 0xFF	; 255
    3d58:	64 2f       	mov	r22, r20
    3d5a:	77 27       	eor	r23, r23
    3d5c:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__udivmodhi4>
    3d60:	80 5d       	subi	r24, 0xD0	; 208
    3d62:	8a 33       	cpi	r24, 0x3A	; 58
    3d64:	0c f0       	brlt	.+2      	; 0x3d68 <itoa+0x2c>
    3d66:	89 5d       	subi	r24, 0xD9	; 217
    3d68:	81 93       	st	Z+, r24
    3d6a:	cb 01       	movw	r24, r22
    3d6c:	00 97       	sbiw	r24, 0x00	; 0
    3d6e:	a1 f7       	brne	.-24     	; 0x3d58 <itoa+0x1c>
    3d70:	16 f4       	brtc	.+4      	; 0x3d76 <itoa+0x3a>
    3d72:	5d e2       	ldi	r21, 0x2D	; 45
    3d74:	51 93       	st	Z+, r21
    3d76:	10 82       	st	Z, r1
    3d78:	c9 01       	movw	r24, r18
    3d7a:	0c 94 bf 1e 	jmp	0x3d7e	; 0x3d7e <strrev>

00003d7e <strrev>:
    3d7e:	dc 01       	movw	r26, r24
    3d80:	fc 01       	movw	r30, r24
    3d82:	67 2f       	mov	r22, r23
    3d84:	71 91       	ld	r23, Z+
    3d86:	77 23       	and	r23, r23
    3d88:	e1 f7       	brne	.-8      	; 0x3d82 <strrev+0x4>
    3d8a:	32 97       	sbiw	r30, 0x02	; 2
    3d8c:	04 c0       	rjmp	.+8      	; 0x3d96 <strrev+0x18>
    3d8e:	7c 91       	ld	r23, X
    3d90:	6d 93       	st	X+, r22
    3d92:	70 83       	st	Z, r23
    3d94:	62 91       	ld	r22, -Z
    3d96:	ae 17       	cp	r26, r30
    3d98:	bf 07       	cpc	r27, r31
    3d9a:	c8 f3       	brcs	.-14     	; 0x3d8e <strrev+0x10>
    3d9c:	08 95       	ret

00003d9e <_exit>:
    3d9e:	f8 94       	cli

00003da0 <__stop_program>:
    3da0:	ff cf       	rjmp	.-2      	; 0x3da0 <__stop_program>
