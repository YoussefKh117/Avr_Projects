
HMI_ECU_CODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000445e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001fa  00800060  0000445e  000044f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080025a  0080025a  000046ec  2**0
                  ALLOC
  3 .stab         00004764  00000000  00000000  000046ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000309f  00000000  00000000  00008e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000beef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000c02f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000c19f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000dde8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ecd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000fa80  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000fbe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000fe6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001063b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 c4 1b 	jmp	0x3788	; 0x3788 <__vector_4>
      14:	0c 94 91 1b 	jmp	0x3722	; 0x3722 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 5e 1b 	jmp	0x36bc	; 0x36bc <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 2b 1b 	jmp	0x3656	; 0x3656 <__vector_9>
      28:	0c 94 f8 1a 	jmp	0x35f0	; 0x35f0 <__vector_10>
      2c:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e5       	ldi	r30, 0x5E	; 94
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 35       	cpi	r26, 0x5A	; 90
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa e5       	ldi	r26, 0x5A	; 90
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 36       	cpi	r26, 0x61	; 97
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 72 09 	call	0x12e4	; 0x12e4 <main>
      8a:	0c 94 2d 22 	jmp	0x445a	; 0x445a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c5 21 	jmp	0x438a	; 0x438a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e4       	ldi	r26, 0x42	; 66
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e1 21 	jmp	0x43c2	; 0x43c2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d1 21 	jmp	0x43a2	; 0x43a2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d1 21 	jmp	0x43a2	; 0x43a2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c5 21 	jmp	0x438a	; 0x438a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e4       	ldi	r24, 0x42	; 66
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e1 21 	jmp	0x43c2	; 0x43c2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d1 21 	jmp	0x43a2	; 0x43a2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d1 21 	jmp	0x43a2	; 0x43a2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d1 21 	jmp	0x43a2	; 0x43a2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d5 21 	jmp	0x43aa	; 0x43aa <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f1 21 	jmp	0x43e2	; 0x43e2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:

/*
 * Function: Buzzer_init
 * Description: Initializes the buzzer pin direction and turns off the buzzer.
 */
void Buzzer_init(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
    // Set the buzzer pin direction to output
    GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	63 e0       	ldi	r22, 0x03	; 3
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 2e 06 	call	0xc5c	; 0xc5c <GPIO_setupPinDirection>

    // Turn off the buzzer initially
    GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	63 e0       	ldi	r22, 0x03	; 3
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 19 07 	call	0xe32	; 0xe32 <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_on>:
/*
 * Function: Buzzer_on
 * Description: Activates the buzzer.
 */

void Buzzer_on(void) {
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
    // Set the buzzer pin to high to activate the buzzer
    GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	63 e0       	ldi	r22, 0x03	; 3
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 19 07 	call	0xe32	; 0xe32 <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_off>:
/*
 * Function: Buzzer_off
 * Description: Deactivates the buzzer.
 */

void Buzzer_off(void) {
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
    // Set the buzzer pin to low to deactivate the buzzer
    GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	63 e0       	ldi	r22, 0x03	; 3
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 19 07 	call	0xe32	; 0xe32 <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <DC_Motor_Init>:

#include "DC_Motor.h"
#include "common_macros.h"
#include "Timer0_PWM.h"
#include "GPIO.h"
void DC_Motor_Init() {
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
	/* Set first two pins as output */
	GPIO_setupPinDirection(DC_MOTOR_PORT, IN1, PIN_OUTPUT);
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	41 e0       	ldi	r20, 0x01	; 1
     ba6:	0e 94 2e 06 	call	0xc5c	; 0xc5c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT, IN2, PIN_OUTPUT);
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	0e 94 2e 06 	call	0xc5c	; 0xc5c <GPIO_setupPinDirection>

	/* Set IN1,IN2 to low (motor off) at beggining */
	GPIO_writePin(DC_MOTOR_PORT, IN1, LOGIC_LOW);
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	0e 94 19 07 	call	0xe32	; 0xe32 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT, IN2, LOGIC_LOW);
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	61 e0       	ldi	r22, 0x01	; 1
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	0e 94 19 07 	call	0xe32	; 0xe32 <GPIO_writePin>
}
     bc8:	cf 91       	pop	r28
     bca:	df 91       	pop	r29
     bcc:	08 95       	ret

00000bce <DC_Motor_Rotate>:
void DC_Motor_Rotate(DcMotor_State state, uint8 speed) {
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	00 d0       	rcall	.+0      	; 0xbd4 <DC_Motor_Rotate+0x6>
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <DC_Motor_Rotate+0x8>
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	89 83       	std	Y+1, r24	; 0x01
     bdc:	6a 83       	std	Y+2, r22	; 0x02

	/** Ensure speed is between 0 and 100 */
	if (speed > 100) {
     bde:	8a 81       	ldd	r24, Y+2	; 0x02
     be0:	85 36       	cpi	r24, 0x65	; 101
     be2:	10 f0       	brcs	.+4      	; 0xbe8 <DC_Motor_Rotate+0x1a>
		speed = 100; /** Cap the speed to 100% */
     be4:	84 e6       	ldi	r24, 0x64	; 100
     be6:	8a 83       	std	Y+2, r24	; 0x02
	}

	/*Set speed for the motor*/
	PWM_Set_Duty_Cycle(speed);
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <PWM_Set_Duty_Cycle>

	/** Set motor control pins based on the desired rotation direction */
	switch (state) {
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	28 2f       	mov	r18, r24
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	3c 83       	std	Y+4, r19	; 0x04
     bf6:	2b 83       	std	Y+3, r18	; 0x03
     bf8:	8b 81       	ldd	r24, Y+3	; 0x03
     bfa:	9c 81       	ldd	r25, Y+4	; 0x04
     bfc:	81 30       	cpi	r24, 0x01	; 1
     bfe:	91 05       	cpc	r25, r1
     c00:	31 f0       	breq	.+12     	; 0xc0e <DC_Motor_Rotate+0x40>
     c02:	2b 81       	ldd	r18, Y+3	; 0x03
     c04:	3c 81       	ldd	r19, Y+4	; 0x04
     c06:	22 30       	cpi	r18, 0x02	; 2
     c08:	31 05       	cpc	r19, r1
     c0a:	61 f0       	breq	.+24     	; 0xc24 <DC_Motor_Rotate+0x56>
     c0c:	16 c0       	rjmp	.+44     	; 0xc3a <DC_Motor_Rotate+0x6c>
	case ClockWise:
		GPIO_writePin(DC_MOTOR_PORT, IN1, LOGIC_HIGH); /** Set IN1 high for clockwise */
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	41 e0       	ldi	r20, 0x01	; 1
     c14:	0e 94 19 07 	call	0xe32	; 0xe32 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT, IN2, LOGIC_LOW); /** Set IN2 low */
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	61 e0       	ldi	r22, 0x01	; 1
     c1c:	40 e0       	ldi	r20, 0x00	; 0
     c1e:	0e 94 19 07 	call	0xe32	; 0xe32 <GPIO_writePin>
     c22:	15 c0       	rjmp	.+42     	; 0xc4e <DC_Motor_Rotate+0x80>
		break;

	case Anti_ClockWise:
		GPIO_writePin(DC_MOTOR_PORT, IN1, LOGIC_LOW); /** Set IN1 low for anti-clockwise */
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	40 e0       	ldi	r20, 0x00	; 0
     c2a:	0e 94 19 07 	call	0xe32	; 0xe32 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT, IN2, LOGIC_HIGH); /** Set IN2 high */
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	61 e0       	ldi	r22, 0x01	; 1
     c32:	41 e0       	ldi	r20, 0x01	; 1
     c34:	0e 94 19 07 	call	0xe32	; 0xe32 <GPIO_writePin>
     c38:	0a c0       	rjmp	.+20     	; 0xc4e <DC_Motor_Rotate+0x80>
		break;

	case Stop:
	default:
		GPIO_writePin(DC_MOTOR_PORT, IN1, LOGIC_LOW); /** Set IN1 low to stop */
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	60 e0       	ldi	r22, 0x00	; 0
     c3e:	40 e0       	ldi	r20, 0x00	; 0
     c40:	0e 94 19 07 	call	0xe32	; 0xe32 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT, IN2, LOGIC_LOW); /** Set IN2 low to stop */
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	61 e0       	ldi	r22, 0x01	; 1
     c48:	40 e0       	ldi	r20, 0x00	; 0
     c4a:	0e 94 19 07 	call	0xe32	; 0xe32 <GPIO_writePin>
		break;
	}

}
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	cf 91       	pop	r28
     c58:	df 91       	pop	r29
     c5a:	08 95       	ret

00000c5c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,
		GPIO_PinDirectionType direction) {
     c5c:	df 93       	push	r29
     c5e:	cf 93       	push	r28
     c60:	00 d0       	rcall	.+0      	; 0xc62 <GPIO_setupPinDirection+0x6>
     c62:	00 d0       	rcall	.+0      	; 0xc64 <GPIO_setupPinDirection+0x8>
     c64:	0f 92       	push	r0
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
     c6a:	89 83       	std	Y+1, r24	; 0x01
     c6c:	6a 83       	std	Y+2, r22	; 0x02
     c6e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	88 30       	cpi	r24, 0x08	; 8
     c74:	08 f0       	brcs	.+2      	; 0xc78 <GPIO_setupPinDirection+0x1c>
     c76:	d5 c0       	rjmp	.+426    	; 0xe22 <GPIO_setupPinDirection+0x1c6>
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	84 30       	cpi	r24, 0x04	; 4
     c7c:	08 f0       	brcs	.+2      	; 0xc80 <GPIO_setupPinDirection+0x24>
     c7e:	d1 c0       	rjmp	.+418    	; 0xe22 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	} else {
		/* Setup the pin direction as required */
		switch (port_num) {
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	28 2f       	mov	r18, r24
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	3d 83       	std	Y+5, r19	; 0x05
     c88:	2c 83       	std	Y+4, r18	; 0x04
     c8a:	8c 81       	ldd	r24, Y+4	; 0x04
     c8c:	9d 81       	ldd	r25, Y+5	; 0x05
     c8e:	81 30       	cpi	r24, 0x01	; 1
     c90:	91 05       	cpc	r25, r1
     c92:	09 f4       	brne	.+2      	; 0xc96 <GPIO_setupPinDirection+0x3a>
     c94:	43 c0       	rjmp	.+134    	; 0xd1c <GPIO_setupPinDirection+0xc0>
     c96:	2c 81       	ldd	r18, Y+4	; 0x04
     c98:	3d 81       	ldd	r19, Y+5	; 0x05
     c9a:	22 30       	cpi	r18, 0x02	; 2
     c9c:	31 05       	cpc	r19, r1
     c9e:	2c f4       	brge	.+10     	; 0xcaa <GPIO_setupPinDirection+0x4e>
     ca0:	8c 81       	ldd	r24, Y+4	; 0x04
     ca2:	9d 81       	ldd	r25, Y+5	; 0x05
     ca4:	00 97       	sbiw	r24, 0x00	; 0
     ca6:	71 f0       	breq	.+28     	; 0xcc4 <GPIO_setupPinDirection+0x68>
     ca8:	bc c0       	rjmp	.+376    	; 0xe22 <GPIO_setupPinDirection+0x1c6>
     caa:	2c 81       	ldd	r18, Y+4	; 0x04
     cac:	3d 81       	ldd	r19, Y+5	; 0x05
     cae:	22 30       	cpi	r18, 0x02	; 2
     cb0:	31 05       	cpc	r19, r1
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <GPIO_setupPinDirection+0x5a>
     cb4:	5f c0       	rjmp	.+190    	; 0xd74 <GPIO_setupPinDirection+0x118>
     cb6:	8c 81       	ldd	r24, Y+4	; 0x04
     cb8:	9d 81       	ldd	r25, Y+5	; 0x05
     cba:	83 30       	cpi	r24, 0x03	; 3
     cbc:	91 05       	cpc	r25, r1
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <GPIO_setupPinDirection+0x66>
     cc0:	85 c0       	rjmp	.+266    	; 0xdcc <GPIO_setupPinDirection+0x170>
     cc2:	af c0       	rjmp	.+350    	; 0xe22 <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if (direction == PIN_OUTPUT) {
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	a1 f4       	brne	.+40     	; 0xcf2 <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA_REG.Byte, pin_num);
     cca:	aa e3       	ldi	r26, 0x3A	; 58
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	ea e3       	ldi	r30, 0x3A	; 58
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	48 2f       	mov	r20, r24
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	02 2e       	mov	r0, r18
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <GPIO_setupPinDirection+0x8c>
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	0a 94       	dec	r0
     cea:	e2 f7       	brpl	.-8      	; 0xce4 <GPIO_setupPinDirection+0x88>
     cec:	84 2b       	or	r24, r20
     cee:	8c 93       	st	X, r24
     cf0:	98 c0       	rjmp	.+304    	; 0xe22 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRA_REG.Byte, pin_num);
     cf2:	aa e3       	ldi	r26, 0x3A	; 58
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	ea e3       	ldi	r30, 0x3A	; 58
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	48 2f       	mov	r20, r24
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	02 2e       	mov	r0, r18
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <GPIO_setupPinDirection+0xb4>
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	0a 94       	dec	r0
     d12:	e2 f7       	brpl	.-8      	; 0xd0c <GPIO_setupPinDirection+0xb0>
     d14:	80 95       	com	r24
     d16:	84 23       	and	r24, r20
     d18:	8c 93       	st	X, r24
     d1a:	83 c0       	rjmp	.+262    	; 0xe22 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT) {
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	a1 f4       	brne	.+40     	; 0xd4a <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB_REG.Byte, pin_num);
     d22:	a7 e3       	ldi	r26, 0x37	; 55
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e7 e3       	ldi	r30, 0x37	; 55
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	48 2f       	mov	r20, r24
     d2e:	8a 81       	ldd	r24, Y+2	; 0x02
     d30:	28 2f       	mov	r18, r24
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	02 2e       	mov	r0, r18
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <GPIO_setupPinDirection+0xe4>
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	0a 94       	dec	r0
     d42:	e2 f7       	brpl	.-8      	; 0xd3c <GPIO_setupPinDirection+0xe0>
     d44:	84 2b       	or	r24, r20
     d46:	8c 93       	st	X, r24
     d48:	6c c0       	rjmp	.+216    	; 0xe22 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRB_REG.Byte, pin_num);
     d4a:	a7 e3       	ldi	r26, 0x37	; 55
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e7 e3       	ldi	r30, 0x37	; 55
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	48 2f       	mov	r20, r24
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	02 2e       	mov	r0, r18
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <GPIO_setupPinDirection+0x10c>
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	0a 94       	dec	r0
     d6a:	e2 f7       	brpl	.-8      	; 0xd64 <GPIO_setupPinDirection+0x108>
     d6c:	80 95       	com	r24
     d6e:	84 23       	and	r24, r20
     d70:	8c 93       	st	X, r24
     d72:	57 c0       	rjmp	.+174    	; 0xe22 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT) {
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	a1 f4       	brne	.+40     	; 0xda2 <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC_REG.Byte, pin_num);
     d7a:	a4 e3       	ldi	r26, 0x34	; 52
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e4 e3       	ldi	r30, 0x34	; 52
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	48 2f       	mov	r20, r24
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	02 2e       	mov	r0, r18
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <GPIO_setupPinDirection+0x13c>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	0a 94       	dec	r0
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <GPIO_setupPinDirection+0x138>
     d9c:	84 2b       	or	r24, r20
     d9e:	8c 93       	st	X, r24
     da0:	40 c0       	rjmp	.+128    	; 0xe22 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRC_REG.Byte, pin_num);
     da2:	a4 e3       	ldi	r26, 0x34	; 52
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	e4 e3       	ldi	r30, 0x34	; 52
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	48 2f       	mov	r20, r24
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	02 2e       	mov	r0, r18
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <GPIO_setupPinDirection+0x164>
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	0a 94       	dec	r0
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <GPIO_setupPinDirection+0x160>
     dc4:	80 95       	com	r24
     dc6:	84 23       	and	r24, r20
     dc8:	8c 93       	st	X, r24
     dca:	2b c0       	rjmp	.+86     	; 0xe22 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT) {
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	81 30       	cpi	r24, 0x01	; 1
     dd0:	a1 f4       	brne	.+40     	; 0xdfa <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD_REG.Byte, pin_num);
     dd2:	a1 e3       	ldi	r26, 0x31	; 49
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e1 e3       	ldi	r30, 0x31	; 49
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	48 2f       	mov	r20, r24
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	02 2e       	mov	r0, r18
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <GPIO_setupPinDirection+0x194>
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	0a 94       	dec	r0
     df2:	e2 f7       	brpl	.-8      	; 0xdec <GPIO_setupPinDirection+0x190>
     df4:	84 2b       	or	r24, r20
     df6:	8c 93       	st	X, r24
     df8:	14 c0       	rjmp	.+40     	; 0xe22 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRD_REG.Byte, pin_num);
     dfa:	a1 e3       	ldi	r26, 0x31	; 49
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e1 e3       	ldi	r30, 0x31	; 49
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	48 2f       	mov	r20, r24
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	02 2e       	mov	r0, r18
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <GPIO_setupPinDirection+0x1bc>
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	0a 94       	dec	r0
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <GPIO_setupPinDirection+0x1b8>
     e1c:	80 95       	com	r24
     e1e:	84 23       	and	r24, r20
     e20:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	cf 91       	pop	r28
     e2e:	df 91       	pop	r29
     e30:	08 95       	ret

00000e32 <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	00 d0       	rcall	.+0      	; 0xe38 <GPIO_writePin+0x6>
     e38:	00 d0       	rcall	.+0      	; 0xe3a <GPIO_writePin+0x8>
     e3a:	0f 92       	push	r0
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	89 83       	std	Y+1, r24	; 0x01
     e42:	6a 83       	std	Y+2, r22	; 0x02
     e44:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	88 30       	cpi	r24, 0x08	; 8
     e4a:	08 f0       	brcs	.+2      	; 0xe4e <GPIO_writePin+0x1c>
     e4c:	d5 c0       	rjmp	.+426    	; 0xff8 <GPIO_writePin+0x1c6>
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	84 30       	cpi	r24, 0x04	; 4
     e52:	08 f0       	brcs	.+2      	; 0xe56 <GPIO_writePin+0x24>
     e54:	d1 c0       	rjmp	.+418    	; 0xff8 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	} else {
		/* Setup the pin value as required */
		switch (port_num) {
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	3d 83       	std	Y+5, r19	; 0x05
     e5e:	2c 83       	std	Y+4, r18	; 0x04
     e60:	8c 81       	ldd	r24, Y+4	; 0x04
     e62:	9d 81       	ldd	r25, Y+5	; 0x05
     e64:	81 30       	cpi	r24, 0x01	; 1
     e66:	91 05       	cpc	r25, r1
     e68:	09 f4       	brne	.+2      	; 0xe6c <GPIO_writePin+0x3a>
     e6a:	43 c0       	rjmp	.+134    	; 0xef2 <GPIO_writePin+0xc0>
     e6c:	2c 81       	ldd	r18, Y+4	; 0x04
     e6e:	3d 81       	ldd	r19, Y+5	; 0x05
     e70:	22 30       	cpi	r18, 0x02	; 2
     e72:	31 05       	cpc	r19, r1
     e74:	2c f4       	brge	.+10     	; 0xe80 <GPIO_writePin+0x4e>
     e76:	8c 81       	ldd	r24, Y+4	; 0x04
     e78:	9d 81       	ldd	r25, Y+5	; 0x05
     e7a:	00 97       	sbiw	r24, 0x00	; 0
     e7c:	71 f0       	breq	.+28     	; 0xe9a <GPIO_writePin+0x68>
     e7e:	bc c0       	rjmp	.+376    	; 0xff8 <GPIO_writePin+0x1c6>
     e80:	2c 81       	ldd	r18, Y+4	; 0x04
     e82:	3d 81       	ldd	r19, Y+5	; 0x05
     e84:	22 30       	cpi	r18, 0x02	; 2
     e86:	31 05       	cpc	r19, r1
     e88:	09 f4       	brne	.+2      	; 0xe8c <GPIO_writePin+0x5a>
     e8a:	5f c0       	rjmp	.+190    	; 0xf4a <GPIO_writePin+0x118>
     e8c:	8c 81       	ldd	r24, Y+4	; 0x04
     e8e:	9d 81       	ldd	r25, Y+5	; 0x05
     e90:	83 30       	cpi	r24, 0x03	; 3
     e92:	91 05       	cpc	r25, r1
     e94:	09 f4       	brne	.+2      	; 0xe98 <GPIO_writePin+0x66>
     e96:	85 c0       	rjmp	.+266    	; 0xfa2 <GPIO_writePin+0x170>
     e98:	af c0       	rjmp	.+350    	; 0xff8 <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if (value == LOGIC_LOW) {
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	88 23       	and	r24, r24
     e9e:	a9 f4       	brne	.+42     	; 0xeca <GPIO_writePin+0x98>
				CLEAR_BIT(PORTA_REG.Byte, pin_num);
     ea0:	ab e3       	ldi	r26, 0x3B	; 59
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	eb e3       	ldi	r30, 0x3B	; 59
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	48 2f       	mov	r20, r24
     eac:	8a 81       	ldd	r24, Y+2	; 0x02
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	02 2e       	mov	r0, r18
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <GPIO_writePin+0x8c>
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	0a 94       	dec	r0
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <GPIO_writePin+0x88>
     ec2:	80 95       	com	r24
     ec4:	84 23       	and	r24, r20
     ec6:	8c 93       	st	X, r24
     ec8:	97 c0       	rjmp	.+302    	; 0xff8 <GPIO_writePin+0x1c6>
			} else {
				SET_BIT(PORTA_REG.Byte, pin_num);
     eca:	ab e3       	ldi	r26, 0x3B	; 59
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	eb e3       	ldi	r30, 0x3B	; 59
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	48 2f       	mov	r20, r24
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	02 2e       	mov	r0, r18
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <GPIO_writePin+0xb6>
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	0a 94       	dec	r0
     eea:	e2 f7       	brpl	.-8      	; 0xee4 <GPIO_writePin+0xb2>
     eec:	84 2b       	or	r24, r20
     eee:	8c 93       	st	X, r24
     ef0:	83 c0       	rjmp	.+262    	; 0xff8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_LOW) {
     ef2:	8b 81       	ldd	r24, Y+3	; 0x03
     ef4:	88 23       	and	r24, r24
     ef6:	a9 f4       	brne	.+42     	; 0xf22 <GPIO_writePin+0xf0>
				CLEAR_BIT(PORTB_REG.Byte, pin_num);
     ef8:	a8 e3       	ldi	r26, 0x38	; 56
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e8 e3       	ldi	r30, 0x38	; 56
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	48 2f       	mov	r20, r24
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	28 2f       	mov	r18, r24
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	02 2e       	mov	r0, r18
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <GPIO_writePin+0xe4>
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	0a 94       	dec	r0
     f18:	e2 f7       	brpl	.-8      	; 0xf12 <GPIO_writePin+0xe0>
     f1a:	80 95       	com	r24
     f1c:	84 23       	and	r24, r20
     f1e:	8c 93       	st	X, r24
     f20:	6b c0       	rjmp	.+214    	; 0xff8 <GPIO_writePin+0x1c6>
			} else {
				SET_BIT(PORTB_REG.Byte, pin_num);
     f22:	a8 e3       	ldi	r26, 0x38	; 56
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e8 e3       	ldi	r30, 0x38	; 56
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	48 2f       	mov	r20, r24
     f2e:	8a 81       	ldd	r24, Y+2	; 0x02
     f30:	28 2f       	mov	r18, r24
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	02 2e       	mov	r0, r18
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <GPIO_writePin+0x10e>
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	0a 94       	dec	r0
     f42:	e2 f7       	brpl	.-8      	; 0xf3c <GPIO_writePin+0x10a>
     f44:	84 2b       	or	r24, r20
     f46:	8c 93       	st	X, r24
     f48:	57 c0       	rjmp	.+174    	; 0xff8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_LOW) {
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	88 23       	and	r24, r24
     f4e:	a9 f4       	brne	.+42     	; 0xf7a <GPIO_writePin+0x148>
				CLEAR_BIT(PORTC_REG.Byte, pin_num);
     f50:	a5 e3       	ldi	r26, 0x35	; 53
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e5 e3       	ldi	r30, 0x35	; 53
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	48 2f       	mov	r20, r24
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	02 2e       	mov	r0, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <GPIO_writePin+0x13c>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	0a 94       	dec	r0
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <GPIO_writePin+0x138>
     f72:	80 95       	com	r24
     f74:	84 23       	and	r24, r20
     f76:	8c 93       	st	X, r24
     f78:	3f c0       	rjmp	.+126    	; 0xff8 <GPIO_writePin+0x1c6>
			} else {
				SET_BIT(PORTC_REG.Byte, pin_num);
     f7a:	a5 e3       	ldi	r26, 0x35	; 53
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e5 e3       	ldi	r30, 0x35	; 53
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	48 2f       	mov	r20, r24
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 2e       	mov	r0, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <GPIO_writePin+0x166>
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	0a 94       	dec	r0
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <GPIO_writePin+0x162>
     f9c:	84 2b       	or	r24, r20
     f9e:	8c 93       	st	X, r24
     fa0:	2b c0       	rjmp	.+86     	; 0xff8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_LOW) {
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	88 23       	and	r24, r24
     fa6:	a9 f4       	brne	.+42     	; 0xfd2 <GPIO_writePin+0x1a0>
				CLEAR_BIT(PORTD_REG.Byte, pin_num);
     fa8:	a2 e3       	ldi	r26, 0x32	; 50
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e2 e3       	ldi	r30, 0x32	; 50
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 2e       	mov	r0, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <GPIO_writePin+0x194>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	0a 94       	dec	r0
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <GPIO_writePin+0x190>
     fca:	80 95       	com	r24
     fcc:	84 23       	and	r24, r20
     fce:	8c 93       	st	X, r24
     fd0:	13 c0       	rjmp	.+38     	; 0xff8 <GPIO_writePin+0x1c6>
			} else {
				SET_BIT(PORTD_REG.Byte, pin_num);
     fd2:	a2 e3       	ldi	r26, 0x32	; 50
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e2 e3       	ldi	r30, 0x32	; 50
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	48 2f       	mov	r20, r24
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	02 2e       	mov	r0, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <GPIO_writePin+0x1be>
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	0a 94       	dec	r0
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <GPIO_writePin+0x1ba>
     ff4:	84 2b       	or	r24, r20
     ff6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	08 95       	ret

00001008 <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	00 d0       	rcall	.+0      	; 0x100e <GPIO_readPin+0x6>
    100e:	00 d0       	rcall	.+0      	; 0x1010 <GPIO_readPin+0x8>
    1010:	0f 92       	push	r0
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	8a 83       	std	Y+2, r24	; 0x02
    1018:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    101a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	88 30       	cpi	r24, 0x08	; 8
    1020:	08 f0       	brcs	.+2      	; 0x1024 <GPIO_readPin+0x1c>
    1022:	84 c0       	rjmp	.+264    	; 0x112c <GPIO_readPin+0x124>
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	84 30       	cpi	r24, 0x04	; 4
    1028:	08 f0       	brcs	.+2      	; 0x102c <GPIO_readPin+0x24>
    102a:	80 c0       	rjmp	.+256    	; 0x112c <GPIO_readPin+0x124>
		/* Do Nothing */
	} else {
		/* Return the pin value */
		switch (port_num) {
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	3d 83       	std	Y+5, r19	; 0x05
    1034:	2c 83       	std	Y+4, r18	; 0x04
    1036:	4c 81       	ldd	r20, Y+4	; 0x04
    1038:	5d 81       	ldd	r21, Y+5	; 0x05
    103a:	41 30       	cpi	r20, 0x01	; 1
    103c:	51 05       	cpc	r21, r1
    103e:	79 f1       	breq	.+94     	; 0x109e <GPIO_readPin+0x96>
    1040:	8c 81       	ldd	r24, Y+4	; 0x04
    1042:	9d 81       	ldd	r25, Y+5	; 0x05
    1044:	82 30       	cpi	r24, 0x02	; 2
    1046:	91 05       	cpc	r25, r1
    1048:	34 f4       	brge	.+12     	; 0x1056 <GPIO_readPin+0x4e>
    104a:	2c 81       	ldd	r18, Y+4	; 0x04
    104c:	3d 81       	ldd	r19, Y+5	; 0x05
    104e:	21 15       	cp	r18, r1
    1050:	31 05       	cpc	r19, r1
    1052:	69 f0       	breq	.+26     	; 0x106e <GPIO_readPin+0x66>
    1054:	6b c0       	rjmp	.+214    	; 0x112c <GPIO_readPin+0x124>
    1056:	4c 81       	ldd	r20, Y+4	; 0x04
    1058:	5d 81       	ldd	r21, Y+5	; 0x05
    105a:	42 30       	cpi	r20, 0x02	; 2
    105c:	51 05       	cpc	r21, r1
    105e:	b9 f1       	breq	.+110    	; 0x10ce <GPIO_readPin+0xc6>
    1060:	8c 81       	ldd	r24, Y+4	; 0x04
    1062:	9d 81       	ldd	r25, Y+5	; 0x05
    1064:	83 30       	cpi	r24, 0x03	; 3
    1066:	91 05       	cpc	r25, r1
    1068:	09 f4       	brne	.+2      	; 0x106c <GPIO_readPin+0x64>
    106a:	49 c0       	rjmp	.+146    	; 0x10fe <GPIO_readPin+0xf6>
    106c:	5f c0       	rjmp	.+190    	; 0x112c <GPIO_readPin+0x124>
		case PORTA_ID:
			if (BIT_IS_SET(PINA_REG.Byte, pin_num)) {
    106e:	e9 e3       	ldi	r30, 0x39	; 57
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	88 2f       	mov	r24, r24
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	a9 01       	movw	r20, r18
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <GPIO_readPin+0x7e>
    1082:	55 95       	asr	r21
    1084:	47 95       	ror	r20
    1086:	8a 95       	dec	r24
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <GPIO_readPin+0x7a>
    108a:	ca 01       	movw	r24, r20
    108c:	81 70       	andi	r24, 0x01	; 1
    108e:	90 70       	andi	r25, 0x00	; 0
    1090:	88 23       	and	r24, r24
    1092:	19 f0       	breq	.+6      	; 0x109a <GPIO_readPin+0x92>
				pin_value = LOGIC_HIGH;
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	89 83       	std	Y+1, r24	; 0x01
    1098:	49 c0       	rjmp	.+146    	; 0x112c <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    109a:	19 82       	std	Y+1, r1	; 0x01
    109c:	47 c0       	rjmp	.+142    	; 0x112c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PINB_REG.Byte, pin_num)) {
    109e:	e6 e3       	ldi	r30, 0x36	; 54
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	88 2f       	mov	r24, r24
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	a9 01       	movw	r20, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <GPIO_readPin+0xae>
    10b2:	55 95       	asr	r21
    10b4:	47 95       	ror	r20
    10b6:	8a 95       	dec	r24
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <GPIO_readPin+0xaa>
    10ba:	ca 01       	movw	r24, r20
    10bc:	81 70       	andi	r24, 0x01	; 1
    10be:	90 70       	andi	r25, 0x00	; 0
    10c0:	88 23       	and	r24, r24
    10c2:	19 f0       	breq	.+6      	; 0x10ca <GPIO_readPin+0xc2>
				pin_value = LOGIC_HIGH;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	89 83       	std	Y+1, r24	; 0x01
    10c8:	31 c0       	rjmp	.+98     	; 0x112c <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    10ca:	19 82       	std	Y+1, r1	; 0x01
    10cc:	2f c0       	rjmp	.+94     	; 0x112c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PINC_REG.Byte, pin_num)) {
    10ce:	e3 e3       	ldi	r30, 0x33	; 51
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	88 2f       	mov	r24, r24
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	a9 01       	movw	r20, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <GPIO_readPin+0xde>
    10e2:	55 95       	asr	r21
    10e4:	47 95       	ror	r20
    10e6:	8a 95       	dec	r24
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <GPIO_readPin+0xda>
    10ea:	ca 01       	movw	r24, r20
    10ec:	81 70       	andi	r24, 0x01	; 1
    10ee:	90 70       	andi	r25, 0x00	; 0
    10f0:	88 23       	and	r24, r24
    10f2:	19 f0       	breq	.+6      	; 0x10fa <GPIO_readPin+0xf2>
				pin_value = LOGIC_HIGH;
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	89 83       	std	Y+1, r24	; 0x01
    10f8:	19 c0       	rjmp	.+50     	; 0x112c <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    10fa:	19 82       	std	Y+1, r1	; 0x01
    10fc:	17 c0       	rjmp	.+46     	; 0x112c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND_REG.Byte, pin_num)) {
    10fe:	e0 e3       	ldi	r30, 0x30	; 48
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	88 2f       	mov	r24, r24
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	a9 01       	movw	r20, r18
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <GPIO_readPin+0x10e>
    1112:	55 95       	asr	r21
    1114:	47 95       	ror	r20
    1116:	8a 95       	dec	r24
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <GPIO_readPin+0x10a>
    111a:	ca 01       	movw	r24, r20
    111c:	81 70       	andi	r24, 0x01	; 1
    111e:	90 70       	andi	r25, 0x00	; 0
    1120:	88 23       	and	r24, r24
    1122:	19 f0       	breq	.+6      	; 0x112a <GPIO_readPin+0x122>
				pin_value = LOGIC_HIGH;
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	01 c0       	rjmp	.+2      	; 0x112c <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    112a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    112c:	89 81       	ldd	r24, Y+1	; 0x01
}
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	00 d0       	rcall	.+0      	; 0x1144 <GPIO_setupPortDirection+0x6>
    1144:	00 d0       	rcall	.+0      	; 0x1146 <GPIO_setupPortDirection+0x8>
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	84 30       	cpi	r24, 0x04	; 4
    1152:	90 f5       	brcc	.+100    	; 0x11b8 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	} else {
		/* Setup the port direction as required */
		switch (port_num) {
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	3c 83       	std	Y+4, r19	; 0x04
    115c:	2b 83       	std	Y+3, r18	; 0x03
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	9c 81       	ldd	r25, Y+4	; 0x04
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	91 05       	cpc	r25, r1
    1166:	d1 f0       	breq	.+52     	; 0x119c <GPIO_setupPortDirection+0x5e>
    1168:	2b 81       	ldd	r18, Y+3	; 0x03
    116a:	3c 81       	ldd	r19, Y+4	; 0x04
    116c:	22 30       	cpi	r18, 0x02	; 2
    116e:	31 05       	cpc	r19, r1
    1170:	2c f4       	brge	.+10     	; 0x117c <GPIO_setupPortDirection+0x3e>
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	9c 81       	ldd	r25, Y+4	; 0x04
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	61 f0       	breq	.+24     	; 0x1192 <GPIO_setupPortDirection+0x54>
    117a:	1e c0       	rjmp	.+60     	; 0x11b8 <GPIO_setupPortDirection+0x7a>
    117c:	2b 81       	ldd	r18, Y+3	; 0x03
    117e:	3c 81       	ldd	r19, Y+4	; 0x04
    1180:	22 30       	cpi	r18, 0x02	; 2
    1182:	31 05       	cpc	r19, r1
    1184:	81 f0       	breq	.+32     	; 0x11a6 <GPIO_setupPortDirection+0x68>
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	9c 81       	ldd	r25, Y+4	; 0x04
    118a:	83 30       	cpi	r24, 0x03	; 3
    118c:	91 05       	cpc	r25, r1
    118e:	81 f0       	breq	.+32     	; 0x11b0 <GPIO_setupPortDirection+0x72>
    1190:	13 c0       	rjmp	.+38     	; 0x11b8 <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA_REG.Byte = direction;
    1192:	ea e3       	ldi	r30, 0x3A	; 58
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	80 83       	st	Z, r24
    119a:	0e c0       	rjmp	.+28     	; 0x11b8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB_REG.Byte = direction;
    119c:	e7 e3       	ldi	r30, 0x37	; 55
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	80 83       	st	Z, r24
    11a4:	09 c0       	rjmp	.+18     	; 0x11b8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC_REG.Byte = direction;
    11a6:	e4 e3       	ldi	r30, 0x34	; 52
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	80 83       	st	Z, r24
    11ae:	04 c0       	rjmp	.+8      	; 0x11b8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD_REG.Byte = direction;
    11b0:	e1 e3       	ldi	r30, 0x31	; 49
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	80 83       	st	Z, r24
			break;
		}
	}
}
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value) {
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <GPIO_writePort+0x6>
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <GPIO_writePort+0x8>
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    11d2:	89 83       	std	Y+1, r24	; 0x01
    11d4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	84 30       	cpi	r24, 0x04	; 4
    11da:	90 f5       	brcc	.+100    	; 0x1240 <GPIO_writePort+0x7a>
		/* Do Nothing */
	} else {
		/* Setup the port value as required */
		switch (port_num) {
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	3c 83       	std	Y+4, r19	; 0x04
    11e4:	2b 83       	std	Y+3, r18	; 0x03
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ea:	81 30       	cpi	r24, 0x01	; 1
    11ec:	91 05       	cpc	r25, r1
    11ee:	d1 f0       	breq	.+52     	; 0x1224 <GPIO_writePort+0x5e>
    11f0:	2b 81       	ldd	r18, Y+3	; 0x03
    11f2:	3c 81       	ldd	r19, Y+4	; 0x04
    11f4:	22 30       	cpi	r18, 0x02	; 2
    11f6:	31 05       	cpc	r19, r1
    11f8:	2c f4       	brge	.+10     	; 0x1204 <GPIO_writePort+0x3e>
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	9c 81       	ldd	r25, Y+4	; 0x04
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	61 f0       	breq	.+24     	; 0x121a <GPIO_writePort+0x54>
    1202:	1e c0       	rjmp	.+60     	; 0x1240 <GPIO_writePort+0x7a>
    1204:	2b 81       	ldd	r18, Y+3	; 0x03
    1206:	3c 81       	ldd	r19, Y+4	; 0x04
    1208:	22 30       	cpi	r18, 0x02	; 2
    120a:	31 05       	cpc	r19, r1
    120c:	81 f0       	breq	.+32     	; 0x122e <GPIO_writePort+0x68>
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	9c 81       	ldd	r25, Y+4	; 0x04
    1212:	83 30       	cpi	r24, 0x03	; 3
    1214:	91 05       	cpc	r25, r1
    1216:	81 f0       	breq	.+32     	; 0x1238 <GPIO_writePort+0x72>
    1218:	13 c0       	rjmp	.+38     	; 0x1240 <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA_REG.Byte = value;
    121a:	eb e3       	ldi	r30, 0x3B	; 59
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	80 83       	st	Z, r24
    1222:	0e c0       	rjmp	.+28     	; 0x1240 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB_REG.Byte = value;
    1224:	e8 e3       	ldi	r30, 0x38	; 56
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	80 83       	st	Z, r24
    122c:	09 c0       	rjmp	.+18     	; 0x1240 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC_REG.Byte = value;
    122e:	e5 e3       	ldi	r30, 0x35	; 53
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	80 83       	st	Z, r24
    1236:	04 c0       	rjmp	.+8      	; 0x1240 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD_REG.Byte = value;
    1238:	e2 e3       	ldi	r30, 0x32	; 50
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num) {
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	00 d0       	rcall	.+0      	; 0x1254 <GPIO_readPort+0x6>
    1254:	00 d0       	rcall	.+0      	; 0x1256 <GPIO_readPort+0x8>
    1256:	0f 92       	push	r0
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    125e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	84 30       	cpi	r24, 0x04	; 4
    1264:	10 f0       	brcs	.+4      	; 0x126a <GPIO_readPort+0x1c>
		return 0;
    1266:	1d 82       	std	Y+5, r1	; 0x05
    1268:	34 c0       	rjmp	.+104    	; 0x12d2 <GPIO_readPort+0x84>
	} else {
		/* Return the pin value */
		switch (port_num) {
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	3c 83       	std	Y+4, r19	; 0x04
    1272:	2b 83       	std	Y+3, r18	; 0x03
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	9c 81       	ldd	r25, Y+4	; 0x04
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	91 05       	cpc	r25, r1
    127c:	d1 f0       	breq	.+52     	; 0x12b2 <GPIO_readPort+0x64>
    127e:	2b 81       	ldd	r18, Y+3	; 0x03
    1280:	3c 81       	ldd	r19, Y+4	; 0x04
    1282:	22 30       	cpi	r18, 0x02	; 2
    1284:	31 05       	cpc	r19, r1
    1286:	2c f4       	brge	.+10     	; 0x1292 <GPIO_readPort+0x44>
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	9c 81       	ldd	r25, Y+4	; 0x04
    128c:	00 97       	sbiw	r24, 0x00	; 0
    128e:	61 f0       	breq	.+24     	; 0x12a8 <GPIO_readPort+0x5a>
    1290:	1e c0       	rjmp	.+60     	; 0x12ce <GPIO_readPort+0x80>
    1292:	2b 81       	ldd	r18, Y+3	; 0x03
    1294:	3c 81       	ldd	r19, Y+4	; 0x04
    1296:	22 30       	cpi	r18, 0x02	; 2
    1298:	31 05       	cpc	r19, r1
    129a:	81 f0       	breq	.+32     	; 0x12bc <GPIO_readPort+0x6e>
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	9c 81       	ldd	r25, Y+4	; 0x04
    12a0:	83 30       	cpi	r24, 0x03	; 3
    12a2:	91 05       	cpc	r25, r1
    12a4:	81 f0       	breq	.+32     	; 0x12c6 <GPIO_readPort+0x78>
    12a6:	13 c0       	rjmp	.+38     	; 0x12ce <GPIO_readPort+0x80>
		case PORTA_ID:
			value = PINA_REG.Byte;
    12a8:	e9 e3       	ldi	r30, 0x39	; 57
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	89 83       	std	Y+1, r24	; 0x01
    12b0:	0e c0       	rjmp	.+28     	; 0x12ce <GPIO_readPort+0x80>
			break;
		case PORTB_ID:
			value = PINB_REG.Byte;
    12b2:	e6 e3       	ldi	r30, 0x36	; 54
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	09 c0       	rjmp	.+18     	; 0x12ce <GPIO_readPort+0x80>
			break;
		case PORTC_ID:
			value = PINC_REG.Byte;
    12bc:	e3 e3       	ldi	r30, 0x33	; 51
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	89 83       	std	Y+1, r24	; 0x01
    12c4:	04 c0       	rjmp	.+8      	; 0x12ce <GPIO_readPort+0x80>
			break;
		case PORTD_ID:
			value = PIND_REG.Byte;
    12c6:	e0 e3       	ldi	r30, 0x30	; 48
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    12ce:	99 81       	ldd	r25, Y+1	; 0x01
    12d0:	9d 83       	std	Y+5, r25	; 0x05
    12d2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	cf 91       	pop	r28
    12e0:	df 91       	pop	r29
    12e2:	08 95       	ret

000012e4 <main>:
 */
void countOneSecond(void);

/* ################################ Main Program ################################ */

int main() {
    12e4:	0f 93       	push	r16
    12e6:	1f 93       	push	r17
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	c5 5a       	subi	r28, 0xA5	; 165
    12f2:	d0 40       	sbci	r29, 0x00	; 0
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	de bf       	out	0x3e, r29	; 62
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	cd bf       	out	0x3d, r28	; 61
	/* Configuration and initialization functions */
	/* Enable Global interrupt SREG */
	SREG_REG.Bits.I_Bit = 1;
    12fe:	ef e5       	ldi	r30, 0x5F	; 95
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	80 68       	ori	r24, 0x80	; 128
    1306:	80 83       	st	Z, r24
	uint8 temp, number_of_tries, Password_Created, Password_Changed;
	uint8 password[5];
	/* select the configuration of UART */
	UART_ConfigType uart_config = { ASYNCHRONOUS, UART_DATA_8_BITS,
			UART_NO_PARITY, UART_ONE_STOP_BIT, UART_BAUD_RATE_9600 };
    1308:	ce 01       	movw	r24, r28
    130a:	87 56       	subi	r24, 0x67	; 103
    130c:	9f 4f       	sbci	r25, 0xFF	; 255
    130e:	cf 55       	subi	r28, 0x5F	; 95
    1310:	df 4f       	sbci	r29, 0xFF	; 255
    1312:	99 83       	std	Y+1, r25	; 0x01
    1314:	88 83       	st	Y, r24
    1316:	c1 5a       	subi	r28, 0xA1	; 161
    1318:	d0 40       	sbci	r29, 0x00	; 0
    131a:	8a e4       	ldi	r24, 0x4A	; 74
    131c:	92 e0       	ldi	r25, 0x02	; 2
    131e:	cd 55       	subi	r28, 0x5D	; 93
    1320:	df 4f       	sbci	r29, 0xFF	; 255
    1322:	99 83       	std	Y+1, r25	; 0x01
    1324:	88 83       	st	Y, r24
    1326:	c3 5a       	subi	r28, 0xA3	; 163
    1328:	d0 40       	sbci	r29, 0x00	; 0
    132a:	98 e0       	ldi	r25, 0x08	; 8
    132c:	cb 55       	subi	r28, 0x5B	; 91
    132e:	df 4f       	sbci	r29, 0xFF	; 255
    1330:	98 83       	st	Y, r25
    1332:	c5 5a       	subi	r28, 0xA5	; 165
    1334:	d0 40       	sbci	r29, 0x00	; 0
    1336:	cd 55       	subi	r28, 0x5D	; 93
    1338:	df 4f       	sbci	r29, 0xFF	; 255
    133a:	e8 81       	ld	r30, Y
    133c:	f9 81       	ldd	r31, Y+1	; 0x01
    133e:	c3 5a       	subi	r28, 0xA3	; 163
    1340:	d0 40       	sbci	r29, 0x00	; 0
    1342:	00 80       	ld	r0, Z
    1344:	cd 55       	subi	r28, 0x5D	; 93
    1346:	df 4f       	sbci	r29, 0xFF	; 255
    1348:	88 81       	ld	r24, Y
    134a:	99 81       	ldd	r25, Y+1	; 0x01
    134c:	c3 5a       	subi	r28, 0xA3	; 163
    134e:	d0 40       	sbci	r29, 0x00	; 0
    1350:	01 96       	adiw	r24, 0x01	; 1
    1352:	cd 55       	subi	r28, 0x5D	; 93
    1354:	df 4f       	sbci	r29, 0xFF	; 255
    1356:	99 83       	std	Y+1, r25	; 0x01
    1358:	88 83       	st	Y, r24
    135a:	c3 5a       	subi	r28, 0xA3	; 163
    135c:	d0 40       	sbci	r29, 0x00	; 0
    135e:	cf 55       	subi	r28, 0x5F	; 95
    1360:	df 4f       	sbci	r29, 0xFF	; 255
    1362:	e8 81       	ld	r30, Y
    1364:	f9 81       	ldd	r31, Y+1	; 0x01
    1366:	c1 5a       	subi	r28, 0xA1	; 161
    1368:	d0 40       	sbci	r29, 0x00	; 0
    136a:	00 82       	st	Z, r0
    136c:	cf 55       	subi	r28, 0x5F	; 95
    136e:	df 4f       	sbci	r29, 0xFF	; 255
    1370:	88 81       	ld	r24, Y
    1372:	99 81       	ldd	r25, Y+1	; 0x01
    1374:	c1 5a       	subi	r28, 0xA1	; 161
    1376:	d0 40       	sbci	r29, 0x00	; 0
    1378:	01 96       	adiw	r24, 0x01	; 1
    137a:	cf 55       	subi	r28, 0x5F	; 95
    137c:	df 4f       	sbci	r29, 0xFF	; 255
    137e:	99 83       	std	Y+1, r25	; 0x01
    1380:	88 83       	st	Y, r24
    1382:	c1 5a       	subi	r28, 0xA1	; 161
    1384:	d0 40       	sbci	r29, 0x00	; 0
    1386:	cb 55       	subi	r28, 0x5B	; 91
    1388:	df 4f       	sbci	r29, 0xFF	; 255
    138a:	98 81       	ld	r25, Y
    138c:	c5 5a       	subi	r28, 0xA5	; 165
    138e:	d0 40       	sbci	r29, 0x00	; 0
    1390:	91 50       	subi	r25, 0x01	; 1
    1392:	cb 55       	subi	r28, 0x5B	; 91
    1394:	df 4f       	sbci	r29, 0xFF	; 255
    1396:	98 83       	st	Y, r25
    1398:	c5 5a       	subi	r28, 0xA5	; 165
    139a:	d0 40       	sbci	r29, 0x00	; 0
    139c:	cb 55       	subi	r28, 0x5B	; 91
    139e:	df 4f       	sbci	r29, 0xFF	; 255
    13a0:	e8 81       	ld	r30, Y
    13a2:	c5 5a       	subi	r28, 0xA5	; 165
    13a4:	d0 40       	sbci	r29, 0x00	; 0
    13a6:	ee 23       	and	r30, r30
    13a8:	31 f6       	brne	.-116    	; 0x1336 <main+0x52>
	/*Passing configuration to uart init*/
	UART_init(&uart_config);
    13aa:	ce 01       	movw	r24, r28
    13ac:	87 56       	subi	r24, 0x67	; 103
    13ae:	9f 4f       	sbci	r25, 0xFF	; 255
    13b0:	0e 94 65 20 	call	0x40ca	; 0x40ca <UART_init>
	/*Initialize LCD*/
	LCD_init();
    13b4:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <LCD_init>
	LCD_clearScreen();
    13b8:	0e 94 bb 1a 	call	0x3576	; 0x3576 <LCD_clearScreen>
	LCD_displayString("  Final Project ");
    13bc:	80 e6       	ldi	r24, 0x60	; 96
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
	LCD_moveCursor(1, 0);
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	60 e0       	ldi	r22, 0x00	; 0
    13c8:	0e 94 3d 1a 	call	0x347a	; 0x347a <LCD_moveCursor>
	LCD_displayString("Edges Diploma 90");
    13cc:	81 e7       	ldi	r24, 0x71	; 113
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
    13d4:	fe 01       	movw	r30, r28
    13d6:	e7 57       	subi	r30, 0x77	; 119
    13d8:	ff 4f       	sbci	r31, 0xFF	; 255
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	aa e7       	ldi	r26, 0x7A	; 122
    13e0:	b3 e4       	ldi	r27, 0x43	; 67
    13e2:	80 83       	st	Z, r24
    13e4:	91 83       	std	Z+1, r25	; 0x01
    13e6:	a2 83       	std	Z+2, r26	; 0x02
    13e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ea:	8e 01       	movw	r16, r28
    13ec:	0b 57       	subi	r16, 0x7B	; 123
    13ee:	1f 4f       	sbci	r17, 0xFF	; 255
    13f0:	fe 01       	movw	r30, r28
    13f2:	e7 57       	subi	r30, 0x77	; 119
    13f4:	ff 4f       	sbci	r31, 0xFF	; 255
    13f6:	60 81       	ld	r22, Z
    13f8:	71 81       	ldd	r23, Z+1	; 0x01
    13fa:	82 81       	ldd	r24, Z+2	; 0x02
    13fc:	93 81       	ldd	r25, Z+3	; 0x03
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	4a ef       	ldi	r20, 0xFA	; 250
    1404:	54 e4       	ldi	r21, 0x44	; 68
    1406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	f8 01       	movw	r30, r16
    1410:	80 83       	st	Z, r24
    1412:	91 83       	std	Z+1, r25	; 0x01
    1414:	a2 83       	std	Z+2, r26	; 0x02
    1416:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1418:	fe 01       	movw	r30, r28
    141a:	eb 57       	subi	r30, 0x7B	; 123
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	60 81       	ld	r22, Z
    1420:	71 81       	ldd	r23, Z+1	; 0x01
    1422:	82 81       	ldd	r24, Z+2	; 0x02
    1424:	93 81       	ldd	r25, Z+3	; 0x03
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	40 e8       	ldi	r20, 0x80	; 128
    142c:	5f e3       	ldi	r21, 0x3F	; 63
    142e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1432:	88 23       	and	r24, r24
    1434:	44 f4       	brge	.+16     	; 0x1446 <main+0x162>
		__ticks = 1;
    1436:	fe 01       	movw	r30, r28
    1438:	ed 57       	subi	r30, 0x7D	; 125
    143a:	ff 4f       	sbci	r31, 0xFF	; 255
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	91 83       	std	Z+1, r25	; 0x01
    1442:	80 83       	st	Z, r24
    1444:	64 c0       	rjmp	.+200    	; 0x150e <main+0x22a>
	else if (__tmp > 65535)
    1446:	fe 01       	movw	r30, r28
    1448:	eb 57       	subi	r30, 0x7B	; 123
    144a:	ff 4f       	sbci	r31, 0xFF	; 255
    144c:	60 81       	ld	r22, Z
    144e:	71 81       	ldd	r23, Z+1	; 0x01
    1450:	82 81       	ldd	r24, Z+2	; 0x02
    1452:	93 81       	ldd	r25, Z+3	; 0x03
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	3f ef       	ldi	r19, 0xFF	; 255
    1458:	4f e7       	ldi	r20, 0x7F	; 127
    145a:	57 e4       	ldi	r21, 0x47	; 71
    145c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1460:	18 16       	cp	r1, r24
    1462:	0c f0       	brlt	.+2      	; 0x1466 <main+0x182>
    1464:	43 c0       	rjmp	.+134    	; 0x14ec <main+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1466:	fe 01       	movw	r30, r28
    1468:	e7 57       	subi	r30, 0x77	; 119
    146a:	ff 4f       	sbci	r31, 0xFF	; 255
    146c:	60 81       	ld	r22, Z
    146e:	71 81       	ldd	r23, Z+1	; 0x01
    1470:	82 81       	ldd	r24, Z+2	; 0x02
    1472:	93 81       	ldd	r25, Z+3	; 0x03
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	40 e2       	ldi	r20, 0x20	; 32
    147a:	51 e4       	ldi	r21, 0x41	; 65
    147c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	8e 01       	movw	r16, r28
    1486:	0d 57       	subi	r16, 0x7D	; 125
    1488:	1f 4f       	sbci	r17, 0xFF	; 255
    148a:	bc 01       	movw	r22, r24
    148c:	cd 01       	movw	r24, r26
    148e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1492:	dc 01       	movw	r26, r24
    1494:	cb 01       	movw	r24, r22
    1496:	f8 01       	movw	r30, r16
    1498:	91 83       	std	Z+1, r25	; 0x01
    149a:	80 83       	st	Z, r24
    149c:	1f c0       	rjmp	.+62     	; 0x14dc <main+0x1f8>
    149e:	fe 01       	movw	r30, r28
    14a0:	ef 57       	subi	r30, 0x7F	; 127
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	88 ec       	ldi	r24, 0xC8	; 200
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	91 83       	std	Z+1, r25	; 0x01
    14aa:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14ac:	fe 01       	movw	r30, r28
    14ae:	ef 57       	subi	r30, 0x7F	; 127
    14b0:	ff 4f       	sbci	r31, 0xFF	; 255
    14b2:	80 81       	ld	r24, Z
    14b4:	91 81       	ldd	r25, Z+1	; 0x01
    14b6:	01 97       	sbiw	r24, 0x01	; 1
    14b8:	f1 f7       	brne	.-4      	; 0x14b6 <main+0x1d2>
    14ba:	fe 01       	movw	r30, r28
    14bc:	ef 57       	subi	r30, 0x7F	; 127
    14be:	ff 4f       	sbci	r31, 0xFF	; 255
    14c0:	91 83       	std	Z+1, r25	; 0x01
    14c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c4:	de 01       	movw	r26, r28
    14c6:	ad 57       	subi	r26, 0x7D	; 125
    14c8:	bf 4f       	sbci	r27, 0xFF	; 255
    14ca:	fe 01       	movw	r30, r28
    14cc:	ed 57       	subi	r30, 0x7D	; 125
    14ce:	ff 4f       	sbci	r31, 0xFF	; 255
    14d0:	80 81       	ld	r24, Z
    14d2:	91 81       	ldd	r25, Z+1	; 0x01
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	11 96       	adiw	r26, 0x01	; 1
    14d8:	9c 93       	st	X, r25
    14da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14dc:	fe 01       	movw	r30, r28
    14de:	ed 57       	subi	r30, 0x7D	; 125
    14e0:	ff 4f       	sbci	r31, 0xFF	; 255
    14e2:	80 81       	ld	r24, Z
    14e4:	91 81       	ldd	r25, Z+1	; 0x01
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	d1 f6       	brne	.-76     	; 0x149e <main+0x1ba>
    14ea:	27 c0       	rjmp	.+78     	; 0x153a <main+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ec:	8e 01       	movw	r16, r28
    14ee:	0d 57       	subi	r16, 0x7D	; 125
    14f0:	1f 4f       	sbci	r17, 0xFF	; 255
    14f2:	fe 01       	movw	r30, r28
    14f4:	eb 57       	subi	r30, 0x7B	; 123
    14f6:	ff 4f       	sbci	r31, 0xFF	; 255
    14f8:	60 81       	ld	r22, Z
    14fa:	71 81       	ldd	r23, Z+1	; 0x01
    14fc:	82 81       	ldd	r24, Z+2	; 0x02
    14fe:	93 81       	ldd	r25, Z+3	; 0x03
    1500:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	f8 01       	movw	r30, r16
    150a:	91 83       	std	Z+1, r25	; 0x01
    150c:	80 83       	st	Z, r24
    150e:	de 01       	movw	r26, r28
    1510:	a1 58       	subi	r26, 0x81	; 129
    1512:	bf 4f       	sbci	r27, 0xFF	; 255
    1514:	fe 01       	movw	r30, r28
    1516:	ed 57       	subi	r30, 0x7D	; 125
    1518:	ff 4f       	sbci	r31, 0xFF	; 255
    151a:	80 81       	ld	r24, Z
    151c:	91 81       	ldd	r25, Z+1	; 0x01
    151e:	8d 93       	st	X+, r24
    1520:	9c 93       	st	X, r25
    1522:	fe 01       	movw	r30, r28
    1524:	e1 58       	subi	r30, 0x81	; 129
    1526:	ff 4f       	sbci	r31, 0xFF	; 255
    1528:	80 81       	ld	r24, Z
    152a:	91 81       	ldd	r25, Z+1	; 0x01
    152c:	01 97       	sbiw	r24, 0x01	; 1
    152e:	f1 f7       	brne	.-4      	; 0x152c <main+0x248>
    1530:	fe 01       	movw	r30, r28
    1532:	e1 58       	subi	r30, 0x81	; 129
    1534:	ff 4f       	sbci	r31, 0xFF	; 255
    1536:	91 83       	std	Z+1, r25	; 0x01
    1538:	80 83       	st	Z, r24
	_delay_ms(250);
	LCD_clearScreen();
    153a:	0e 94 bb 1a 	call	0x3576	; 0x3576 <LCD_clearScreen>
	LCD_displayString("     Made By    ");
    153e:	82 e8       	ldi	r24, 0x82	; 130
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
	LCD_moveCursor(1, 0);
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	60 e0       	ldi	r22, 0x00	; 0
    154a:	0e 94 3d 1a 	call	0x347a	; 0x347a <LCD_moveCursor>
	LCD_displayString(" Youssef Khaled ");
    154e:	83 e9       	ldi	r24, 0x93	; 147
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
    1556:	fe 01       	movw	r30, r28
    1558:	e5 58       	subi	r30, 0x85	; 133
    155a:	ff 4f       	sbci	r31, 0xFF	; 255
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	aa e7       	ldi	r26, 0x7A	; 122
    1562:	b3 e4       	ldi	r27, 0x43	; 67
    1564:	80 83       	st	Z, r24
    1566:	91 83       	std	Z+1, r25	; 0x01
    1568:	a2 83       	std	Z+2, r26	; 0x02
    156a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    156c:	8e 01       	movw	r16, r28
    156e:	09 58       	subi	r16, 0x89	; 137
    1570:	1f 4f       	sbci	r17, 0xFF	; 255
    1572:	fe 01       	movw	r30, r28
    1574:	e5 58       	subi	r30, 0x85	; 133
    1576:	ff 4f       	sbci	r31, 0xFF	; 255
    1578:	60 81       	ld	r22, Z
    157a:	71 81       	ldd	r23, Z+1	; 0x01
    157c:	82 81       	ldd	r24, Z+2	; 0x02
    157e:	93 81       	ldd	r25, Z+3	; 0x03
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	4a ef       	ldi	r20, 0xFA	; 250
    1586:	54 e4       	ldi	r21, 0x44	; 68
    1588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	f8 01       	movw	r30, r16
    1592:	80 83       	st	Z, r24
    1594:	91 83       	std	Z+1, r25	; 0x01
    1596:	a2 83       	std	Z+2, r26	; 0x02
    1598:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    159a:	fe 01       	movw	r30, r28
    159c:	e9 58       	subi	r30, 0x89	; 137
    159e:	ff 4f       	sbci	r31, 0xFF	; 255
    15a0:	60 81       	ld	r22, Z
    15a2:	71 81       	ldd	r23, Z+1	; 0x01
    15a4:	82 81       	ldd	r24, Z+2	; 0x02
    15a6:	93 81       	ldd	r25, Z+3	; 0x03
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	40 e8       	ldi	r20, 0x80	; 128
    15ae:	5f e3       	ldi	r21, 0x3F	; 63
    15b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15b4:	88 23       	and	r24, r24
    15b6:	44 f4       	brge	.+16     	; 0x15c8 <main+0x2e4>
		__ticks = 1;
    15b8:	fe 01       	movw	r30, r28
    15ba:	eb 58       	subi	r30, 0x8B	; 139
    15bc:	ff 4f       	sbci	r31, 0xFF	; 255
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	91 83       	std	Z+1, r25	; 0x01
    15c4:	80 83       	st	Z, r24
    15c6:	64 c0       	rjmp	.+200    	; 0x1690 <main+0x3ac>
	else if (__tmp > 65535)
    15c8:	fe 01       	movw	r30, r28
    15ca:	e9 58       	subi	r30, 0x89	; 137
    15cc:	ff 4f       	sbci	r31, 0xFF	; 255
    15ce:	60 81       	ld	r22, Z
    15d0:	71 81       	ldd	r23, Z+1	; 0x01
    15d2:	82 81       	ldd	r24, Z+2	; 0x02
    15d4:	93 81       	ldd	r25, Z+3	; 0x03
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	3f ef       	ldi	r19, 0xFF	; 255
    15da:	4f e7       	ldi	r20, 0x7F	; 127
    15dc:	57 e4       	ldi	r21, 0x47	; 71
    15de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15e2:	18 16       	cp	r1, r24
    15e4:	0c f0       	brlt	.+2      	; 0x15e8 <main+0x304>
    15e6:	43 c0       	rjmp	.+134    	; 0x166e <main+0x38a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e8:	fe 01       	movw	r30, r28
    15ea:	e5 58       	subi	r30, 0x85	; 133
    15ec:	ff 4f       	sbci	r31, 0xFF	; 255
    15ee:	60 81       	ld	r22, Z
    15f0:	71 81       	ldd	r23, Z+1	; 0x01
    15f2:	82 81       	ldd	r24, Z+2	; 0x02
    15f4:	93 81       	ldd	r25, Z+3	; 0x03
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	40 e2       	ldi	r20, 0x20	; 32
    15fc:	51 e4       	ldi	r21, 0x41	; 65
    15fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1602:	dc 01       	movw	r26, r24
    1604:	cb 01       	movw	r24, r22
    1606:	8e 01       	movw	r16, r28
    1608:	0b 58       	subi	r16, 0x8B	; 139
    160a:	1f 4f       	sbci	r17, 0xFF	; 255
    160c:	bc 01       	movw	r22, r24
    160e:	cd 01       	movw	r24, r26
    1610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	f8 01       	movw	r30, r16
    161a:	91 83       	std	Z+1, r25	; 0x01
    161c:	80 83       	st	Z, r24
    161e:	1f c0       	rjmp	.+62     	; 0x165e <main+0x37a>
    1620:	fe 01       	movw	r30, r28
    1622:	ed 58       	subi	r30, 0x8D	; 141
    1624:	ff 4f       	sbci	r31, 0xFF	; 255
    1626:	88 ec       	ldi	r24, 0xC8	; 200
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	91 83       	std	Z+1, r25	; 0x01
    162c:	80 83       	st	Z, r24
    162e:	fe 01       	movw	r30, r28
    1630:	ed 58       	subi	r30, 0x8D	; 141
    1632:	ff 4f       	sbci	r31, 0xFF	; 255
    1634:	80 81       	ld	r24, Z
    1636:	91 81       	ldd	r25, Z+1	; 0x01
    1638:	01 97       	sbiw	r24, 0x01	; 1
    163a:	f1 f7       	brne	.-4      	; 0x1638 <main+0x354>
    163c:	fe 01       	movw	r30, r28
    163e:	ed 58       	subi	r30, 0x8D	; 141
    1640:	ff 4f       	sbci	r31, 0xFF	; 255
    1642:	91 83       	std	Z+1, r25	; 0x01
    1644:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1646:	de 01       	movw	r26, r28
    1648:	ab 58       	subi	r26, 0x8B	; 139
    164a:	bf 4f       	sbci	r27, 0xFF	; 255
    164c:	fe 01       	movw	r30, r28
    164e:	eb 58       	subi	r30, 0x8B	; 139
    1650:	ff 4f       	sbci	r31, 0xFF	; 255
    1652:	80 81       	ld	r24, Z
    1654:	91 81       	ldd	r25, Z+1	; 0x01
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	11 96       	adiw	r26, 0x01	; 1
    165a:	9c 93       	st	X, r25
    165c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    165e:	fe 01       	movw	r30, r28
    1660:	eb 58       	subi	r30, 0x8B	; 139
    1662:	ff 4f       	sbci	r31, 0xFF	; 255
    1664:	80 81       	ld	r24, Z
    1666:	91 81       	ldd	r25, Z+1	; 0x01
    1668:	00 97       	sbiw	r24, 0x00	; 0
    166a:	d1 f6       	brne	.-76     	; 0x1620 <main+0x33c>
    166c:	27 c0       	rjmp	.+78     	; 0x16bc <main+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    166e:	8e 01       	movw	r16, r28
    1670:	0b 58       	subi	r16, 0x8B	; 139
    1672:	1f 4f       	sbci	r17, 0xFF	; 255
    1674:	fe 01       	movw	r30, r28
    1676:	e9 58       	subi	r30, 0x89	; 137
    1678:	ff 4f       	sbci	r31, 0xFF	; 255
    167a:	60 81       	ld	r22, Z
    167c:	71 81       	ldd	r23, Z+1	; 0x01
    167e:	82 81       	ldd	r24, Z+2	; 0x02
    1680:	93 81       	ldd	r25, Z+3	; 0x03
    1682:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1686:	dc 01       	movw	r26, r24
    1688:	cb 01       	movw	r24, r22
    168a:	f8 01       	movw	r30, r16
    168c:	91 83       	std	Z+1, r25	; 0x01
    168e:	80 83       	st	Z, r24
    1690:	de 01       	movw	r26, r28
    1692:	af 58       	subi	r26, 0x8F	; 143
    1694:	bf 4f       	sbci	r27, 0xFF	; 255
    1696:	fe 01       	movw	r30, r28
    1698:	eb 58       	subi	r30, 0x8B	; 139
    169a:	ff 4f       	sbci	r31, 0xFF	; 255
    169c:	80 81       	ld	r24, Z
    169e:	91 81       	ldd	r25, Z+1	; 0x01
    16a0:	8d 93       	st	X+, r24
    16a2:	9c 93       	st	X, r25
    16a4:	fe 01       	movw	r30, r28
    16a6:	ef 58       	subi	r30, 0x8F	; 143
    16a8:	ff 4f       	sbci	r31, 0xFF	; 255
    16aa:	80 81       	ld	r24, Z
    16ac:	91 81       	ldd	r25, Z+1	; 0x01
    16ae:	01 97       	sbiw	r24, 0x01	; 1
    16b0:	f1 f7       	brne	.-4      	; 0x16ae <main+0x3ca>
    16b2:	fe 01       	movw	r30, r28
    16b4:	ef 58       	subi	r30, 0x8F	; 143
    16b6:	ff 4f       	sbci	r31, 0xFF	; 255
    16b8:	91 83       	std	Z+1, r25	; 0x01
    16ba:	80 83       	st	Z, r24
	_delay_ms(250);
	LCD_clearScreen();
    16bc:	0e 94 bb 1a 	call	0x3576	; 0x3576 <LCD_clearScreen>
	LCD_displayString("Heartfelt thanks");
    16c0:	84 ea       	ldi	r24, 0xA4	; 164
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
	LCD_moveCursor(1, 0);
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	60 e0       	ldi	r22, 0x00	; 0
    16cc:	0e 94 3d 1a 	call	0x347a	; 0x347a <LCD_moveCursor>
	LCD_displayString("to MohamedTarek");
    16d0:	85 eb       	ldi	r24, 0xB5	; 181
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
    16d8:	fe 01       	movw	r30, r28
    16da:	e3 59       	subi	r30, 0x93	; 147
    16dc:	ff 4f       	sbci	r31, 0xFF	; 255
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	aa e7       	ldi	r26, 0x7A	; 122
    16e4:	b3 e4       	ldi	r27, 0x43	; 67
    16e6:	80 83       	st	Z, r24
    16e8:	91 83       	std	Z+1, r25	; 0x01
    16ea:	a2 83       	std	Z+2, r26	; 0x02
    16ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ee:	8e 01       	movw	r16, r28
    16f0:	07 59       	subi	r16, 0x97	; 151
    16f2:	1f 4f       	sbci	r17, 0xFF	; 255
    16f4:	fe 01       	movw	r30, r28
    16f6:	e3 59       	subi	r30, 0x93	; 147
    16f8:	ff 4f       	sbci	r31, 0xFF	; 255
    16fa:	60 81       	ld	r22, Z
    16fc:	71 81       	ldd	r23, Z+1	; 0x01
    16fe:	82 81       	ldd	r24, Z+2	; 0x02
    1700:	93 81       	ldd	r25, Z+3	; 0x03
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	4a ef       	ldi	r20, 0xFA	; 250
    1708:	54 e4       	ldi	r21, 0x44	; 68
    170a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	f8 01       	movw	r30, r16
    1714:	80 83       	st	Z, r24
    1716:	91 83       	std	Z+1, r25	; 0x01
    1718:	a2 83       	std	Z+2, r26	; 0x02
    171a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    171c:	fe 01       	movw	r30, r28
    171e:	e7 59       	subi	r30, 0x97	; 151
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	60 81       	ld	r22, Z
    1724:	71 81       	ldd	r23, Z+1	; 0x01
    1726:	82 81       	ldd	r24, Z+2	; 0x02
    1728:	93 81       	ldd	r25, Z+3	; 0x03
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	40 e8       	ldi	r20, 0x80	; 128
    1730:	5f e3       	ldi	r21, 0x3F	; 63
    1732:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1736:	88 23       	and	r24, r24
    1738:	44 f4       	brge	.+16     	; 0x174a <main+0x466>
		__ticks = 1;
    173a:	fe 01       	movw	r30, r28
    173c:	e9 59       	subi	r30, 0x99	; 153
    173e:	ff 4f       	sbci	r31, 0xFF	; 255
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	91 83       	std	Z+1, r25	; 0x01
    1746:	80 83       	st	Z, r24
    1748:	64 c0       	rjmp	.+200    	; 0x1812 <main+0x52e>
	else if (__tmp > 65535)
    174a:	fe 01       	movw	r30, r28
    174c:	e7 59       	subi	r30, 0x97	; 151
    174e:	ff 4f       	sbci	r31, 0xFF	; 255
    1750:	60 81       	ld	r22, Z
    1752:	71 81       	ldd	r23, Z+1	; 0x01
    1754:	82 81       	ldd	r24, Z+2	; 0x02
    1756:	93 81       	ldd	r25, Z+3	; 0x03
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	3f ef       	ldi	r19, 0xFF	; 255
    175c:	4f e7       	ldi	r20, 0x7F	; 127
    175e:	57 e4       	ldi	r21, 0x47	; 71
    1760:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1764:	18 16       	cp	r1, r24
    1766:	0c f0       	brlt	.+2      	; 0x176a <main+0x486>
    1768:	43 c0       	rjmp	.+134    	; 0x17f0 <main+0x50c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    176a:	fe 01       	movw	r30, r28
    176c:	e3 59       	subi	r30, 0x93	; 147
    176e:	ff 4f       	sbci	r31, 0xFF	; 255
    1770:	60 81       	ld	r22, Z
    1772:	71 81       	ldd	r23, Z+1	; 0x01
    1774:	82 81       	ldd	r24, Z+2	; 0x02
    1776:	93 81       	ldd	r25, Z+3	; 0x03
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	40 e2       	ldi	r20, 0x20	; 32
    177e:	51 e4       	ldi	r21, 0x41	; 65
    1780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	8e 01       	movw	r16, r28
    178a:	09 59       	subi	r16, 0x99	; 153
    178c:	1f 4f       	sbci	r17, 0xFF	; 255
    178e:	bc 01       	movw	r22, r24
    1790:	cd 01       	movw	r24, r26
    1792:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	f8 01       	movw	r30, r16
    179c:	91 83       	std	Z+1, r25	; 0x01
    179e:	80 83       	st	Z, r24
    17a0:	1f c0       	rjmp	.+62     	; 0x17e0 <main+0x4fc>
    17a2:	fe 01       	movw	r30, r28
    17a4:	eb 59       	subi	r30, 0x9B	; 155
    17a6:	ff 4f       	sbci	r31, 0xFF	; 255
    17a8:	88 ec       	ldi	r24, 0xC8	; 200
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	91 83       	std	Z+1, r25	; 0x01
    17ae:	80 83       	st	Z, r24
    17b0:	fe 01       	movw	r30, r28
    17b2:	eb 59       	subi	r30, 0x9B	; 155
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	80 81       	ld	r24, Z
    17b8:	91 81       	ldd	r25, Z+1	; 0x01
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	f1 f7       	brne	.-4      	; 0x17ba <main+0x4d6>
    17be:	fe 01       	movw	r30, r28
    17c0:	eb 59       	subi	r30, 0x9B	; 155
    17c2:	ff 4f       	sbci	r31, 0xFF	; 255
    17c4:	91 83       	std	Z+1, r25	; 0x01
    17c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c8:	de 01       	movw	r26, r28
    17ca:	a9 59       	subi	r26, 0x99	; 153
    17cc:	bf 4f       	sbci	r27, 0xFF	; 255
    17ce:	fe 01       	movw	r30, r28
    17d0:	e9 59       	subi	r30, 0x99	; 153
    17d2:	ff 4f       	sbci	r31, 0xFF	; 255
    17d4:	80 81       	ld	r24, Z
    17d6:	91 81       	ldd	r25, Z+1	; 0x01
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	11 96       	adiw	r26, 0x01	; 1
    17dc:	9c 93       	st	X, r25
    17de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e0:	fe 01       	movw	r30, r28
    17e2:	e9 59       	subi	r30, 0x99	; 153
    17e4:	ff 4f       	sbci	r31, 0xFF	; 255
    17e6:	80 81       	ld	r24, Z
    17e8:	91 81       	ldd	r25, Z+1	; 0x01
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	d1 f6       	brne	.-76     	; 0x17a2 <main+0x4be>
    17ee:	27 c0       	rjmp	.+78     	; 0x183e <main+0x55a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f0:	8e 01       	movw	r16, r28
    17f2:	09 59       	subi	r16, 0x99	; 153
    17f4:	1f 4f       	sbci	r17, 0xFF	; 255
    17f6:	fe 01       	movw	r30, r28
    17f8:	e7 59       	subi	r30, 0x97	; 151
    17fa:	ff 4f       	sbci	r31, 0xFF	; 255
    17fc:	60 81       	ld	r22, Z
    17fe:	71 81       	ldd	r23, Z+1	; 0x01
    1800:	82 81       	ldd	r24, Z+2	; 0x02
    1802:	93 81       	ldd	r25, Z+3	; 0x03
    1804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	f8 01       	movw	r30, r16
    180e:	91 83       	std	Z+1, r25	; 0x01
    1810:	80 83       	st	Z, r24
    1812:	de 01       	movw	r26, r28
    1814:	ad 59       	subi	r26, 0x9D	; 157
    1816:	bf 4f       	sbci	r27, 0xFF	; 255
    1818:	fe 01       	movw	r30, r28
    181a:	e9 59       	subi	r30, 0x99	; 153
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	80 81       	ld	r24, Z
    1820:	91 81       	ldd	r25, Z+1	; 0x01
    1822:	8d 93       	st	X+, r24
    1824:	9c 93       	st	X, r25
    1826:	fe 01       	movw	r30, r28
    1828:	ed 59       	subi	r30, 0x9D	; 157
    182a:	ff 4f       	sbci	r31, 0xFF	; 255
    182c:	80 81       	ld	r24, Z
    182e:	91 81       	ldd	r25, Z+1	; 0x01
    1830:	01 97       	sbiw	r24, 0x01	; 1
    1832:	f1 f7       	brne	.-4      	; 0x1830 <main+0x54c>
    1834:	fe 01       	movw	r30, r28
    1836:	ed 59       	subi	r30, 0x9D	; 157
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	91 83       	std	Z+1, r25	; 0x01
    183c:	80 83       	st	Z, r24
	_delay_ms(250);
	LCD_clearScreen();
    183e:	0e 94 bb 1a 	call	0x3576	; 0x3576 <LCD_clearScreen>
		/*
		 * select the action of create password at the start of program.
		 * the byte which sent to control ECU tell him to be ready to receive password
		 * after check matching here.
		 */
		UART_sendByte(CREATE_PASSWORD_ACTION);
    1842:	8c ec       	ldi	r24, 0xCC	; 204
    1844:	0e 94 ff 20 	call	0x41fe	; 0x41fe <UART_sendByte>
		/*At first no password created*/
		Password_Created = FALSE;
    1848:	fe 01       	movw	r30, r28
    184a:	ef 56       	subi	r30, 0x6F	; 111
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	10 82       	st	Z, r1
    1850:	06 c0       	rjmp	.+12     	; 0x185e <main+0x57a>
		/* loop until the password is created and saved successfully to EEPROM */
		while (Password_Created == FALSE) {
			Password_Created = CreatePassword();
    1852:	0e 94 6d 11 	call	0x22da	; 0x22da <CreatePassword>
    1856:	fe 01       	movw	r30, r28
    1858:	ef 56       	subi	r30, 0x6F	; 111
    185a:	ff 4f       	sbci	r31, 0xFF	; 255
    185c:	80 83       	st	Z, r24
		 */
		UART_sendByte(CREATE_PASSWORD_ACTION);
		/*At first no password created*/
		Password_Created = FALSE;
		/* loop until the password is created and saved successfully to EEPROM */
		while (Password_Created == FALSE) {
    185e:	fe 01       	movw	r30, r28
    1860:	ef 56       	subi	r30, 0x6F	; 111
    1862:	ff 4f       	sbci	r31, 0xFF	; 255
    1864:	80 81       	ld	r24, Z
    1866:	88 23       	and	r24, r24
    1868:	a1 f3       	breq	.-24     	; 0x1852 <main+0x56e>
			Password_Created = CreatePassword();
		}
		/*Main menu of program*/
		while (youssef_is_here) {
			LCD_clearScreen();
    186a:	0e 94 bb 1a 	call	0x3576	; 0x3576 <LCD_clearScreen>
			LCD_displayString("+ : Open Door");
    186e:	85 ec       	ldi	r24, 0xC5	; 197
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
			LCD_moveCursor(1, 0);
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	60 e0       	ldi	r22, 0x00	; 0
    187a:	0e 94 3d 1a 	call	0x347a	; 0x347a <LCD_moveCursor>
			LCD_displayString("- : Change Pass");
    187e:	83 ed       	ldi	r24, 0xD3	; 211
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
			/* get the option from user using keypad */
			temp = KEYPAD_getPressedKey();
    1886:	0e 94 0f 14 	call	0x281e	; 0x281e <KEYPAD_getPressedKey>
    188a:	fe 01       	movw	r30, r28
    188c:	ed 56       	subi	r30, 0x6D	; 109
    188e:	ff 4f       	sbci	r31, 0xFF	; 255
    1890:	80 83       	st	Z, r24
			/* if choosing first option => open door */
			if (temp == '+') {
    1892:	fe 01       	movw	r30, r28
    1894:	ed 56       	subi	r30, 0x6D	; 109
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	80 81       	ld	r24, Z
    189a:	8b 32       	cpi	r24, 0x2B	; 43
    189c:	09 f0       	breq	.+2      	; 0x18a0 <main+0x5bc>
    189e:	36 c3       	rjmp	.+1644   	; 0x1f0c <main+0xc28>
				/* variable to count number of tries */
				number_of_tries = 0;
    18a0:	fe 01       	movw	r30, r28
    18a2:	ee 56       	subi	r30, 0x6E	; 110
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	10 82       	st	Z, r1
				/*
				 * select the action of check password.
				 * the byte which sent to control ECU tell him to be ready to check
				 * the received password with the password in EEPROM.
				 */
				UART_sendByte(CHECK_PASSWORD_ACTION);
    18a8:	8d ed       	ldi	r24, 0xDD	; 221
    18aa:	0e 94 ff 20 	call	0x41fe	; 0x41fe <UART_sendByte>
				/*
				 * select the mode of open door.
				 * the byte which sent to control ECU tell him to be ready for
				 * open door mode.
				 */
				UART_sendByte(OPEN_DOOR_MODE);
    18ae:	8f ef       	ldi	r24, 0xFF	; 255
    18b0:	0e 94 ff 20 	call	0x41fe	; 0x41fe <UART_sendByte>
				while (youssef_is_here) {
					LCD_clearScreen();
    18b4:	0e 94 bb 1a 	call	0x3576	; 0x3576 <LCD_clearScreen>
					LCD_displayString("plz enter pass:");
    18b8:	83 ee       	ldi	r24, 0xE3	; 227
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
					LCD_moveCursor(1, 0);
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	60 e0       	ldi	r22, 0x00	; 0
    18c4:	0e 94 3d 1a 	call	0x347a	; 0x347a <LCD_moveCursor>
					GetPasswordFromKeyPad(password);
    18c8:	ce 01       	movw	r24, r28
    18ca:	8c 56       	subi	r24, 0x6C	; 108
    18cc:	9f 4f       	sbci	r25, 0xFF	; 255
    18ce:	0e 94 bb 12 	call	0x2576	; 0x2576 <GetPasswordFromKeyPad>
					/* send the password to control ECU to check if correct or not */
					sendPasswordToControlECU(password);
    18d2:	ce 01       	movw	r24, r28
    18d4:	8c 56       	subi	r24, 0x6C	; 108
    18d6:	9f 4f       	sbci	r25, 0xFF	; 255
    18d8:	0e 94 97 13 	call	0x272e	; 0x272e <sendPasswordToControlECU>
    18dc:	fe 01       	movw	r30, r28
    18de:	e1 5a       	subi	r30, 0xA1	; 161
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	a8 ec       	ldi	r26, 0xC8	; 200
    18e8:	b2 e4       	ldi	r27, 0x42	; 66
    18ea:	80 83       	st	Z, r24
    18ec:	91 83       	std	Z+1, r25	; 0x01
    18ee:	a2 83       	std	Z+2, r26	; 0x02
    18f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f2:	8e 01       	movw	r16, r28
    18f4:	05 5a       	subi	r16, 0xA5	; 165
    18f6:	1f 4f       	sbci	r17, 0xFF	; 255
    18f8:	fe 01       	movw	r30, r28
    18fa:	e1 5a       	subi	r30, 0xA1	; 161
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	60 81       	ld	r22, Z
    1900:	71 81       	ldd	r23, Z+1	; 0x01
    1902:	82 81       	ldd	r24, Z+2	; 0x02
    1904:	93 81       	ldd	r25, Z+3	; 0x03
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	4a ef       	ldi	r20, 0xFA	; 250
    190c:	54 e4       	ldi	r21, 0x44	; 68
    190e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	f8 01       	movw	r30, r16
    1918:	80 83       	st	Z, r24
    191a:	91 83       	std	Z+1, r25	; 0x01
    191c:	a2 83       	std	Z+2, r26	; 0x02
    191e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1920:	fe 01       	movw	r30, r28
    1922:	e5 5a       	subi	r30, 0xA5	; 165
    1924:	ff 4f       	sbci	r31, 0xFF	; 255
    1926:	60 81       	ld	r22, Z
    1928:	71 81       	ldd	r23, Z+1	; 0x01
    192a:	82 81       	ldd	r24, Z+2	; 0x02
    192c:	93 81       	ldd	r25, Z+3	; 0x03
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	40 e8       	ldi	r20, 0x80	; 128
    1934:	5f e3       	ldi	r21, 0x3F	; 63
    1936:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    193a:	88 23       	and	r24, r24
    193c:	44 f4       	brge	.+16     	; 0x194e <main+0x66a>
		__ticks = 1;
    193e:	fe 01       	movw	r30, r28
    1940:	e7 5a       	subi	r30, 0xA7	; 167
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	91 83       	std	Z+1, r25	; 0x01
    194a:	80 83       	st	Z, r24
    194c:	64 c0       	rjmp	.+200    	; 0x1a16 <main+0x732>
	else if (__tmp > 65535)
    194e:	fe 01       	movw	r30, r28
    1950:	e5 5a       	subi	r30, 0xA5	; 165
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	60 81       	ld	r22, Z
    1956:	71 81       	ldd	r23, Z+1	; 0x01
    1958:	82 81       	ldd	r24, Z+2	; 0x02
    195a:	93 81       	ldd	r25, Z+3	; 0x03
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	3f ef       	ldi	r19, 0xFF	; 255
    1960:	4f e7       	ldi	r20, 0x7F	; 127
    1962:	57 e4       	ldi	r21, 0x47	; 71
    1964:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1968:	18 16       	cp	r1, r24
    196a:	0c f0       	brlt	.+2      	; 0x196e <main+0x68a>
    196c:	43 c0       	rjmp	.+134    	; 0x19f4 <main+0x710>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196e:	fe 01       	movw	r30, r28
    1970:	e1 5a       	subi	r30, 0xA1	; 161
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	60 81       	ld	r22, Z
    1976:	71 81       	ldd	r23, Z+1	; 0x01
    1978:	82 81       	ldd	r24, Z+2	; 0x02
    197a:	93 81       	ldd	r25, Z+3	; 0x03
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	40 e2       	ldi	r20, 0x20	; 32
    1982:	51 e4       	ldi	r21, 0x41	; 65
    1984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	8e 01       	movw	r16, r28
    198e:	07 5a       	subi	r16, 0xA7	; 167
    1990:	1f 4f       	sbci	r17, 0xFF	; 255
    1992:	bc 01       	movw	r22, r24
    1994:	cd 01       	movw	r24, r26
    1996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    199a:	dc 01       	movw	r26, r24
    199c:	cb 01       	movw	r24, r22
    199e:	f8 01       	movw	r30, r16
    19a0:	91 83       	std	Z+1, r25	; 0x01
    19a2:	80 83       	st	Z, r24
    19a4:	1f c0       	rjmp	.+62     	; 0x19e4 <main+0x700>
    19a6:	fe 01       	movw	r30, r28
    19a8:	e9 5a       	subi	r30, 0xA9	; 169
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	88 ec       	ldi	r24, 0xC8	; 200
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	91 83       	std	Z+1, r25	; 0x01
    19b2:	80 83       	st	Z, r24
    19b4:	fe 01       	movw	r30, r28
    19b6:	e9 5a       	subi	r30, 0xA9	; 169
    19b8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ba:	80 81       	ld	r24, Z
    19bc:	91 81       	ldd	r25, Z+1	; 0x01
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	f1 f7       	brne	.-4      	; 0x19be <main+0x6da>
    19c2:	fe 01       	movw	r30, r28
    19c4:	e9 5a       	subi	r30, 0xA9	; 169
    19c6:	ff 4f       	sbci	r31, 0xFF	; 255
    19c8:	91 83       	std	Z+1, r25	; 0x01
    19ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19cc:	de 01       	movw	r26, r28
    19ce:	a7 5a       	subi	r26, 0xA7	; 167
    19d0:	bf 4f       	sbci	r27, 0xFF	; 255
    19d2:	fe 01       	movw	r30, r28
    19d4:	e7 5a       	subi	r30, 0xA7	; 167
    19d6:	ff 4f       	sbci	r31, 0xFF	; 255
    19d8:	80 81       	ld	r24, Z
    19da:	91 81       	ldd	r25, Z+1	; 0x01
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	11 96       	adiw	r26, 0x01	; 1
    19e0:	9c 93       	st	X, r25
    19e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e4:	fe 01       	movw	r30, r28
    19e6:	e7 5a       	subi	r30, 0xA7	; 167
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	80 81       	ld	r24, Z
    19ec:	91 81       	ldd	r25, Z+1	; 0x01
    19ee:	00 97       	sbiw	r24, 0x00	; 0
    19f0:	d1 f6       	brne	.-76     	; 0x19a6 <main+0x6c2>
    19f2:	27 c0       	rjmp	.+78     	; 0x1a42 <main+0x75e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f4:	8e 01       	movw	r16, r28
    19f6:	07 5a       	subi	r16, 0xA7	; 167
    19f8:	1f 4f       	sbci	r17, 0xFF	; 255
    19fa:	fe 01       	movw	r30, r28
    19fc:	e5 5a       	subi	r30, 0xA5	; 165
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	60 81       	ld	r22, Z
    1a02:	71 81       	ldd	r23, Z+1	; 0x01
    1a04:	82 81       	ldd	r24, Z+2	; 0x02
    1a06:	93 81       	ldd	r25, Z+3	; 0x03
    1a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	f8 01       	movw	r30, r16
    1a12:	91 83       	std	Z+1, r25	; 0x01
    1a14:	80 83       	st	Z, r24
    1a16:	de 01       	movw	r26, r28
    1a18:	ab 5a       	subi	r26, 0xAB	; 171
    1a1a:	bf 4f       	sbci	r27, 0xFF	; 255
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	e7 5a       	subi	r30, 0xA7	; 167
    1a20:	ff 4f       	sbci	r31, 0xFF	; 255
    1a22:	80 81       	ld	r24, Z
    1a24:	91 81       	ldd	r25, Z+1	; 0x01
    1a26:	8d 93       	st	X+, r24
    1a28:	9c 93       	st	X, r25
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	eb 5a       	subi	r30, 0xAB	; 171
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	80 81       	ld	r24, Z
    1a32:	91 81       	ldd	r25, Z+1	; 0x01
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	f1 f7       	brne	.-4      	; 0x1a34 <main+0x750>
    1a38:	fe 01       	movw	r30, r28
    1a3a:	eb 5a       	subi	r30, 0xAB	; 171
    1a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3e:	91 83       	std	Z+1, r25	; 0x01
    1a40:	80 83       	st	Z, r24
					_delay_ms(100);
					/* the control ECU will replay with a byte which indicate if password correct or not */
					uint8 respone = UART_recieveByte();
    1a42:	0e 94 13 21 	call	0x4226	; 0x4226 <UART_recieveByte>
    1a46:	fe 01       	movw	r30, r28
    1a48:	e1 57       	subi	r30, 0x71	; 113
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	80 83       	st	Z, r24
					if (respone == PASSWORD_CORRECT) {
    1a4e:	fe 01       	movw	r30, r28
    1a50:	e1 57       	subi	r30, 0x71	; 113
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	80 81       	ld	r24, Z
    1a56:	8a 3a       	cpi	r24, 0xAA	; 170
    1a58:	09 f0       	breq	.+2      	; 0x1a5c <main+0x778>
    1a5a:	a6 c1       	rjmp	.+844    	; 0x1da8 <main+0xac4>
						/* reset the tries variable */
						number_of_tries = 0;
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	ee 56       	subi	r30, 0x6E	; 110
    1a60:	ff 4f       	sbci	r31, 0xFF	; 255
    1a62:	10 82       	st	Z, r1
						LCD_clearScreen();
    1a64:	0e 94 bb 1a 	call	0x3576	; 0x3576 <LCD_clearScreen>
						LCD_displayString("Correct Password");
    1a68:	83 ef       	ldi	r24, 0xF3	; 243
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
						LCD_clearScreen();
    1a70:	0e 94 bb 1a 	call	0x3576	; 0x3576 <LCD_clearScreen>
						/* the password is correct, then start door open mode */
						LCD_clearScreen();
    1a74:	0e 94 bb 1a 	call	0x3576	; 0x3576 <LCD_clearScreen>
						LCD_displayString("    Door is     ");
    1a78:	84 e0       	ldi	r24, 0x04	; 4
    1a7a:	91 e0       	ldi	r25, 0x01	; 1
    1a7c:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
						LCD_moveCursor(1, 0);
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	60 e0       	ldi	r22, 0x00	; 0
    1a84:	0e 94 3d 1a 	call	0x347a	; 0x347a <LCD_moveCursor>
						LCD_displayString("   Unlocking    ");
    1a88:	85 e1       	ldi	r24, 0x15	; 21
    1a8a:	91 e0       	ldi	r25, 0x01	; 1
    1a8c:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
						/* waiting for 15 seconds until the door is unlocking */
						Timer1_DelaySecond(DOOR_UNLOCKING_PERIOD);
    1a90:	85 e0       	ldi	r24, 0x05	; 5
    1a92:	0e 94 bc 13 	call	0x2778	; 0x2778 <Timer1_DelaySecond>
						LCD_clearScreen();
    1a96:	0e 94 bb 1a 	call	0x3576	; 0x3576 <LCD_clearScreen>
						LCD_displayString("wait fr checking");
    1a9a:	86 e2       	ldi	r24, 0x26	; 38
    1a9c:	91 e0       	ldi	r25, 0x01	; 1
    1a9e:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
						LCD_moveCursor(1, 0);
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	60 e0       	ldi	r22, 0x00	; 0
    1aa6:	0e 94 3d 1a 	call	0x347a	; 0x347a <LCD_moveCursor>
						LCD_displayString(" people to enter");
    1aaa:	87 e3       	ldi	r24, 0x37	; 55
    1aac:	91 e0       	ldi	r25, 0x01	; 1
    1aae:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	ef 5a       	subi	r30, 0xAF	; 175
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	aa e7       	ldi	r26, 0x7A	; 122
    1abe:	b3 e4       	ldi	r27, 0x43	; 67
    1ac0:	80 83       	st	Z, r24
    1ac2:	91 83       	std	Z+1, r25	; 0x01
    1ac4:	a2 83       	std	Z+2, r26	; 0x02
    1ac6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac8:	8e 01       	movw	r16, r28
    1aca:	03 5b       	subi	r16, 0xB3	; 179
    1acc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ace:	fe 01       	movw	r30, r28
    1ad0:	ef 5a       	subi	r30, 0xAF	; 175
    1ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad4:	60 81       	ld	r22, Z
    1ad6:	71 81       	ldd	r23, Z+1	; 0x01
    1ad8:	82 81       	ldd	r24, Z+2	; 0x02
    1ada:	93 81       	ldd	r25, Z+3	; 0x03
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	4a ef       	ldi	r20, 0xFA	; 250
    1ae2:	54 e4       	ldi	r21, 0x44	; 68
    1ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	f8 01       	movw	r30, r16
    1aee:	80 83       	st	Z, r24
    1af0:	91 83       	std	Z+1, r25	; 0x01
    1af2:	a2 83       	std	Z+2, r26	; 0x02
    1af4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1af6:	fe 01       	movw	r30, r28
    1af8:	e3 5b       	subi	r30, 0xB3	; 179
    1afa:	ff 4f       	sbci	r31, 0xFF	; 255
    1afc:	60 81       	ld	r22, Z
    1afe:	71 81       	ldd	r23, Z+1	; 0x01
    1b00:	82 81       	ldd	r24, Z+2	; 0x02
    1b02:	93 81       	ldd	r25, Z+3	; 0x03
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e8       	ldi	r20, 0x80	; 128
    1b0a:	5f e3       	ldi	r21, 0x3F	; 63
    1b0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b10:	88 23       	and	r24, r24
    1b12:	44 f4       	brge	.+16     	; 0x1b24 <main+0x840>
		__ticks = 1;
    1b14:	fe 01       	movw	r30, r28
    1b16:	e5 5b       	subi	r30, 0xB5	; 181
    1b18:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	91 83       	std	Z+1, r25	; 0x01
    1b20:	80 83       	st	Z, r24
    1b22:	64 c0       	rjmp	.+200    	; 0x1bec <main+0x908>
	else if (__tmp > 65535)
    1b24:	fe 01       	movw	r30, r28
    1b26:	e3 5b       	subi	r30, 0xB3	; 179
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	60 81       	ld	r22, Z
    1b2c:	71 81       	ldd	r23, Z+1	; 0x01
    1b2e:	82 81       	ldd	r24, Z+2	; 0x02
    1b30:	93 81       	ldd	r25, Z+3	; 0x03
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	3f ef       	ldi	r19, 0xFF	; 255
    1b36:	4f e7       	ldi	r20, 0x7F	; 127
    1b38:	57 e4       	ldi	r21, 0x47	; 71
    1b3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b3e:	18 16       	cp	r1, r24
    1b40:	0c f0       	brlt	.+2      	; 0x1b44 <main+0x860>
    1b42:	43 c0       	rjmp	.+134    	; 0x1bca <main+0x8e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b44:	fe 01       	movw	r30, r28
    1b46:	ef 5a       	subi	r30, 0xAF	; 175
    1b48:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4a:	60 81       	ld	r22, Z
    1b4c:	71 81       	ldd	r23, Z+1	; 0x01
    1b4e:	82 81       	ldd	r24, Z+2	; 0x02
    1b50:	93 81       	ldd	r25, Z+3	; 0x03
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	40 e2       	ldi	r20, 0x20	; 32
    1b58:	51 e4       	ldi	r21, 0x41	; 65
    1b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	8e 01       	movw	r16, r28
    1b64:	05 5b       	subi	r16, 0xB5	; 181
    1b66:	1f 4f       	sbci	r17, 0xFF	; 255
    1b68:	bc 01       	movw	r22, r24
    1b6a:	cd 01       	movw	r24, r26
    1b6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	f8 01       	movw	r30, r16
    1b76:	91 83       	std	Z+1, r25	; 0x01
    1b78:	80 83       	st	Z, r24
    1b7a:	1f c0       	rjmp	.+62     	; 0x1bba <main+0x8d6>
    1b7c:	fe 01       	movw	r30, r28
    1b7e:	e7 5b       	subi	r30, 0xB7	; 183
    1b80:	ff 4f       	sbci	r31, 0xFF	; 255
    1b82:	88 ec       	ldi	r24, 0xC8	; 200
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	91 83       	std	Z+1, r25	; 0x01
    1b88:	80 83       	st	Z, r24
    1b8a:	fe 01       	movw	r30, r28
    1b8c:	e7 5b       	subi	r30, 0xB7	; 183
    1b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b90:	80 81       	ld	r24, Z
    1b92:	91 81       	ldd	r25, Z+1	; 0x01
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	f1 f7       	brne	.-4      	; 0x1b94 <main+0x8b0>
    1b98:	fe 01       	movw	r30, r28
    1b9a:	e7 5b       	subi	r30, 0xB7	; 183
    1b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9e:	91 83       	std	Z+1, r25	; 0x01
    1ba0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba2:	de 01       	movw	r26, r28
    1ba4:	a5 5b       	subi	r26, 0xB5	; 181
    1ba6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ba8:	fe 01       	movw	r30, r28
    1baa:	e5 5b       	subi	r30, 0xB5	; 181
    1bac:	ff 4f       	sbci	r31, 0xFF	; 255
    1bae:	80 81       	ld	r24, Z
    1bb0:	91 81       	ldd	r25, Z+1	; 0x01
    1bb2:	01 97       	sbiw	r24, 0x01	; 1
    1bb4:	11 96       	adiw	r26, 0x01	; 1
    1bb6:	9c 93       	st	X, r25
    1bb8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bba:	fe 01       	movw	r30, r28
    1bbc:	e5 5b       	subi	r30, 0xB5	; 181
    1bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc0:	80 81       	ld	r24, Z
    1bc2:	91 81       	ldd	r25, Z+1	; 0x01
    1bc4:	00 97       	sbiw	r24, 0x00	; 0
    1bc6:	d1 f6       	brne	.-76     	; 0x1b7c <main+0x898>
    1bc8:	27 c0       	rjmp	.+78     	; 0x1c18 <main+0x934>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bca:	8e 01       	movw	r16, r28
    1bcc:	05 5b       	subi	r16, 0xB5	; 181
    1bce:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd0:	fe 01       	movw	r30, r28
    1bd2:	e3 5b       	subi	r30, 0xB3	; 179
    1bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd6:	60 81       	ld	r22, Z
    1bd8:	71 81       	ldd	r23, Z+1	; 0x01
    1bda:	82 81       	ldd	r24, Z+2	; 0x02
    1bdc:	93 81       	ldd	r25, Z+3	; 0x03
    1bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	f8 01       	movw	r30, r16
    1be8:	91 83       	std	Z+1, r25	; 0x01
    1bea:	80 83       	st	Z, r24
    1bec:	de 01       	movw	r26, r28
    1bee:	a9 5b       	subi	r26, 0xB9	; 185
    1bf0:	bf 4f       	sbci	r27, 0xFF	; 255
    1bf2:	fe 01       	movw	r30, r28
    1bf4:	e5 5b       	subi	r30, 0xB5	; 181
    1bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf8:	80 81       	ld	r24, Z
    1bfa:	91 81       	ldd	r25, Z+1	; 0x01
    1bfc:	8d 93       	st	X+, r24
    1bfe:	9c 93       	st	X, r25
    1c00:	fe 01       	movw	r30, r28
    1c02:	e9 5b       	subi	r30, 0xB9	; 185
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	80 81       	ld	r24, Z
    1c08:	91 81       	ldd	r25, Z+1	; 0x01
    1c0a:	01 97       	sbiw	r24, 0x01	; 1
    1c0c:	f1 f7       	brne	.-4      	; 0x1c0a <main+0x926>
    1c0e:	fe 01       	movw	r30, r28
    1c10:	e9 5b       	subi	r30, 0xB9	; 185
    1c12:	ff 4f       	sbci	r31, 0xFF	; 255
    1c14:	91 83       	std	Z+1, r25	; 0x01
    1c16:	80 83       	st	Z, r24
						_delay_ms(250);
						uint8 people, msg = 0;
    1c18:	fe 01       	movw	r30, r28
    1c1a:	e3 57       	subi	r30, 0x73	; 115
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	10 82       	st	Z, r1
						while (youssef_is_here) {
							people = UART_recieveByte();
    1c20:	0e 94 13 21 	call	0x4226	; 0x4226 <UART_recieveByte>
    1c24:	fe 01       	movw	r30, r28
    1c26:	e2 57       	subi	r30, 0x72	; 114
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	80 83       	st	Z, r24
							if (people == NO_PEOPLE_ENTERING) {
    1c2c:	fe 01       	movw	r30, r28
    1c2e:	e2 57       	subi	r30, 0x72	; 114
    1c30:	ff 4f       	sbci	r31, 0xFF	; 255
    1c32:	80 81       	ld	r24, Z
    1c34:	82 30       	cpi	r24, 0x02	; 2
    1c36:	09 f4       	brne	.+2      	; 0x1c3a <main+0x956>
    1c38:	a5 c0       	rjmp	.+330    	; 0x1d84 <main+0xaa0>
								break; /*Exit loop and proceed to lock the door*/
							} else if (people == PEOPLE_ENTERING && msg != 1) {
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	e2 57       	subi	r30, 0x72	; 114
    1c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c40:	80 81       	ld	r24, Z
    1c42:	88 23       	and	r24, r24
    1c44:	69 f7       	brne	.-38     	; 0x1c20 <main+0x93c>
    1c46:	fe 01       	movw	r30, r28
    1c48:	e3 57       	subi	r30, 0x73	; 115
    1c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4c:	80 81       	ld	r24, Z
    1c4e:	81 30       	cpi	r24, 0x01	; 1
    1c50:	39 f3       	breq	.-50     	; 0x1c20 <main+0x93c>
								LCD_clearScreen();
    1c52:	0e 94 bb 1a 	call	0x3576	; 0x3576 <LCD_clearScreen>
								LCD_displayString(" People Entering");
    1c56:	88 e4       	ldi	r24, 0x48	; 72
    1c58:	91 e0       	ldi	r25, 0x01	; 1
    1c5a:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
								LCD_moveCursor(1, 0);
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	60 e0       	ldi	r22, 0x00	; 0
    1c62:	0e 94 3d 1a 	call	0x347a	; 0x347a <LCD_moveCursor>
								LCD_displayString("   Please wait  ");
    1c66:	89 e5       	ldi	r24, 0x59	; 89
    1c68:	91 e0       	ldi	r25, 0x01	; 1
    1c6a:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
								msg = 1;
    1c6e:	fe 01       	movw	r30, r28
    1c70:	e3 57       	subi	r30, 0x73	; 115
    1c72:	ff 4f       	sbci	r31, 0xFF	; 255
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	80 83       	st	Z, r24
    1c78:	fe 01       	movw	r30, r28
    1c7a:	ed 5b       	subi	r30, 0xBD	; 189
    1c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	aa ef       	ldi	r26, 0xFA	; 250
    1c84:	b3 e4       	ldi	r27, 0x43	; 67
    1c86:	80 83       	st	Z, r24
    1c88:	91 83       	std	Z+1, r25	; 0x01
    1c8a:	a2 83       	std	Z+2, r26	; 0x02
    1c8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8e:	8e 01       	movw	r16, r28
    1c90:	01 5c       	subi	r16, 0xC1	; 193
    1c92:	1f 4f       	sbci	r17, 0xFF	; 255
    1c94:	fe 01       	movw	r30, r28
    1c96:	ed 5b       	subi	r30, 0xBD	; 189
    1c98:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9a:	60 81       	ld	r22, Z
    1c9c:	71 81       	ldd	r23, Z+1	; 0x01
    1c9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ca0:	93 81       	ldd	r25, Z+3	; 0x03
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	4a ef       	ldi	r20, 0xFA	; 250
    1ca8:	54 e4       	ldi	r21, 0x44	; 68
    1caa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	f8 01       	movw	r30, r16
    1cb4:	80 83       	st	Z, r24
    1cb6:	91 83       	std	Z+1, r25	; 0x01
    1cb8:	a2 83       	std	Z+2, r26	; 0x02
    1cba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cbc:	fe 01       	movw	r30, r28
    1cbe:	ff 96       	adiw	r30, 0x3f	; 63
    1cc0:	60 81       	ld	r22, Z
    1cc2:	71 81       	ldd	r23, Z+1	; 0x01
    1cc4:	82 81       	ldd	r24, Z+2	; 0x02
    1cc6:	93 81       	ldd	r25, Z+3	; 0x03
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	40 e8       	ldi	r20, 0x80	; 128
    1cce:	5f e3       	ldi	r21, 0x3F	; 63
    1cd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cd4:	88 23       	and	r24, r24
    1cd6:	2c f4       	brge	.+10     	; 0x1ce2 <main+0x9fe>
		__ticks = 1;
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	9e af       	std	Y+62, r25	; 0x3e
    1cde:	8d af       	std	Y+61, r24	; 0x3d
    1ce0:	46 c0       	rjmp	.+140    	; 0x1d6e <main+0xa8a>
	else if (__tmp > 65535)
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	ff 96       	adiw	r30, 0x3f	; 63
    1ce6:	60 81       	ld	r22, Z
    1ce8:	71 81       	ldd	r23, Z+1	; 0x01
    1cea:	82 81       	ldd	r24, Z+2	; 0x02
    1cec:	93 81       	ldd	r25, Z+3	; 0x03
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	3f ef       	ldi	r19, 0xFF	; 255
    1cf2:	4f e7       	ldi	r20, 0x7F	; 127
    1cf4:	57 e4       	ldi	r21, 0x47	; 71
    1cf6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cfa:	18 16       	cp	r1, r24
    1cfc:	64 f5       	brge	.+88     	; 0x1d56 <main+0xa72>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfe:	fe 01       	movw	r30, r28
    1d00:	ed 5b       	subi	r30, 0xBD	; 189
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	60 81       	ld	r22, Z
    1d06:	71 81       	ldd	r23, Z+1	; 0x01
    1d08:	82 81       	ldd	r24, Z+2	; 0x02
    1d0a:	93 81       	ldd	r25, Z+3	; 0x03
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	40 e2       	ldi	r20, 0x20	; 32
    1d12:	51 e4       	ldi	r21, 0x41	; 65
    1d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	bc 01       	movw	r22, r24
    1d1e:	cd 01       	movw	r24, r26
    1d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	9e af       	std	Y+62, r25	; 0x3e
    1d2a:	8d af       	std	Y+61, r24	; 0x3d
    1d2c:	0f c0       	rjmp	.+30     	; 0x1d4c <main+0xa68>
    1d2e:	88 ec       	ldi	r24, 0xC8	; 200
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	9c af       	std	Y+60, r25	; 0x3c
    1d34:	8b af       	std	Y+59, r24	; 0x3b
    1d36:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d38:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	f1 f7       	brne	.-4      	; 0x1d3a <main+0xa56>
    1d3e:	9c af       	std	Y+60, r25	; 0x3c
    1d40:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d42:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d44:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	9e af       	std	Y+62, r25	; 0x3e
    1d4a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d4c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d4e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d50:	00 97       	sbiw	r24, 0x00	; 0
    1d52:	69 f7       	brne	.-38     	; 0x1d2e <main+0xa4a>
    1d54:	65 cf       	rjmp	.-310    	; 0x1c20 <main+0x93c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d56:	fe 01       	movw	r30, r28
    1d58:	ff 96       	adiw	r30, 0x3f	; 63
    1d5a:	60 81       	ld	r22, Z
    1d5c:	71 81       	ldd	r23, Z+1	; 0x01
    1d5e:	82 81       	ldd	r24, Z+2	; 0x02
    1d60:	93 81       	ldd	r25, Z+3	; 0x03
    1d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	9e af       	std	Y+62, r25	; 0x3e
    1d6c:	8d af       	std	Y+61, r24	; 0x3d
    1d6e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d70:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d72:	9a af       	std	Y+58, r25	; 0x3a
    1d74:	89 af       	std	Y+57, r24	; 0x39
    1d76:	89 ad       	ldd	r24, Y+57	; 0x39
    1d78:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	f1 f7       	brne	.-4      	; 0x1d7a <main+0xa96>
    1d7e:	9a af       	std	Y+58, r25	; 0x3a
    1d80:	89 af       	std	Y+57, r24	; 0x39
    1d82:	4e cf       	rjmp	.-356    	; 0x1c20 <main+0x93c>
						 while (peopleEntering) {
						 if (UART_recieveByte() == NO_PEOPLE_ENTERING) {
						 peopleEntering = FALSE;
						 }
						 }*/
						LCD_clearScreen();
    1d84:	0e 94 bb 1a 	call	0x3576	; 0x3576 <LCD_clearScreen>
						LCD_displayString("    Door is     ");
    1d88:	84 e0       	ldi	r24, 0x04	; 4
    1d8a:	91 e0       	ldi	r25, 0x01	; 1
    1d8c:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
						LCD_moveCursor(1, 0);
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	60 e0       	ldi	r22, 0x00	; 0
    1d94:	0e 94 3d 1a 	call	0x347a	; 0x347a <LCD_moveCursor>
						LCD_displayString("    locking     ");
    1d98:	8a e6       	ldi	r24, 0x6A	; 106
    1d9a:	91 e0       	ldi	r25, 0x01	; 1
    1d9c:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
						/* waiting for 15 seconds until the door is locking */
						Timer1_DelaySecond(DOOR_LOCKING_PERIOD);
    1da0:	85 e0       	ldi	r24, 0x05	; 5
    1da2:	0e 94 bc 13 	call	0x2778	; 0x2778 <Timer1_DelaySecond>
    1da6:	61 cd       	rjmp	.-1342   	; 0x186a <main+0x586>
						break;
					} else if (respone == PASSWORD_INCORRECT) {
    1da8:	fe 01       	movw	r30, r28
    1daa:	e1 57       	subi	r30, 0x71	; 113
    1dac:	ff 4f       	sbci	r31, 0xFF	; 255
    1dae:	80 81       	ld	r24, Z
    1db0:	8b 3b       	cpi	r24, 0xBB	; 187
    1db2:	09 f0       	breq	.+2      	; 0x1db6 <main+0xad2>
    1db4:	8e c0       	rjmp	.+284    	; 0x1ed2 <main+0xbee>
						LCD_clearScreen();
    1db6:	0e 94 bb 1a 	call	0x3576	; 0x3576 <LCD_clearScreen>
						LCD_displayString("Wrong Password");
    1dba:	8b e7       	ldi	r24, 0x7B	; 123
    1dbc:	91 e0       	ldi	r25, 0x01	; 1
    1dbe:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	aa ef       	ldi	r26, 0xFA	; 250
    1dc8:	b3 e4       	ldi	r27, 0x43	; 67
    1dca:	8d ab       	std	Y+53, r24	; 0x35
    1dcc:	9e ab       	std	Y+54, r25	; 0x36
    1dce:	af ab       	std	Y+55, r26	; 0x37
    1dd0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd2:	6d a9       	ldd	r22, Y+53	; 0x35
    1dd4:	7e a9       	ldd	r23, Y+54	; 0x36
    1dd6:	8f a9       	ldd	r24, Y+55	; 0x37
    1dd8:	98 ad       	ldd	r25, Y+56	; 0x38
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	4a ef       	ldi	r20, 0xFA	; 250
    1de0:	54 e4       	ldi	r21, 0x44	; 68
    1de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	89 ab       	std	Y+49, r24	; 0x31
    1dec:	9a ab       	std	Y+50, r25	; 0x32
    1dee:	ab ab       	std	Y+51, r26	; 0x33
    1df0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1df2:	69 a9       	ldd	r22, Y+49	; 0x31
    1df4:	7a a9       	ldd	r23, Y+50	; 0x32
    1df6:	8b a9       	ldd	r24, Y+51	; 0x33
    1df8:	9c a9       	ldd	r25, Y+52	; 0x34
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	40 e8       	ldi	r20, 0x80	; 128
    1e00:	5f e3       	ldi	r21, 0x3F	; 63
    1e02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e06:	88 23       	and	r24, r24
    1e08:	2c f4       	brge	.+10     	; 0x1e14 <main+0xb30>
		__ticks = 1;
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	98 ab       	std	Y+48, r25	; 0x30
    1e10:	8f a7       	std	Y+47, r24	; 0x2f
    1e12:	3f c0       	rjmp	.+126    	; 0x1e92 <main+0xbae>
	else if (__tmp > 65535)
    1e14:	69 a9       	ldd	r22, Y+49	; 0x31
    1e16:	7a a9       	ldd	r23, Y+50	; 0x32
    1e18:	8b a9       	ldd	r24, Y+51	; 0x33
    1e1a:	9c a9       	ldd	r25, Y+52	; 0x34
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	3f ef       	ldi	r19, 0xFF	; 255
    1e20:	4f e7       	ldi	r20, 0x7F	; 127
    1e22:	57 e4       	ldi	r21, 0x47	; 71
    1e24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e28:	18 16       	cp	r1, r24
    1e2a:	4c f5       	brge	.+82     	; 0x1e7e <main+0xb9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e2c:	6d a9       	ldd	r22, Y+53	; 0x35
    1e2e:	7e a9       	ldd	r23, Y+54	; 0x36
    1e30:	8f a9       	ldd	r24, Y+55	; 0x37
    1e32:	98 ad       	ldd	r25, Y+56	; 0x38
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	40 e2       	ldi	r20, 0x20	; 32
    1e3a:	51 e4       	ldi	r21, 0x41	; 65
    1e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	bc 01       	movw	r22, r24
    1e46:	cd 01       	movw	r24, r26
    1e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	98 ab       	std	Y+48, r25	; 0x30
    1e52:	8f a7       	std	Y+47, r24	; 0x2f
    1e54:	0f c0       	rjmp	.+30     	; 0x1e74 <main+0xb90>
    1e56:	88 ec       	ldi	r24, 0xC8	; 200
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	9e a7       	std	Y+46, r25	; 0x2e
    1e5c:	8d a7       	std	Y+45, r24	; 0x2d
    1e5e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e60:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	f1 f7       	brne	.-4      	; 0x1e62 <main+0xb7e>
    1e66:	9e a7       	std	Y+46, r25	; 0x2e
    1e68:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e6c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	98 ab       	std	Y+48, r25	; 0x30
    1e72:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e74:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e76:	98 a9       	ldd	r25, Y+48	; 0x30
    1e78:	00 97       	sbiw	r24, 0x00	; 0
    1e7a:	69 f7       	brne	.-38     	; 0x1e56 <main+0xb72>
    1e7c:	14 c0       	rjmp	.+40     	; 0x1ea6 <main+0xbc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e7e:	69 a9       	ldd	r22, Y+49	; 0x31
    1e80:	7a a9       	ldd	r23, Y+50	; 0x32
    1e82:	8b a9       	ldd	r24, Y+51	; 0x33
    1e84:	9c a9       	ldd	r25, Y+52	; 0x34
    1e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	98 ab       	std	Y+48, r25	; 0x30
    1e90:	8f a7       	std	Y+47, r24	; 0x2f
    1e92:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e94:	98 a9       	ldd	r25, Y+48	; 0x30
    1e96:	9c a7       	std	Y+44, r25	; 0x2c
    1e98:	8b a7       	std	Y+43, r24	; 0x2b
    1e9a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e9c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e9e:	01 97       	sbiw	r24, 0x01	; 1
    1ea0:	f1 f7       	brne	.-4      	; 0x1e9e <main+0xbba>
    1ea2:	9c a7       	std	Y+44, r25	; 0x2c
    1ea4:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(500);
						/* each time the entered password is incorrect, the try variable increment by 1 */
						number_of_tries++;
    1ea6:	de 01       	movw	r26, r28
    1ea8:	ae 56       	subi	r26, 0x6E	; 110
    1eaa:	bf 4f       	sbci	r27, 0xFF	; 255
    1eac:	fe 01       	movw	r30, r28
    1eae:	ee 56       	subi	r30, 0x6E	; 110
    1eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb2:	80 81       	ld	r24, Z
    1eb4:	8f 5f       	subi	r24, 0xFF	; 255
    1eb6:	8c 93       	st	X, r24
						/* if the tries reach to 3, send to control ECU to enable the buzzer */
						if (number_of_tries == NUMBER_OF_PASSWORD_TRIES) {
    1eb8:	fe 01       	movw	r30, r28
    1eba:	ee 56       	subi	r30, 0x6E	; 110
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	80 81       	ld	r24, Z
    1ec0:	83 30       	cpi	r24, 0x03	; 3
    1ec2:	21 f4       	brne	.+8      	; 0x1ecc <main+0xbe8>
							UART_sendByte(BUZZER_ON);
    1ec4:	88 e6       	ldi	r24, 0x68	; 104
    1ec6:	0e 94 ff 20 	call	0x41fe	; 0x41fe <UART_sendByte>
    1eca:	03 c0       	rjmp	.+6      	; 0x1ed2 <main+0xbee>
						} else {
							UART_sendByte(BUZZER_OFF);
    1ecc:	89 e6       	ldi	r24, 0x69	; 105
    1ece:	0e 94 ff 20 	call	0x41fe	; 0x41fe <UART_sendByte>
						}
					}
					if (number_of_tries == NUMBER_OF_PASSWORD_TRIES) {
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	ee 56       	subi	r30, 0x6E	; 110
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	80 81       	ld	r24, Z
    1eda:	83 30       	cpi	r24, 0x03	; 3
    1edc:	09 f0       	breq	.+2      	; 0x1ee0 <main+0xbfc>
    1ede:	ea cc       	rjmp	.-1580   	; 0x18b4 <main+0x5d0>
						LCD_clearScreen();
    1ee0:	0e 94 bb 1a 	call	0x3576	; 0x3576 <LCD_clearScreen>
						LCD_displayString("  System Locked ");
    1ee4:	8a e8       	ldi	r24, 0x8A	; 138
    1ee6:	91 e0       	ldi	r25, 0x01	; 1
    1ee8:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
						LCD_moveCursor(1, 0);
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	60 e0       	ldi	r22, 0x00	; 0
    1ef0:	0e 94 3d 1a 	call	0x347a	; 0x347a <LCD_moveCursor>
						LCD_displayString("Wait for 1 min");
    1ef4:	8b e9       	ldi	r24, 0x9B	; 155
    1ef6:	91 e0       	ldi	r25, 0x01	; 1
    1ef8:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
						/* waiting for 1 minute for the */
						Timer1_DelaySecond(BUZZER_ACTIVE_PERIOD);
    1efc:	85 e0       	ldi	r24, 0x05	; 5
    1efe:	0e 94 bc 13 	call	0x2778	; 0x2778 <Timer1_DelaySecond>
						/* reset the tries variable */
						number_of_tries = 0;
    1f02:	fe 01       	movw	r30, r28
    1f04:	ee 56       	subi	r30, 0x6E	; 110
    1f06:	ff 4f       	sbci	r31, 0xFF	; 255
    1f08:	10 82       	st	Z, r1
    1f0a:	af cc       	rjmp	.-1698   	; 0x186a <main+0x586>
					}

				}
			}
			/* if choosing second option => change password */
			else if (temp == '-') {
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	ed 56       	subi	r30, 0x6D	; 109
    1f10:	ff 4f       	sbci	r31, 0xFF	; 255
    1f12:	80 81       	ld	r24, Z
    1f14:	8d 32       	cpi	r24, 0x2D	; 45
    1f16:	09 f0       	breq	.+2      	; 0x1f1a <main+0xc36>
    1f18:	a8 cc       	rjmp	.-1712   	; 0x186a <main+0x586>
				/*reset the number of tries*/
				number_of_tries = 0;
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	ee 56       	subi	r30, 0x6E	; 110
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	10 82       	st	Z, r1
				/*
				 * select the action of check password.
				 * the byte which sent to control ECU tell him to be ready to check
				 * the received password with the password in EEPROM.
				 */
				UART_sendByte(CHECK_PASSWORD_ACTION);
    1f22:	8d ed       	ldi	r24, 0xDD	; 221
    1f24:	0e 94 ff 20 	call	0x41fe	; 0x41fe <UART_sendByte>
				/*
				 * select the mode of open door.
				 * the byte which sent to control ECU tell him to be ready for
				 * change password mode.
				 */
				UART_sendByte(CHANGE_PASSWORD_MODE);
    1f28:	8e ee       	ldi	r24, 0xEE	; 238
    1f2a:	0e 94 ff 20 	call	0x41fe	; 0x41fe <UART_sendByte>
				while (youssef_is_here) {
					LCD_clearScreen();
    1f2e:	0e 94 bb 1a 	call	0x3576	; 0x3576 <LCD_clearScreen>
					LCD_displayString("plz enter old");
    1f32:	8a ea       	ldi	r24, 0xAA	; 170
    1f34:	91 e0       	ldi	r25, 0x01	; 1
    1f36:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
					LCD_moveCursor(1, 0);
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	60 e0       	ldi	r22, 0x00	; 0
    1f3e:	0e 94 3d 1a 	call	0x347a	; 0x347a <LCD_moveCursor>
					LCD_displayString("pass :) ");
    1f42:	88 eb       	ldi	r24, 0xB8	; 184
    1f44:	91 e0       	ldi	r25, 0x01	; 1
    1f46:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
					/* take the password from user using keypad */
					GetPasswordFromKeyPad(password);
    1f4a:	ce 01       	movw	r24, r28
    1f4c:	8c 56       	subi	r24, 0x6C	; 108
    1f4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f50:	0e 94 bb 12 	call	0x2576	; 0x2576 <GetPasswordFromKeyPad>
					/* send the password to control ECU to check if correct or not */
					sendPasswordToControlECU(password);
    1f54:	ce 01       	movw	r24, r28
    1f56:	8c 56       	subi	r24, 0x6C	; 108
    1f58:	9f 4f       	sbci	r25, 0xFF	; 255
    1f5a:	0e 94 97 13 	call	0x272e	; 0x272e <sendPasswordToControlECU>
					/* the control ECU will replay with a byte which indicate if password correct or not */
					if (UART_recieveByte() == PASSWORD_CORRECT) {
    1f5e:	0e 94 13 21 	call	0x4226	; 0x4226 <UART_recieveByte>
    1f62:	8a 3a       	cpi	r24, 0xAA	; 170
    1f64:	09 f0       	breq	.+2      	; 0x1f68 <main+0xc84>
    1f66:	0e c1       	rjmp	.+540    	; 0x2184 <main+0xea0>
						LCD_clearScreen();
    1f68:	0e 94 bb 1a 	call	0x3576	; 0x3576 <LCD_clearScreen>
						LCD_displayString("Correct Password");
    1f6c:	83 ef       	ldi	r24, 0xF3	; 243
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	aa e7       	ldi	r26, 0x7A	; 122
    1f7a:	b3 e4       	ldi	r27, 0x43	; 67
    1f7c:	8f a3       	std	Y+39, r24	; 0x27
    1f7e:	98 a7       	std	Y+40, r25	; 0x28
    1f80:	a9 a7       	std	Y+41, r26	; 0x29
    1f82:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f84:	6f a1       	ldd	r22, Y+39	; 0x27
    1f86:	78 a5       	ldd	r23, Y+40	; 0x28
    1f88:	89 a5       	ldd	r24, Y+41	; 0x29
    1f8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	4a ef       	ldi	r20, 0xFA	; 250
    1f92:	54 e4       	ldi	r21, 0x44	; 68
    1f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	8b a3       	std	Y+35, r24	; 0x23
    1f9e:	9c a3       	std	Y+36, r25	; 0x24
    1fa0:	ad a3       	std	Y+37, r26	; 0x25
    1fa2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fa4:	6b a1       	ldd	r22, Y+35	; 0x23
    1fa6:	7c a1       	ldd	r23, Y+36	; 0x24
    1fa8:	8d a1       	ldd	r24, Y+37	; 0x25
    1faa:	9e a1       	ldd	r25, Y+38	; 0x26
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	40 e8       	ldi	r20, 0x80	; 128
    1fb2:	5f e3       	ldi	r21, 0x3F	; 63
    1fb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fb8:	88 23       	and	r24, r24
    1fba:	2c f4       	brge	.+10     	; 0x1fc6 <main+0xce2>
		__ticks = 1;
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	9a a3       	std	Y+34, r25	; 0x22
    1fc2:	89 a3       	std	Y+33, r24	; 0x21
    1fc4:	3f c0       	rjmp	.+126    	; 0x2044 <main+0xd60>
	else if (__tmp > 65535)
    1fc6:	6b a1       	ldd	r22, Y+35	; 0x23
    1fc8:	7c a1       	ldd	r23, Y+36	; 0x24
    1fca:	8d a1       	ldd	r24, Y+37	; 0x25
    1fcc:	9e a1       	ldd	r25, Y+38	; 0x26
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	3f ef       	ldi	r19, 0xFF	; 255
    1fd2:	4f e7       	ldi	r20, 0x7F	; 127
    1fd4:	57 e4       	ldi	r21, 0x47	; 71
    1fd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fda:	18 16       	cp	r1, r24
    1fdc:	4c f5       	brge	.+82     	; 0x2030 <main+0xd4c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fde:	6f a1       	ldd	r22, Y+39	; 0x27
    1fe0:	78 a5       	ldd	r23, Y+40	; 0x28
    1fe2:	89 a5       	ldd	r24, Y+41	; 0x29
    1fe4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	40 e2       	ldi	r20, 0x20	; 32
    1fec:	51 e4       	ldi	r21, 0x41	; 65
    1fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	bc 01       	movw	r22, r24
    1ff8:	cd 01       	movw	r24, r26
    1ffa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	9a a3       	std	Y+34, r25	; 0x22
    2004:	89 a3       	std	Y+33, r24	; 0x21
    2006:	0f c0       	rjmp	.+30     	; 0x2026 <main+0xd42>
    2008:	88 ec       	ldi	r24, 0xC8	; 200
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	98 a3       	std	Y+32, r25	; 0x20
    200e:	8f 8f       	std	Y+31, r24	; 0x1f
    2010:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2012:	98 a1       	ldd	r25, Y+32	; 0x20
    2014:	01 97       	sbiw	r24, 0x01	; 1
    2016:	f1 f7       	brne	.-4      	; 0x2014 <main+0xd30>
    2018:	98 a3       	std	Y+32, r25	; 0x20
    201a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    201c:	89 a1       	ldd	r24, Y+33	; 0x21
    201e:	9a a1       	ldd	r25, Y+34	; 0x22
    2020:	01 97       	sbiw	r24, 0x01	; 1
    2022:	9a a3       	std	Y+34, r25	; 0x22
    2024:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2026:	89 a1       	ldd	r24, Y+33	; 0x21
    2028:	9a a1       	ldd	r25, Y+34	; 0x22
    202a:	00 97       	sbiw	r24, 0x00	; 0
    202c:	69 f7       	brne	.-38     	; 0x2008 <main+0xd24>
    202e:	14 c0       	rjmp	.+40     	; 0x2058 <main+0xd74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2030:	6b a1       	ldd	r22, Y+35	; 0x23
    2032:	7c a1       	ldd	r23, Y+36	; 0x24
    2034:	8d a1       	ldd	r24, Y+37	; 0x25
    2036:	9e a1       	ldd	r25, Y+38	; 0x26
    2038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	9a a3       	std	Y+34, r25	; 0x22
    2042:	89 a3       	std	Y+33, r24	; 0x21
    2044:	89 a1       	ldd	r24, Y+33	; 0x21
    2046:	9a a1       	ldd	r25, Y+34	; 0x22
    2048:	9e 8f       	std	Y+30, r25	; 0x1e
    204a:	8d 8f       	std	Y+29, r24	; 0x1d
    204c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    204e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	f1 f7       	brne	.-4      	; 0x2050 <main+0xd6c>
    2054:	9e 8f       	std	Y+30, r25	; 0x1e
    2056:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(250);
						Password_Changed = FALSE;
    2058:	fe 01       	movw	r30, r28
    205a:	e0 57       	subi	r30, 0x70	; 112
    205c:	ff 4f       	sbci	r31, 0xFF	; 255
    205e:	10 82       	st	Z, r1
    2060:	06 c0       	rjmp	.+12     	; 0x206e <main+0xd8a>
						/* loop until the password is changed and saved successfully to EEPROM */
						while (Password_Changed == FALSE) {
							Password_Changed = CreatePassword();
    2062:	0e 94 6d 11 	call	0x22da	; 0x22da <CreatePassword>
    2066:	fe 01       	movw	r30, r28
    2068:	e0 57       	subi	r30, 0x70	; 112
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	80 83       	st	Z, r24
						LCD_clearScreen();
						LCD_displayString("Correct Password");
						_delay_ms(250);
						Password_Changed = FALSE;
						/* loop until the password is changed and saved successfully to EEPROM */
						while (Password_Changed == FALSE) {
    206e:	fe 01       	movw	r30, r28
    2070:	e0 57       	subi	r30, 0x70	; 112
    2072:	ff 4f       	sbci	r31, 0xFF	; 255
    2074:	80 81       	ld	r24, Z
    2076:	88 23       	and	r24, r24
    2078:	a1 f3       	breq	.-24     	; 0x2062 <main+0xd7e>
							Password_Changed = CreatePassword();
						}
						LCD_clearScreen();
    207a:	0e 94 bb 1a 	call	0x3576	; 0x3576 <LCD_clearScreen>
						LCD_displayString("Password Changed");
    207e:	81 ec       	ldi	r24, 0xC1	; 193
    2080:	91 e0       	ldi	r25, 0x01	; 1
    2082:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
						LCD_moveCursor(1, 0);
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	60 e0       	ldi	r22, 0x00	; 0
    208a:	0e 94 3d 1a 	call	0x347a	; 0x347a <LCD_moveCursor>
						LCD_displayString("  Successfully  ");
    208e:	82 ed       	ldi	r24, 0xD2	; 210
    2090:	91 e0       	ldi	r25, 0x01	; 1
    2092:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	aa e7       	ldi	r26, 0x7A	; 122
    209c:	b3 e4       	ldi	r27, 0x43	; 67
    209e:	89 8f       	std	Y+25, r24	; 0x19
    20a0:	9a 8f       	std	Y+26, r25	; 0x1a
    20a2:	ab 8f       	std	Y+27, r26	; 0x1b
    20a4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a6:	69 8d       	ldd	r22, Y+25	; 0x19
    20a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	4a ef       	ldi	r20, 0xFA	; 250
    20b4:	54 e4       	ldi	r21, 0x44	; 68
    20b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	8d 8b       	std	Y+21, r24	; 0x15
    20c0:	9e 8b       	std	Y+22, r25	; 0x16
    20c2:	af 8b       	std	Y+23, r26	; 0x17
    20c4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20c6:	6d 89       	ldd	r22, Y+21	; 0x15
    20c8:	7e 89       	ldd	r23, Y+22	; 0x16
    20ca:	8f 89       	ldd	r24, Y+23	; 0x17
    20cc:	98 8d       	ldd	r25, Y+24	; 0x18
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	40 e8       	ldi	r20, 0x80	; 128
    20d4:	5f e3       	ldi	r21, 0x3F	; 63
    20d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20da:	88 23       	and	r24, r24
    20dc:	2c f4       	brge	.+10     	; 0x20e8 <main+0xe04>
		__ticks = 1;
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	9c 8b       	std	Y+20, r25	; 0x14
    20e4:	8b 8b       	std	Y+19, r24	; 0x13
    20e6:	3f c0       	rjmp	.+126    	; 0x2166 <main+0xe82>
	else if (__tmp > 65535)
    20e8:	6d 89       	ldd	r22, Y+21	; 0x15
    20ea:	7e 89       	ldd	r23, Y+22	; 0x16
    20ec:	8f 89       	ldd	r24, Y+23	; 0x17
    20ee:	98 8d       	ldd	r25, Y+24	; 0x18
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	3f ef       	ldi	r19, 0xFF	; 255
    20f4:	4f e7       	ldi	r20, 0x7F	; 127
    20f6:	57 e4       	ldi	r21, 0x47	; 71
    20f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20fc:	18 16       	cp	r1, r24
    20fe:	4c f5       	brge	.+82     	; 0x2152 <main+0xe6e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2100:	69 8d       	ldd	r22, Y+25	; 0x19
    2102:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2104:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2106:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	40 e2       	ldi	r20, 0x20	; 32
    210e:	51 e4       	ldi	r21, 0x41	; 65
    2110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	bc 01       	movw	r22, r24
    211a:	cd 01       	movw	r24, r26
    211c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	9c 8b       	std	Y+20, r25	; 0x14
    2126:	8b 8b       	std	Y+19, r24	; 0x13
    2128:	0f c0       	rjmp	.+30     	; 0x2148 <main+0xe64>
    212a:	88 ec       	ldi	r24, 0xC8	; 200
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	9a 8b       	std	Y+18, r25	; 0x12
    2130:	89 8b       	std	Y+17, r24	; 0x11
    2132:	89 89       	ldd	r24, Y+17	; 0x11
    2134:	9a 89       	ldd	r25, Y+18	; 0x12
    2136:	01 97       	sbiw	r24, 0x01	; 1
    2138:	f1 f7       	brne	.-4      	; 0x2136 <main+0xe52>
    213a:	9a 8b       	std	Y+18, r25	; 0x12
    213c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213e:	8b 89       	ldd	r24, Y+19	; 0x13
    2140:	9c 89       	ldd	r25, Y+20	; 0x14
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	9c 8b       	std	Y+20, r25	; 0x14
    2146:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2148:	8b 89       	ldd	r24, Y+19	; 0x13
    214a:	9c 89       	ldd	r25, Y+20	; 0x14
    214c:	00 97       	sbiw	r24, 0x00	; 0
    214e:	69 f7       	brne	.-38     	; 0x212a <main+0xe46>
    2150:	14 c0       	rjmp	.+40     	; 0x217a <main+0xe96>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2152:	6d 89       	ldd	r22, Y+21	; 0x15
    2154:	7e 89       	ldd	r23, Y+22	; 0x16
    2156:	8f 89       	ldd	r24, Y+23	; 0x17
    2158:	98 8d       	ldd	r25, Y+24	; 0x18
    215a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	9c 8b       	std	Y+20, r25	; 0x14
    2164:	8b 8b       	std	Y+19, r24	; 0x13
    2166:	8b 89       	ldd	r24, Y+19	; 0x13
    2168:	9c 89       	ldd	r25, Y+20	; 0x14
    216a:	98 8b       	std	Y+16, r25	; 0x10
    216c:	8f 87       	std	Y+15, r24	; 0x0f
    216e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2170:	98 89       	ldd	r25, Y+16	; 0x10
    2172:	01 97       	sbiw	r24, 0x01	; 1
    2174:	f1 f7       	brne	.-4      	; 0x2172 <main+0xe8e>
    2176:	98 8b       	std	Y+16, r25	; 0x10
    2178:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(250);
						/* reset the tries variable */
						number_of_tries = 0;
    217a:	fe 01       	movw	r30, r28
    217c:	ee 56       	subi	r30, 0x6E	; 110
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	10 82       	st	Z, r1
    2182:	73 cb       	rjmp	.-2330   	; 0x186a <main+0x586>
						break;
					} else {
						LCD_clearScreen();
    2184:	0e 94 bb 1a 	call	0x3576	; 0x3576 <LCD_clearScreen>
						LCD_displayString("Wrong Password");
    2188:	8b e7       	ldi	r24, 0x7B	; 123
    218a:	91 e0       	ldi	r25, 0x01	; 1
    218c:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	aa ef       	ldi	r26, 0xFA	; 250
    2196:	b3 e4       	ldi	r27, 0x43	; 67
    2198:	8b 87       	std	Y+11, r24	; 0x0b
    219a:	9c 87       	std	Y+12, r25	; 0x0c
    219c:	ad 87       	std	Y+13, r26	; 0x0d
    219e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	4a ef       	ldi	r20, 0xFA	; 250
    21ae:	54 e4       	ldi	r21, 0x44	; 68
    21b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	8f 83       	std	Y+7, r24	; 0x07
    21ba:	98 87       	std	Y+8, r25	; 0x08
    21bc:	a9 87       	std	Y+9, r26	; 0x09
    21be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21c0:	6f 81       	ldd	r22, Y+7	; 0x07
    21c2:	78 85       	ldd	r23, Y+8	; 0x08
    21c4:	89 85       	ldd	r24, Y+9	; 0x09
    21c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	40 e8       	ldi	r20, 0x80	; 128
    21ce:	5f e3       	ldi	r21, 0x3F	; 63
    21d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21d4:	88 23       	and	r24, r24
    21d6:	2c f4       	brge	.+10     	; 0x21e2 <main+0xefe>
		__ticks = 1;
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	9e 83       	std	Y+6, r25	; 0x06
    21de:	8d 83       	std	Y+5, r24	; 0x05
    21e0:	3f c0       	rjmp	.+126    	; 0x2260 <main+0xf7c>
	else if (__tmp > 65535)
    21e2:	6f 81       	ldd	r22, Y+7	; 0x07
    21e4:	78 85       	ldd	r23, Y+8	; 0x08
    21e6:	89 85       	ldd	r24, Y+9	; 0x09
    21e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	3f ef       	ldi	r19, 0xFF	; 255
    21ee:	4f e7       	ldi	r20, 0x7F	; 127
    21f0:	57 e4       	ldi	r21, 0x47	; 71
    21f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21f6:	18 16       	cp	r1, r24
    21f8:	4c f5       	brge	.+82     	; 0x224c <main+0xf68>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    21fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    21fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2200:	9e 85       	ldd	r25, Y+14	; 0x0e
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	40 e2       	ldi	r20, 0x20	; 32
    2208:	51 e4       	ldi	r21, 0x41	; 65
    220a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	bc 01       	movw	r22, r24
    2214:	cd 01       	movw	r24, r26
    2216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	9e 83       	std	Y+6, r25	; 0x06
    2220:	8d 83       	std	Y+5, r24	; 0x05
    2222:	0f c0       	rjmp	.+30     	; 0x2242 <main+0xf5e>
    2224:	88 ec       	ldi	r24, 0xC8	; 200
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	9c 83       	std	Y+4, r25	; 0x04
    222a:	8b 83       	std	Y+3, r24	; 0x03
    222c:	8b 81       	ldd	r24, Y+3	; 0x03
    222e:	9c 81       	ldd	r25, Y+4	; 0x04
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	f1 f7       	brne	.-4      	; 0x2230 <main+0xf4c>
    2234:	9c 83       	std	Y+4, r25	; 0x04
    2236:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2238:	8d 81       	ldd	r24, Y+5	; 0x05
    223a:	9e 81       	ldd	r25, Y+6	; 0x06
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	9e 83       	std	Y+6, r25	; 0x06
    2240:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2242:	8d 81       	ldd	r24, Y+5	; 0x05
    2244:	9e 81       	ldd	r25, Y+6	; 0x06
    2246:	00 97       	sbiw	r24, 0x00	; 0
    2248:	69 f7       	brne	.-38     	; 0x2224 <main+0xf40>
    224a:	14 c0       	rjmp	.+40     	; 0x2274 <main+0xf90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    224c:	6f 81       	ldd	r22, Y+7	; 0x07
    224e:	78 85       	ldd	r23, Y+8	; 0x08
    2250:	89 85       	ldd	r24, Y+9	; 0x09
    2252:	9a 85       	ldd	r25, Y+10	; 0x0a
    2254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	9e 83       	std	Y+6, r25	; 0x06
    225e:	8d 83       	std	Y+5, r24	; 0x05
    2260:	8d 81       	ldd	r24, Y+5	; 0x05
    2262:	9e 81       	ldd	r25, Y+6	; 0x06
    2264:	9a 83       	std	Y+2, r25	; 0x02
    2266:	89 83       	std	Y+1, r24	; 0x01
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	9a 81       	ldd	r25, Y+2	; 0x02
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	f1 f7       	brne	.-4      	; 0x226c <main+0xf88>
    2270:	9a 83       	std	Y+2, r25	; 0x02
    2272:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(500);
						/* each time the entered password is incorrect, the try variable increment by 1 */
						number_of_tries++;
    2274:	de 01       	movw	r26, r28
    2276:	ae 56       	subi	r26, 0x6E	; 110
    2278:	bf 4f       	sbci	r27, 0xFF	; 255
    227a:	fe 01       	movw	r30, r28
    227c:	ee 56       	subi	r30, 0x6E	; 110
    227e:	ff 4f       	sbci	r31, 0xFF	; 255
    2280:	80 81       	ld	r24, Z
    2282:	8f 5f       	subi	r24, 0xFF	; 255
    2284:	8c 93       	st	X, r24
						/* if the tries reach to 3, send to control ECU to enable the buzzer */
						if (number_of_tries == NUMBER_OF_PASSWORD_TRIES) {
    2286:	fe 01       	movw	r30, r28
    2288:	ee 56       	subi	r30, 0x6E	; 110
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	80 81       	ld	r24, Z
    228e:	83 30       	cpi	r24, 0x03	; 3
    2290:	21 f4       	brne	.+8      	; 0x229a <main+0xfb6>
							UART_sendByte(BUZZER_ON);
    2292:	88 e6       	ldi	r24, 0x68	; 104
    2294:	0e 94 ff 20 	call	0x41fe	; 0x41fe <UART_sendByte>
    2298:	03 c0       	rjmp	.+6      	; 0x22a0 <main+0xfbc>
						} else {
							UART_sendByte(BUZZER_OFF);
    229a:	89 e6       	ldi	r24, 0x69	; 105
    229c:	0e 94 ff 20 	call	0x41fe	; 0x41fe <UART_sendByte>
						}
					}
					/* if the tries reach to 3, display error massage on LCD */
					if (number_of_tries == NUMBER_OF_PASSWORD_TRIES) {
    22a0:	fe 01       	movw	r30, r28
    22a2:	ee 56       	subi	r30, 0x6E	; 110
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	80 81       	ld	r24, Z
    22a8:	83 30       	cpi	r24, 0x03	; 3
    22aa:	09 f0       	breq	.+2      	; 0x22ae <main+0xfca>
    22ac:	40 ce       	rjmp	.-896    	; 0x1f2e <main+0xc4a>
						LCD_clearScreen();
    22ae:	0e 94 bb 1a 	call	0x3576	; 0x3576 <LCD_clearScreen>
						LCD_displayString("  System Locked ");
    22b2:	8a e8       	ldi	r24, 0x8A	; 138
    22b4:	91 e0       	ldi	r25, 0x01	; 1
    22b6:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
						LCD_moveCursor(1, 0);
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	60 e0       	ldi	r22, 0x00	; 0
    22be:	0e 94 3d 1a 	call	0x347a	; 0x347a <LCD_moveCursor>
						LCD_displayString("Wait for 1 min");
    22c2:	8b e9       	ldi	r24, 0x9B	; 155
    22c4:	91 e0       	ldi	r25, 0x01	; 1
    22c6:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
						/* waiting for 1 minute for the */
						Timer1_DelaySecond(BUZZER_ACTIVE_PERIOD);
    22ca:	85 e0       	ldi	r24, 0x05	; 5
    22cc:	0e 94 bc 13 	call	0x2778	; 0x2778 <Timer1_DelaySecond>
						/* reset the tries variable */
						number_of_tries = 0;
    22d0:	fe 01       	movw	r30, r28
    22d2:	ee 56       	subi	r30, 0x6E	; 110
    22d4:	ff 4f       	sbci	r31, 0xFF	; 255
    22d6:	10 82       	st	Z, r1
    22d8:	c8 ca       	rjmp	.-2672   	; 0x186a <main+0x586>

000022da <CreatePassword>:
 * 	  to control ECU and save it to EEPROM.
 * 4. If the two passwords are not matched, then repeat step1.
 * Function input:  void.
 * Function return: uint8 (as a flag).
 */
uint8 CreatePassword() {
    22da:	df 93       	push	r29
    22dc:	cf 93       	push	r28
    22de:	cd b7       	in	r28, 0x3d	; 61
    22e0:	de b7       	in	r29, 0x3e	; 62
    22e2:	a8 97       	sbiw	r28, 0x28	; 40
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	f8 94       	cli
    22e8:	de bf       	out	0x3e, r29	; 62
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	cd bf       	out	0x3d, r28	; 61
	uint8 Password[PASSWORD_LENGTH]; /* array to save password on it */
	uint8 Confirm_Password[PASSWORD_LENGTH]; /* array to save the confirmed password on it */
	uint8 Flag = 0; /* flag to indicate the matching of the two passwords */
    22ee:	1d 8e       	std	Y+29, r1	; 0x1d
	while (youssef_is_here) {
		/*First clear screen*/
		LCD_clearScreen();
    22f0:	0e 94 bb 1a 	call	0x3576	; 0x3576 <LCD_clearScreen>
		LCD_displayString("Plz Enter Pass :");
    22f4:	83 ee       	ldi	r24, 0xE3	; 227
    22f6:	91 e0       	ldi	r25, 0x01	; 1
    22f8:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
		/*Move cursor to second row*/
		LCD_moveCursor(1, 0);
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	60 e0       	ldi	r22, 0x00	; 0
    2300:	0e 94 3d 1a 	call	0x347a	; 0x347a <LCD_moveCursor>
		/*Call a function to get the password*/
		GetPasswordFromKeyPad(Password);
    2304:	ce 01       	movw	r24, r28
    2306:	4e 96       	adiw	r24, 0x1e	; 30
    2308:	0e 94 bb 12 	call	0x2576	; 0x2576 <GetPasswordFromKeyPad>
		/*Clear the screen*/
		LCD_clearScreen();
    230c:	0e 94 bb 1a 	call	0x3576	; 0x3576 <LCD_clearScreen>
		LCD_displayString("Plz re-enter the:");
    2310:	84 ef       	ldi	r24, 0xF4	; 244
    2312:	91 e0       	ldi	r25, 0x01	; 1
    2314:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
		/*Move cursor to second row*/
		LCD_moveCursor(1, 0);
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	60 e0       	ldi	r22, 0x00	; 0
    231c:	0e 94 3d 1a 	call	0x347a	; 0x347a <LCD_moveCursor>
		LCD_displayString("same pass: ");
    2320:	86 e0       	ldi	r24, 0x06	; 6
    2322:	92 e0       	ldi	r25, 0x02	; 2
    2324:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
		LCD_moveCursor(1, 11);
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	6b e0       	ldi	r22, 0x0B	; 11
    232c:	0e 94 3d 1a 	call	0x347a	; 0x347a <LCD_moveCursor>
		/*Call a function to get the Cofirmation_password*/
		GetPasswordFromKeyPad(Confirm_Password);
    2330:	ce 01       	movw	r24, r28
    2332:	83 96       	adiw	r24, 0x23	; 35
    2334:	0e 94 bb 12 	call	0x2576	; 0x2576 <GetPasswordFromKeyPad>
		Flag = comparePasswords(Password, Confirm_Password);
    2338:	ce 01       	movw	r24, r28
    233a:	4e 96       	adiw	r24, 0x1e	; 30
    233c:	9e 01       	movw	r18, r28
    233e:	2d 5d       	subi	r18, 0xDD	; 221
    2340:	3f 4f       	sbci	r19, 0xFF	; 255
    2342:	b9 01       	movw	r22, r18
    2344:	0e 94 62 13 	call	0x26c4	; 0x26c4 <comparePasswords>
    2348:	8d 8f       	std	Y+29, r24	; 0x1d
		if (Flag) {
    234a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    234c:	88 23       	and	r24, r24
    234e:	09 f4       	brne	.+2      	; 0x2352 <CreatePassword+0x78>
    2350:	87 c0       	rjmp	.+270    	; 0x2460 <CreatePassword+0x186>
			sendPasswordToControlECU(Password);
    2352:	ce 01       	movw	r24, r28
    2354:	4e 96       	adiw	r24, 0x1e	; 30
    2356:	0e 94 97 13 	call	0x272e	; 0x272e <sendPasswordToControlECU>
			LCD_clearScreen();
    235a:	0e 94 bb 1a 	call	0x3576	; 0x3576 <LCD_clearScreen>
			LCD_displayString("The 2 Passwords");
    235e:	82 e1       	ldi	r24, 0x12	; 18
    2360:	92 e0       	ldi	r25, 0x02	; 2
    2362:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
			LCD_moveCursor(1, 0);
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	60 e0       	ldi	r22, 0x00	; 0
    236a:	0e 94 3d 1a 	call	0x347a	; 0x347a <LCD_moveCursor>
			LCD_displayString("Are Matched :)");
    236e:	82 e2       	ldi	r24, 0x22	; 34
    2370:	92 e0       	ldi	r25, 0x02	; 2
    2372:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
    2376:	80 e0       	ldi	r24, 0x00	; 0
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	aa e7       	ldi	r26, 0x7A	; 122
    237c:	b3 e4       	ldi	r27, 0x43	; 67
    237e:	89 8f       	std	Y+25, r24	; 0x19
    2380:	9a 8f       	std	Y+26, r25	; 0x1a
    2382:	ab 8f       	std	Y+27, r26	; 0x1b
    2384:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2386:	69 8d       	ldd	r22, Y+25	; 0x19
    2388:	7a 8d       	ldd	r23, Y+26	; 0x1a
    238a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    238c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	4a ef       	ldi	r20, 0xFA	; 250
    2394:	54 e4       	ldi	r21, 0x44	; 68
    2396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	8d 8b       	std	Y+21, r24	; 0x15
    23a0:	9e 8b       	std	Y+22, r25	; 0x16
    23a2:	af 8b       	std	Y+23, r26	; 0x17
    23a4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23a6:	6d 89       	ldd	r22, Y+21	; 0x15
    23a8:	7e 89       	ldd	r23, Y+22	; 0x16
    23aa:	8f 89       	ldd	r24, Y+23	; 0x17
    23ac:	98 8d       	ldd	r25, Y+24	; 0x18
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	40 e8       	ldi	r20, 0x80	; 128
    23b4:	5f e3       	ldi	r21, 0x3F	; 63
    23b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ba:	88 23       	and	r24, r24
    23bc:	2c f4       	brge	.+10     	; 0x23c8 <CreatePassword+0xee>
		__ticks = 1;
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	9c 8b       	std	Y+20, r25	; 0x14
    23c4:	8b 8b       	std	Y+19, r24	; 0x13
    23c6:	3f c0       	rjmp	.+126    	; 0x2446 <CreatePassword+0x16c>
	else if (__tmp > 65535)
    23c8:	6d 89       	ldd	r22, Y+21	; 0x15
    23ca:	7e 89       	ldd	r23, Y+22	; 0x16
    23cc:	8f 89       	ldd	r24, Y+23	; 0x17
    23ce:	98 8d       	ldd	r25, Y+24	; 0x18
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	3f ef       	ldi	r19, 0xFF	; 255
    23d4:	4f e7       	ldi	r20, 0x7F	; 127
    23d6:	57 e4       	ldi	r21, 0x47	; 71
    23d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23dc:	18 16       	cp	r1, r24
    23de:	4c f5       	brge	.+82     	; 0x2432 <CreatePassword+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e0:	69 8d       	ldd	r22, Y+25	; 0x19
    23e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	40 e2       	ldi	r20, 0x20	; 32
    23ee:	51 e4       	ldi	r21, 0x41	; 65
    23f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	bc 01       	movw	r22, r24
    23fa:	cd 01       	movw	r24, r26
    23fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	9c 8b       	std	Y+20, r25	; 0x14
    2406:	8b 8b       	std	Y+19, r24	; 0x13
    2408:	0f c0       	rjmp	.+30     	; 0x2428 <CreatePassword+0x14e>
    240a:	88 ec       	ldi	r24, 0xC8	; 200
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	9a 8b       	std	Y+18, r25	; 0x12
    2410:	89 8b       	std	Y+17, r24	; 0x11
    2412:	89 89       	ldd	r24, Y+17	; 0x11
    2414:	9a 89       	ldd	r25, Y+18	; 0x12
    2416:	01 97       	sbiw	r24, 0x01	; 1
    2418:	f1 f7       	brne	.-4      	; 0x2416 <CreatePassword+0x13c>
    241a:	9a 8b       	std	Y+18, r25	; 0x12
    241c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    241e:	8b 89       	ldd	r24, Y+19	; 0x13
    2420:	9c 89       	ldd	r25, Y+20	; 0x14
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	9c 8b       	std	Y+20, r25	; 0x14
    2426:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2428:	8b 89       	ldd	r24, Y+19	; 0x13
    242a:	9c 89       	ldd	r25, Y+20	; 0x14
    242c:	00 97       	sbiw	r24, 0x00	; 0
    242e:	69 f7       	brne	.-38     	; 0x240a <CreatePassword+0x130>
    2430:	14 c0       	rjmp	.+40     	; 0x245a <CreatePassword+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2432:	6d 89       	ldd	r22, Y+21	; 0x15
    2434:	7e 89       	ldd	r23, Y+22	; 0x16
    2436:	8f 89       	ldd	r24, Y+23	; 0x17
    2438:	98 8d       	ldd	r25, Y+24	; 0x18
    243a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	9c 8b       	std	Y+20, r25	; 0x14
    2444:	8b 8b       	std	Y+19, r24	; 0x13
    2446:	8b 89       	ldd	r24, Y+19	; 0x13
    2448:	9c 89       	ldd	r25, Y+20	; 0x14
    244a:	98 8b       	std	Y+16, r25	; 0x10
    244c:	8f 87       	std	Y+15, r24	; 0x0f
    244e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2450:	98 89       	ldd	r25, Y+16	; 0x10
    2452:	01 97       	sbiw	r24, 0x01	; 1
    2454:	f1 f7       	brne	.-4      	; 0x2452 <CreatePassword+0x178>
    2456:	98 8b       	std	Y+16, r25	; 0x10
    2458:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(250);
			/* return true to not repeat this step as password created successfully */
			return TRUE;
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	88 a7       	std	Y+40, r24	; 0x28
    245e:	81 c0       	rjmp	.+258    	; 0x2562 <CreatePassword+0x288>
			/*break;*/
		} else {
			LCD_clearScreen();
    2460:	0e 94 bb 1a 	call	0x3576	; 0x3576 <LCD_clearScreen>
			LCD_displayString("The 2 Passwords");
    2464:	82 e1       	ldi	r24, 0x12	; 18
    2466:	92 e0       	ldi	r25, 0x02	; 2
    2468:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
			LCD_moveCursor(1, 0);
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	60 e0       	ldi	r22, 0x00	; 0
    2470:	0e 94 3d 1a 	call	0x347a	; 0x347a <LCD_moveCursor>
			LCD_displayString("Are not match-_-");
    2474:	81 e3       	ldi	r24, 0x31	; 49
    2476:	92 e0       	ldi	r25, 0x02	; 2
    2478:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	aa e7       	ldi	r26, 0x7A	; 122
    2482:	b3 e4       	ldi	r27, 0x43	; 67
    2484:	8b 87       	std	Y+11, r24	; 0x0b
    2486:	9c 87       	std	Y+12, r25	; 0x0c
    2488:	ad 87       	std	Y+13, r26	; 0x0d
    248a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    248c:	6b 85       	ldd	r22, Y+11	; 0x0b
    248e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2490:	8d 85       	ldd	r24, Y+13	; 0x0d
    2492:	9e 85       	ldd	r25, Y+14	; 0x0e
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	4a ef       	ldi	r20, 0xFA	; 250
    249a:	54 e4       	ldi	r21, 0x44	; 68
    249c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	8f 83       	std	Y+7, r24	; 0x07
    24a6:	98 87       	std	Y+8, r25	; 0x08
    24a8:	a9 87       	std	Y+9, r26	; 0x09
    24aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24ac:	6f 81       	ldd	r22, Y+7	; 0x07
    24ae:	78 85       	ldd	r23, Y+8	; 0x08
    24b0:	89 85       	ldd	r24, Y+9	; 0x09
    24b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	40 e8       	ldi	r20, 0x80	; 128
    24ba:	5f e3       	ldi	r21, 0x3F	; 63
    24bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24c0:	88 23       	and	r24, r24
    24c2:	2c f4       	brge	.+10     	; 0x24ce <CreatePassword+0x1f4>
		__ticks = 1;
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	9e 83       	std	Y+6, r25	; 0x06
    24ca:	8d 83       	std	Y+5, r24	; 0x05
    24cc:	3f c0       	rjmp	.+126    	; 0x254c <CreatePassword+0x272>
	else if (__tmp > 65535)
    24ce:	6f 81       	ldd	r22, Y+7	; 0x07
    24d0:	78 85       	ldd	r23, Y+8	; 0x08
    24d2:	89 85       	ldd	r24, Y+9	; 0x09
    24d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	3f ef       	ldi	r19, 0xFF	; 255
    24da:	4f e7       	ldi	r20, 0x7F	; 127
    24dc:	57 e4       	ldi	r21, 0x47	; 71
    24de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24e2:	18 16       	cp	r1, r24
    24e4:	4c f5       	brge	.+82     	; 0x2538 <CreatePassword+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	40 e2       	ldi	r20, 0x20	; 32
    24f4:	51 e4       	ldi	r21, 0x41	; 65
    24f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	bc 01       	movw	r22, r24
    2500:	cd 01       	movw	r24, r26
    2502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	9e 83       	std	Y+6, r25	; 0x06
    250c:	8d 83       	std	Y+5, r24	; 0x05
    250e:	0f c0       	rjmp	.+30     	; 0x252e <CreatePassword+0x254>
    2510:	88 ec       	ldi	r24, 0xC8	; 200
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	9c 83       	std	Y+4, r25	; 0x04
    2516:	8b 83       	std	Y+3, r24	; 0x03
    2518:	8b 81       	ldd	r24, Y+3	; 0x03
    251a:	9c 81       	ldd	r25, Y+4	; 0x04
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	f1 f7       	brne	.-4      	; 0x251c <CreatePassword+0x242>
    2520:	9c 83       	std	Y+4, r25	; 0x04
    2522:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2524:	8d 81       	ldd	r24, Y+5	; 0x05
    2526:	9e 81       	ldd	r25, Y+6	; 0x06
    2528:	01 97       	sbiw	r24, 0x01	; 1
    252a:	9e 83       	std	Y+6, r25	; 0x06
    252c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252e:	8d 81       	ldd	r24, Y+5	; 0x05
    2530:	9e 81       	ldd	r25, Y+6	; 0x06
    2532:	00 97       	sbiw	r24, 0x00	; 0
    2534:	69 f7       	brne	.-38     	; 0x2510 <CreatePassword+0x236>
    2536:	14 c0       	rjmp	.+40     	; 0x2560 <CreatePassword+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2538:	6f 81       	ldd	r22, Y+7	; 0x07
    253a:	78 85       	ldd	r23, Y+8	; 0x08
    253c:	89 85       	ldd	r24, Y+9	; 0x09
    253e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	9e 83       	std	Y+6, r25	; 0x06
    254a:	8d 83       	std	Y+5, r24	; 0x05
    254c:	8d 81       	ldd	r24, Y+5	; 0x05
    254e:	9e 81       	ldd	r25, Y+6	; 0x06
    2550:	9a 83       	std	Y+2, r25	; 0x02
    2552:	89 83       	std	Y+1, r24	; 0x01
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	9a 81       	ldd	r25, Y+2	; 0x02
    2558:	01 97       	sbiw	r24, 0x01	; 1
    255a:	f1 f7       	brne	.-4      	; 0x2558 <CreatePassword+0x27e>
    255c:	9a 83       	std	Y+2, r25	; 0x02
    255e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(250);
			/* return false to repeat this step as password is not created successfully */
			return FALSE;
    2560:	18 a6       	std	Y+40, r1	; 0x28
    2562:	88 a5       	ldd	r24, Y+40	; 0x28
		}
	}
}
    2564:	a8 96       	adiw	r28, 0x28	; 40
    2566:	0f b6       	in	r0, 0x3f	; 63
    2568:	f8 94       	cli
    256a:	de bf       	out	0x3e, r29	; 62
    256c:	0f be       	out	0x3f, r0	; 63
    256e:	cd bf       	out	0x3d, r28	; 61
    2570:	cf 91       	pop	r28
    2572:	df 91       	pop	r29
    2574:	08 95       	ret

00002576 <GetPasswordFromKeyPad>:
/*
 * Description :
 * Function to active keypad to get input number from it.
 * Function input: array of uint8 to save numbers from keypad on it.
 * */
void GetPasswordFromKeyPad(uint8 password[]) {
    2576:	df 93       	push	r29
    2578:	cf 93       	push	r28
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
    257e:	62 97       	sbiw	r28, 0x12	; 18
    2580:	0f b6       	in	r0, 0x3f	; 63
    2582:	f8 94       	cli
    2584:	de bf       	out	0x3e, r29	; 62
    2586:	0f be       	out	0x3f, r0	; 63
    2588:	cd bf       	out	0x3d, r28	; 61
    258a:	9a 8b       	std	Y+18, r25	; 0x12
    258c:	89 8b       	std	Y+17, r24	; 0x11
	uint8 i = 0; // Counter for password digits
    258e:	18 8a       	std	Y+16, r1	; 0x10
    2590:	88 c0       	rjmp	.+272    	; 0x26a2 <GetPasswordFromKeyPad+0x12c>
	uint8 temp;
	while (i < PASSWORD_LENGTH) {
		// Get a keypress from the keypad
		temp = KEYPAD_getPressedKey();
    2592:	0e 94 0f 14 	call	0x281e	; 0x281e <KEYPAD_getPressedKey>
    2596:	8f 87       	std	Y+15, r24	; 0x0f
    2598:	80 e0       	ldi	r24, 0x00	; 0
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	aa e7       	ldi	r26, 0x7A	; 122
    259e:	b3 e4       	ldi	r27, 0x43	; 67
    25a0:	8b 87       	std	Y+11, r24	; 0x0b
    25a2:	9c 87       	std	Y+12, r25	; 0x0c
    25a4:	ad 87       	std	Y+13, r26	; 0x0d
    25a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    25aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	4a ef       	ldi	r20, 0xFA	; 250
    25b6:	54 e4       	ldi	r21, 0x44	; 68
    25b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	8f 83       	std	Y+7, r24	; 0x07
    25c2:	98 87       	std	Y+8, r25	; 0x08
    25c4:	a9 87       	std	Y+9, r26	; 0x09
    25c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25c8:	6f 81       	ldd	r22, Y+7	; 0x07
    25ca:	78 85       	ldd	r23, Y+8	; 0x08
    25cc:	89 85       	ldd	r24, Y+9	; 0x09
    25ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	40 e8       	ldi	r20, 0x80	; 128
    25d6:	5f e3       	ldi	r21, 0x3F	; 63
    25d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25dc:	88 23       	and	r24, r24
    25de:	2c f4       	brge	.+10     	; 0x25ea <GetPasswordFromKeyPad+0x74>
		__ticks = 1;
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	9e 83       	std	Y+6, r25	; 0x06
    25e6:	8d 83       	std	Y+5, r24	; 0x05
    25e8:	3f c0       	rjmp	.+126    	; 0x2668 <GetPasswordFromKeyPad+0xf2>
	else if (__tmp > 65535)
    25ea:	6f 81       	ldd	r22, Y+7	; 0x07
    25ec:	78 85       	ldd	r23, Y+8	; 0x08
    25ee:	89 85       	ldd	r24, Y+9	; 0x09
    25f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	3f ef       	ldi	r19, 0xFF	; 255
    25f6:	4f e7       	ldi	r20, 0x7F	; 127
    25f8:	57 e4       	ldi	r21, 0x47	; 71
    25fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25fe:	18 16       	cp	r1, r24
    2600:	4c f5       	brge	.+82     	; 0x2654 <GetPasswordFromKeyPad+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2602:	6b 85       	ldd	r22, Y+11	; 0x0b
    2604:	7c 85       	ldd	r23, Y+12	; 0x0c
    2606:	8d 85       	ldd	r24, Y+13	; 0x0d
    2608:	9e 85       	ldd	r25, Y+14	; 0x0e
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	40 e2       	ldi	r20, 0x20	; 32
    2610:	51 e4       	ldi	r21, 0x41	; 65
    2612:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	bc 01       	movw	r22, r24
    261c:	cd 01       	movw	r24, r26
    261e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	9e 83       	std	Y+6, r25	; 0x06
    2628:	8d 83       	std	Y+5, r24	; 0x05
    262a:	0f c0       	rjmp	.+30     	; 0x264a <GetPasswordFromKeyPad+0xd4>
    262c:	88 ec       	ldi	r24, 0xC8	; 200
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	9c 83       	std	Y+4, r25	; 0x04
    2632:	8b 83       	std	Y+3, r24	; 0x03
    2634:	8b 81       	ldd	r24, Y+3	; 0x03
    2636:	9c 81       	ldd	r25, Y+4	; 0x04
    2638:	01 97       	sbiw	r24, 0x01	; 1
    263a:	f1 f7       	brne	.-4      	; 0x2638 <GetPasswordFromKeyPad+0xc2>
    263c:	9c 83       	std	Y+4, r25	; 0x04
    263e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2640:	8d 81       	ldd	r24, Y+5	; 0x05
    2642:	9e 81       	ldd	r25, Y+6	; 0x06
    2644:	01 97       	sbiw	r24, 0x01	; 1
    2646:	9e 83       	std	Y+6, r25	; 0x06
    2648:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    264a:	8d 81       	ldd	r24, Y+5	; 0x05
    264c:	9e 81       	ldd	r25, Y+6	; 0x06
    264e:	00 97       	sbiw	r24, 0x00	; 0
    2650:	69 f7       	brne	.-38     	; 0x262c <GetPasswordFromKeyPad+0xb6>
    2652:	14 c0       	rjmp	.+40     	; 0x267c <GetPasswordFromKeyPad+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2654:	6f 81       	ldd	r22, Y+7	; 0x07
    2656:	78 85       	ldd	r23, Y+8	; 0x08
    2658:	89 85       	ldd	r24, Y+9	; 0x09
    265a:	9a 85       	ldd	r25, Y+10	; 0x0a
    265c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	9e 83       	std	Y+6, r25	; 0x06
    2666:	8d 83       	std	Y+5, r24	; 0x05
    2668:	8d 81       	ldd	r24, Y+5	; 0x05
    266a:	9e 81       	ldd	r25, Y+6	; 0x06
    266c:	9a 83       	std	Y+2, r25	; 0x02
    266e:	89 83       	std	Y+1, r24	; 0x01
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	9a 81       	ldd	r25, Y+2	; 0x02
    2674:	01 97       	sbiw	r24, 0x01	; 1
    2676:	f1 f7       	brne	.-4      	; 0x2674 <GetPasswordFromKeyPad+0xfe>
    2678:	9a 83       	std	Y+2, r25	; 0x02
    267a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250); // Debounce delay

		// Check if the pressed key is a number (0-9)
		if (temp >= 0 && temp <= 9) {
    267c:	8f 85       	ldd	r24, Y+15	; 0x0f
    267e:	8a 30       	cpi	r24, 0x0A	; 10
    2680:	80 f4       	brcc	.+32     	; 0x26a2 <GetPasswordFromKeyPad+0x12c>
			password[i] = temp;
    2682:	88 89       	ldd	r24, Y+16	; 0x10
    2684:	28 2f       	mov	r18, r24
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	89 89       	ldd	r24, Y+17	; 0x11
    268a:	9a 89       	ldd	r25, Y+18	; 0x12
    268c:	fc 01       	movw	r30, r24
    268e:	e2 0f       	add	r30, r18
    2690:	f3 1f       	adc	r31, r19
    2692:	8f 85       	ldd	r24, Y+15	; 0x0f
    2694:	80 83       	st	Z, r24
			LCD_displayCharacter('*'); // Display '*' for each character
    2696:	8a e2       	ldi	r24, 0x2A	; 42
    2698:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_displayCharacter>
			i++; // Move to the next digit
    269c:	88 89       	ldd	r24, Y+16	; 0x10
    269e:	8f 5f       	subi	r24, 0xFF	; 255
    26a0:	88 8b       	std	Y+16, r24	; 0x10
 * Function input: array of uint8 to save numbers from keypad on it.
 * */
void GetPasswordFromKeyPad(uint8 password[]) {
	uint8 i = 0; // Counter for password digits
	uint8 temp;
	while (i < PASSWORD_LENGTH) {
    26a2:	88 89       	ldd	r24, Y+16	; 0x10
    26a4:	85 30       	cpi	r24, 0x05	; 5
    26a6:	08 f4       	brcc	.+2      	; 0x26aa <GetPasswordFromKeyPad+0x134>
    26a8:	74 cf       	rjmp	.-280    	; 0x2592 <GetPasswordFromKeyPad+0x1c>
			i++; // Move to the next digit
		}
	}

// Wait for the user to press the '#' key as an "Enter" key
	while (KEYPAD_getPressedKey() != '#')
    26aa:	0e 94 0f 14 	call	0x281e	; 0x281e <KEYPAD_getPressedKey>
    26ae:	83 32       	cpi	r24, 0x23	; 35
    26b0:	e1 f7       	brne	.-8      	; 0x26aa <GetPasswordFromKeyPad+0x134>
		;
}
    26b2:	62 96       	adiw	r28, 0x12	; 18
    26b4:	0f b6       	in	r0, 0x3f	; 63
    26b6:	f8 94       	cli
    26b8:	de bf       	out	0x3e, r29	; 62
    26ba:	0f be       	out	0x3f, r0	; 63
    26bc:	cd bf       	out	0x3d, r28	; 61
    26be:	cf 91       	pop	r28
    26c0:	df 91       	pop	r29
    26c2:	08 95       	ret

000026c4 <comparePasswords>:
 * Description :
 * Function to take confirm password then compare it with password and return if matched or not.
 * Function input: two arrays of uint8 to compare between them.
 * Function output: uint8 flag that indicate the matching of passwords.
 */
uint8 comparePasswords(uint8 password[], uint8 confirmPassword[]) {
    26c4:	df 93       	push	r29
    26c6:	cf 93       	push	r28
    26c8:	00 d0       	rcall	.+0      	; 0x26ca <comparePasswords+0x6>
    26ca:	00 d0       	rcall	.+0      	; 0x26cc <comparePasswords+0x8>
    26cc:	00 d0       	rcall	.+0      	; 0x26ce <comparePasswords+0xa>
    26ce:	cd b7       	in	r28, 0x3d	; 61
    26d0:	de b7       	in	r29, 0x3e	; 62
    26d2:	9b 83       	std	Y+3, r25	; 0x03
    26d4:	8a 83       	std	Y+2, r24	; 0x02
    26d6:	7d 83       	std	Y+5, r23	; 0x05
    26d8:	6c 83       	std	Y+4, r22	; 0x04
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    26da:	19 82       	std	Y+1, r1	; 0x01
    26dc:	19 c0       	rjmp	.+50     	; 0x2710 <comparePasswords+0x4c>
		if (password[i] != confirmPassword[i]) {
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	28 2f       	mov	r18, r24
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	8a 81       	ldd	r24, Y+2	; 0x02
    26e6:	9b 81       	ldd	r25, Y+3	; 0x03
    26e8:	fc 01       	movw	r30, r24
    26ea:	e2 0f       	add	r30, r18
    26ec:	f3 1f       	adc	r31, r19
    26ee:	40 81       	ld	r20, Z
    26f0:	89 81       	ldd	r24, Y+1	; 0x01
    26f2:	28 2f       	mov	r18, r24
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	8c 81       	ldd	r24, Y+4	; 0x04
    26f8:	9d 81       	ldd	r25, Y+5	; 0x05
    26fa:	fc 01       	movw	r30, r24
    26fc:	e2 0f       	add	r30, r18
    26fe:	f3 1f       	adc	r31, r19
    2700:	80 81       	ld	r24, Z
    2702:	48 17       	cp	r20, r24
    2704:	11 f0       	breq	.+4      	; 0x270a <comparePasswords+0x46>
			return 0; /* Passwords do not match */
    2706:	1e 82       	std	Y+6, r1	; 0x06
    2708:	08 c0       	rjmp	.+16     	; 0x271a <comparePasswords+0x56>
 * Function to take confirm password then compare it with password and return if matched or not.
 * Function input: two arrays of uint8 to compare between them.
 * Function output: uint8 flag that indicate the matching of passwords.
 */
uint8 comparePasswords(uint8 password[], uint8 confirmPassword[]) {
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    270a:	89 81       	ldd	r24, Y+1	; 0x01
    270c:	8f 5f       	subi	r24, 0xFF	; 255
    270e:	89 83       	std	Y+1, r24	; 0x01
    2710:	89 81       	ldd	r24, Y+1	; 0x01
    2712:	85 30       	cpi	r24, 0x05	; 5
    2714:	20 f3       	brcs	.-56     	; 0x26de <comparePasswords+0x1a>
		if (password[i] != confirmPassword[i]) {
			return 0; /* Passwords do not match */
		}
	}
	return 1; /* Passwords match */
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	8e 83       	std	Y+6, r24	; 0x06
    271a:	8e 81       	ldd	r24, Y+6	; 0x06
}
    271c:	26 96       	adiw	r28, 0x06	; 6
    271e:	0f b6       	in	r0, 0x3f	; 63
    2720:	f8 94       	cli
    2722:	de bf       	out	0x3e, r29	; 62
    2724:	0f be       	out	0x3f, r0	; 63
    2726:	cd bf       	out	0x3d, r28	; 61
    2728:	cf 91       	pop	r28
    272a:	df 91       	pop	r29
    272c:	08 95       	ret

0000272e <sendPasswordToControlECU>:
 * Description :
 * Function to send password through UART to control ECU.
 * Function input:  array of uint8 to send it to control ECU.
 * Function output: void.
 */
void sendPasswordToControlECU(uint8 password[]) {
    272e:	df 93       	push	r29
    2730:	cf 93       	push	r28
    2732:	00 d0       	rcall	.+0      	; 0x2734 <sendPasswordToControlECU+0x6>
    2734:	0f 92       	push	r0
    2736:	cd b7       	in	r28, 0x3d	; 61
    2738:	de b7       	in	r29, 0x3e	; 62
    273a:	9b 83       	std	Y+3, r25	; 0x03
    273c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	i = 0;
    273e:	19 82       	std	Y+1, r1	; 0x01
    2740:	12 c0       	rjmp	.+36     	; 0x2766 <sendPasswordToControlECU+0x38>
	while (i < PASSWORD_LENGTH) {
		/* waiting the replay from control that it is ready to receive again */
		while (UART_recieveByte() != START_COMMUNICATION)
    2742:	0e 94 13 21 	call	0x4226	; 0x4226 <UART_recieveByte>
    2746:	81 31       	cpi	r24, 0x11	; 17
    2748:	e1 f7       	brne	.-8      	; 0x2742 <sendPasswordToControlECU+0x14>
			;
		/* send the password byte by byte to control ECU through UART  */
		UART_sendByte(password[i]);
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	28 2f       	mov	r18, r24
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	8a 81       	ldd	r24, Y+2	; 0x02
    2752:	9b 81       	ldd	r25, Y+3	; 0x03
    2754:	fc 01       	movw	r30, r24
    2756:	e2 0f       	add	r30, r18
    2758:	f3 1f       	adc	r31, r19
    275a:	80 81       	ld	r24, Z
    275c:	0e 94 ff 20 	call	0x41fe	; 0x41fe <UART_sendByte>
		i++;
    2760:	89 81       	ldd	r24, Y+1	; 0x01
    2762:	8f 5f       	subi	r24, 0xFF	; 255
    2764:	89 83       	std	Y+1, r24	; 0x01
 * Function output: void.
 */
void sendPasswordToControlECU(uint8 password[]) {
	uint8 i;
	i = 0;
	while (i < PASSWORD_LENGTH) {
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	85 30       	cpi	r24, 0x05	; 5
    276a:	58 f3       	brcs	.-42     	; 0x2742 <sendPasswordToControlECU+0x14>
			;
		/* send the password byte by byte to control ECU through UART  */
		UART_sendByte(password[i]);
		i++;
	}
}
    276c:	0f 90       	pop	r0
    276e:	0f 90       	pop	r0
    2770:	0f 90       	pop	r0
    2772:	cf 91       	pop	r28
    2774:	df 91       	pop	r29
    2776:	08 95       	ret

00002778 <Timer1_DelaySecond>:
 * Description :
 * Function to count a number of seconds which passed to it.
 * Function input:  number of seconds.
 * Function output: void.
 */
void Timer1_DelaySecond(uint8 time) {
    2778:	df 93       	push	r29
    277a:	cf 93       	push	r28
    277c:	cd b7       	in	r28, 0x3d	; 61
    277e:	de b7       	in	r29, 0x3e	; 62
    2780:	2d 97       	sbiw	r28, 0x0d	; 13
    2782:	0f b6       	in	r0, 0x3f	; 63
    2784:	f8 94       	cli
    2786:	de bf       	out	0x3e, r29	; 62
    2788:	0f be       	out	0x3f, r0	; 63
    278a:	cd bf       	out	0x3d, r28	; 61
    278c:	88 87       	std	Y+8, r24	; 0x08
	Timer_ConfigType timer_config = { CTC_INITIAL_VALUE,
	CTC_VALUE_FOR_ONE_SECOND, TIMER1, PRESCALER_256, COMPARE_MODE };
    278e:	ce 01       	movw	r24, r28
    2790:	01 96       	adiw	r24, 0x01	; 1
    2792:	9a 87       	std	Y+10, r25	; 0x0a
    2794:	89 87       	std	Y+9, r24	; 0x09
    2796:	e2 e5       	ldi	r30, 0x52	; 82
    2798:	f2 e0       	ldi	r31, 0x02	; 2
    279a:	fc 87       	std	Y+12, r31	; 0x0c
    279c:	eb 87       	std	Y+11, r30	; 0x0b
    279e:	f7 e0       	ldi	r31, 0x07	; 7
    27a0:	fd 87       	std	Y+13, r31	; 0x0d
    27a2:	eb 85       	ldd	r30, Y+11	; 0x0b
    27a4:	fc 85       	ldd	r31, Y+12	; 0x0c
    27a6:	00 80       	ld	r0, Z
    27a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    27aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    27ac:	01 96       	adiw	r24, 0x01	; 1
    27ae:	9c 87       	std	Y+12, r25	; 0x0c
    27b0:	8b 87       	std	Y+11, r24	; 0x0b
    27b2:	e9 85       	ldd	r30, Y+9	; 0x09
    27b4:	fa 85       	ldd	r31, Y+10	; 0x0a
    27b6:	00 82       	st	Z, r0
    27b8:	89 85       	ldd	r24, Y+9	; 0x09
    27ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    27bc:	01 96       	adiw	r24, 0x01	; 1
    27be:	9a 87       	std	Y+10, r25	; 0x0a
    27c0:	89 87       	std	Y+9, r24	; 0x09
    27c2:	9d 85       	ldd	r25, Y+13	; 0x0d
    27c4:	91 50       	subi	r25, 0x01	; 1
    27c6:	9d 87       	std	Y+13, r25	; 0x0d
    27c8:	ed 85       	ldd	r30, Y+13	; 0x0d
    27ca:	ee 23       	and	r30, r30
    27cc:	51 f7       	brne	.-44     	; 0x27a2 <Timer1_DelaySecond+0x2a>
	/* setup the call back function */
	Timer_setCallBack(countOneSecond, TIMER1);
    27ce:	83 e0       	ldi	r24, 0x03	; 3
    27d0:	94 e1       	ldi	r25, 0x14	; 20
    27d2:	61 e0       	ldi	r22, 0x01	; 1
    27d4:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <Timer_setCallBack>
	/* passing the configuration to initialization function of TIMER1 */
	Timer_init(&timer_config);
    27d8:	ce 01       	movw	r24, r28
    27da:	01 96       	adiw	r24, 0x01	; 1
    27dc:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <Timer_init>
	/* waiting for 15 seconds until the door is unlocking */
	while (g_ticks < time)
    27e0:	90 91 5a 02 	lds	r25, 0x025A
    27e4:	88 85       	ldd	r24, Y+8	; 0x08
    27e6:	98 17       	cp	r25, r24
    27e8:	d8 f3       	brcs	.-10     	; 0x27e0 <Timer1_DelaySecond+0x68>
		;
	/* reset the global variable of ticks */
	g_ticks = 0;
    27ea:	10 92 5a 02 	sts	0x025A, r1
	/*Stop the Timer*/
	Timer_deInit(TIMER1);
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	0e 94 29 1c 	call	0x3852	; 0x3852 <Timer_deInit>
}
    27f4:	2d 96       	adiw	r28, 0x0d	; 13
    27f6:	0f b6       	in	r0, 0x3f	; 63
    27f8:	f8 94       	cli
    27fa:	de bf       	out	0x3e, r29	; 62
    27fc:	0f be       	out	0x3f, r0	; 63
    27fe:	cd bf       	out	0x3d, r28	; 61
    2800:	cf 91       	pop	r28
    2802:	df 91       	pop	r29
    2804:	08 95       	ret

00002806 <countOneSecond>:
 * Description :
 * This is the call back function which will be executed each interrupt in timer1.
 * Function input:  void.
 * Function output: void.
 */
void countOneSecond(void) {
    2806:	df 93       	push	r29
    2808:	cf 93       	push	r28
    280a:	cd b7       	in	r28, 0x3d	; 61
    280c:	de b7       	in	r29, 0x3e	; 62
	/*Increase ticks every 1 second*/
	g_ticks++;
    280e:	80 91 5a 02 	lds	r24, 0x025A
    2812:	8f 5f       	subi	r24, 0xFF	; 255
    2814:	80 93 5a 02 	sts	0x025A, r24
}
    2818:	cf 91       	pop	r28
    281a:	df 91       	pop	r29
    281c:	08 95       	ret

0000281e <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    281e:	df 93       	push	r29
    2820:	cf 93       	push	r28
    2822:	cd b7       	in	r28, 0x3d	; 61
    2824:	de b7       	in	r29, 0x3e	; 62
    2826:	60 97       	sbiw	r28, 0x10	; 16
    2828:	0f b6       	in	r0, 0x3f	; 63
    282a:	f8 94       	cli
    282c:	de bf       	out	0x3e, r29	; 62
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	60 e0       	ldi	r22, 0x00	; 0
    2836:	40 e0       	ldi	r20, 0x00	; 0
    2838:	0e 94 2e 06 	call	0xc5c	; 0xc5c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	61 e0       	ldi	r22, 0x01	; 1
    2840:	40 e0       	ldi	r20, 0x00	; 0
    2842:	0e 94 2e 06 	call	0xc5c	; 0xc5c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	62 e0       	ldi	r22, 0x02	; 2
    284a:	40 e0       	ldi	r20, 0x00	; 0
    284c:	0e 94 2e 06 	call	0xc5c	; 0xc5c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	63 e0       	ldi	r22, 0x03	; 3
    2854:	40 e0       	ldi	r20, 0x00	; 0
    2856:	0e 94 2e 06 	call	0xc5c	; 0xc5c <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	64 e0       	ldi	r22, 0x04	; 4
    285e:	40 e0       	ldi	r20, 0x00	; 0
    2860:	0e 94 2e 06 	call	0xc5c	; 0xc5c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	65 e0       	ldi	r22, 0x05	; 5
    2868:	40 e0       	ldi	r20, 0x00	; 0
    286a:	0e 94 2e 06 	call	0xc5c	; 0xc5c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	66 e0       	ldi	r22, 0x06	; 6
    2872:	40 e0       	ldi	r20, 0x00	; 0
    2874:	0e 94 2e 06 	call	0xc5c	; 0xc5c <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	67 e0       	ldi	r22, 0x07	; 7
    287c:	40 e0       	ldi	r20, 0x00	; 0
    287e:	0e 94 2e 06 	call	0xc5c	; 0xc5c <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2882:	1f 86       	std	Y+15, r1	; 0x0f
    2884:	ab c0       	rjmp	.+342    	; 0x29dc <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	6f 85       	ldd	r22, Y+15	; 0x0f
    288a:	41 e0       	ldi	r20, 0x01	; 1
    288c:	0e 94 2e 06 	call	0xc5c	; 0xc5c <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	6f 85       	ldd	r22, Y+15	; 0x0f
    2894:	40 e0       	ldi	r20, 0x00	; 0
    2896:	0e 94 19 07 	call	0xe32	; 0xe32 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    289a:	18 8a       	std	Y+16, r1	; 0x10
    289c:	22 c0       	rjmp	.+68     	; 0x28e2 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    289e:	88 89       	ldd	r24, Y+16	; 0x10
    28a0:	98 2f       	mov	r25, r24
    28a2:	9c 5f       	subi	r25, 0xFC	; 252
    28a4:	81 e0       	ldi	r24, 0x01	; 1
    28a6:	69 2f       	mov	r22, r25
    28a8:	0e 94 04 08 	call	0x1008	; 0x1008 <GPIO_readPin>
    28ac:	88 23       	and	r24, r24
    28ae:	b1 f4       	brne	.+44     	; 0x28dc <KEYPAD_getPressedKey+0xbe>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    28b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    28b2:	88 2f       	mov	r24, r24
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	88 0f       	add	r24, r24
    28b8:	99 1f       	adc	r25, r25
    28ba:	88 0f       	add	r24, r24
    28bc:	99 1f       	adc	r25, r25
    28be:	98 2f       	mov	r25, r24
    28c0:	88 89       	ldd	r24, Y+16	; 0x10
    28c2:	89 0f       	add	r24, r25
    28c4:	8f 5f       	subi	r24, 0xFF	; 255
    28c6:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(10); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    28ca:	60 96       	adiw	r28, 0x10	; 16
    28cc:	0f b6       	in	r0, 0x3f	; 63
    28ce:	f8 94       	cli
    28d0:	de bf       	out	0x3e, r29	; 62
    28d2:	0f be       	out	0x3f, r0	; 63
    28d4:	cd bf       	out	0x3d, r28	; 61
    28d6:	cf 91       	pop	r28
    28d8:	df 91       	pop	r29
    28da:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    28dc:	88 89       	ldd	r24, Y+16	; 0x10
    28de:	8f 5f       	subi	r24, 0xFF	; 255
    28e0:	88 8b       	std	Y+16, r24	; 0x10
    28e2:	88 89       	ldd	r24, Y+16	; 0x10
    28e4:	84 30       	cpi	r24, 0x04	; 4
    28e6:	d8 f2       	brcs	.-74     	; 0x289e <KEYPAD_getPressedKey+0x80>
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	6f 85       	ldd	r22, Y+15	; 0x0f
    28ec:	40 e0       	ldi	r20, 0x00	; 0
    28ee:	0e 94 2e 06 	call	0xc5c	; 0xc5c <GPIO_setupPinDirection>
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	a0 e2       	ldi	r26, 0x20	; 32
    28f8:	b1 e4       	ldi	r27, 0x41	; 65
    28fa:	8b 87       	std	Y+11, r24	; 0x0b
    28fc:	9c 87       	std	Y+12, r25	; 0x0c
    28fe:	ad 87       	std	Y+13, r26	; 0x0d
    2900:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2902:	6b 85       	ldd	r22, Y+11	; 0x0b
    2904:	7c 85       	ldd	r23, Y+12	; 0x0c
    2906:	8d 85       	ldd	r24, Y+13	; 0x0d
    2908:	9e 85       	ldd	r25, Y+14	; 0x0e
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	4a ef       	ldi	r20, 0xFA	; 250
    2910:	54 e4       	ldi	r21, 0x44	; 68
    2912:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2916:	dc 01       	movw	r26, r24
    2918:	cb 01       	movw	r24, r22
    291a:	8f 83       	std	Y+7, r24	; 0x07
    291c:	98 87       	std	Y+8, r25	; 0x08
    291e:	a9 87       	std	Y+9, r26	; 0x09
    2920:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2922:	6f 81       	ldd	r22, Y+7	; 0x07
    2924:	78 85       	ldd	r23, Y+8	; 0x08
    2926:	89 85       	ldd	r24, Y+9	; 0x09
    2928:	9a 85       	ldd	r25, Y+10	; 0x0a
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	40 e8       	ldi	r20, 0x80	; 128
    2930:	5f e3       	ldi	r21, 0x3F	; 63
    2932:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2936:	88 23       	and	r24, r24
    2938:	2c f4       	brge	.+10     	; 0x2944 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	9e 83       	std	Y+6, r25	; 0x06
    2940:	8d 83       	std	Y+5, r24	; 0x05
    2942:	3f c0       	rjmp	.+126    	; 0x29c2 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    2944:	6f 81       	ldd	r22, Y+7	; 0x07
    2946:	78 85       	ldd	r23, Y+8	; 0x08
    2948:	89 85       	ldd	r24, Y+9	; 0x09
    294a:	9a 85       	ldd	r25, Y+10	; 0x0a
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	3f ef       	ldi	r19, 0xFF	; 255
    2950:	4f e7       	ldi	r20, 0x7F	; 127
    2952:	57 e4       	ldi	r21, 0x47	; 71
    2954:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2958:	18 16       	cp	r1, r24
    295a:	4c f5       	brge	.+82     	; 0x29ae <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    295c:	6b 85       	ldd	r22, Y+11	; 0x0b
    295e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2960:	8d 85       	ldd	r24, Y+13	; 0x0d
    2962:	9e 85       	ldd	r25, Y+14	; 0x0e
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	40 e2       	ldi	r20, 0x20	; 32
    296a:	51 e4       	ldi	r21, 0x41	; 65
    296c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	bc 01       	movw	r22, r24
    2976:	cd 01       	movw	r24, r26
    2978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	9e 83       	std	Y+6, r25	; 0x06
    2982:	8d 83       	std	Y+5, r24	; 0x05
    2984:	0f c0       	rjmp	.+30     	; 0x29a4 <KEYPAD_getPressedKey+0x186>
    2986:	88 ec       	ldi	r24, 0xC8	; 200
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	9c 83       	std	Y+4, r25	; 0x04
    298c:	8b 83       	std	Y+3, r24	; 0x03
    298e:	8b 81       	ldd	r24, Y+3	; 0x03
    2990:	9c 81       	ldd	r25, Y+4	; 0x04
    2992:	01 97       	sbiw	r24, 0x01	; 1
    2994:	f1 f7       	brne	.-4      	; 0x2992 <KEYPAD_getPressedKey+0x174>
    2996:	9c 83       	std	Y+4, r25	; 0x04
    2998:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    299a:	8d 81       	ldd	r24, Y+5	; 0x05
    299c:	9e 81       	ldd	r25, Y+6	; 0x06
    299e:	01 97       	sbiw	r24, 0x01	; 1
    29a0:	9e 83       	std	Y+6, r25	; 0x06
    29a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a4:	8d 81       	ldd	r24, Y+5	; 0x05
    29a6:	9e 81       	ldd	r25, Y+6	; 0x06
    29a8:	00 97       	sbiw	r24, 0x00	; 0
    29aa:	69 f7       	brne	.-38     	; 0x2986 <KEYPAD_getPressedKey+0x168>
    29ac:	14 c0       	rjmp	.+40     	; 0x29d6 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ae:	6f 81       	ldd	r22, Y+7	; 0x07
    29b0:	78 85       	ldd	r23, Y+8	; 0x08
    29b2:	89 85       	ldd	r24, Y+9	; 0x09
    29b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	9e 83       	std	Y+6, r25	; 0x06
    29c0:	8d 83       	std	Y+5, r24	; 0x05
    29c2:	8d 81       	ldd	r24, Y+5	; 0x05
    29c4:	9e 81       	ldd	r25, Y+6	; 0x06
    29c6:	9a 83       	std	Y+2, r25	; 0x02
    29c8:	89 83       	std	Y+1, r24	; 0x01
    29ca:	89 81       	ldd	r24, Y+1	; 0x01
    29cc:	9a 81       	ldd	r25, Y+2	; 0x02
    29ce:	01 97       	sbiw	r24, 0x01	; 1
    29d0:	f1 f7       	brne	.-4      	; 0x29ce <KEYPAD_getPressedKey+0x1b0>
    29d2:	9a 83       	std	Y+2, r25	; 0x02
    29d4:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    29d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    29d8:	8f 5f       	subi	r24, 0xFF	; 255
    29da:	8f 87       	std	Y+15, r24	; 0x0f
    29dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    29de:	84 30       	cpi	r24, 0x04	; 4
    29e0:	08 f4       	brcc	.+2      	; 0x29e4 <KEYPAD_getPressedKey+0x1c6>
    29e2:	51 cf       	rjmp	.-350    	; 0x2886 <KEYPAD_getPressedKey+0x68>
    29e4:	4e cf       	rjmp	.-356    	; 0x2882 <KEYPAD_getPressedKey+0x64>

000029e6 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    29e6:	df 93       	push	r29
    29e8:	cf 93       	push	r28
    29ea:	00 d0       	rcall	.+0      	; 0x29ec <KEYPAD_4x4_adjustKeyNumber+0x6>
    29ec:	00 d0       	rcall	.+0      	; 0x29ee <KEYPAD_4x4_adjustKeyNumber+0x8>
    29ee:	cd b7       	in	r28, 0x3d	; 61
    29f0:	de b7       	in	r29, 0x3e	; 62
    29f2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    29f4:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    29f6:	8a 81       	ldd	r24, Y+2	; 0x02
    29f8:	28 2f       	mov	r18, r24
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	3c 83       	std	Y+4, r19	; 0x04
    29fe:	2b 83       	std	Y+3, r18	; 0x03
    2a00:	8b 81       	ldd	r24, Y+3	; 0x03
    2a02:	9c 81       	ldd	r25, Y+4	; 0x04
    2a04:	88 30       	cpi	r24, 0x08	; 8
    2a06:	91 05       	cpc	r25, r1
    2a08:	09 f4       	brne	.+2      	; 0x2a0c <KEYPAD_4x4_adjustKeyNumber+0x26>
    2a0a:	70 c0       	rjmp	.+224    	; 0x2aec <KEYPAD_4x4_adjustKeyNumber+0x106>
    2a0c:	2b 81       	ldd	r18, Y+3	; 0x03
    2a0e:	3c 81       	ldd	r19, Y+4	; 0x04
    2a10:	29 30       	cpi	r18, 0x09	; 9
    2a12:	31 05       	cpc	r19, r1
    2a14:	5c f5       	brge	.+86     	; 0x2a6c <KEYPAD_4x4_adjustKeyNumber+0x86>
    2a16:	8b 81       	ldd	r24, Y+3	; 0x03
    2a18:	9c 81       	ldd	r25, Y+4	; 0x04
    2a1a:	84 30       	cpi	r24, 0x04	; 4
    2a1c:	91 05       	cpc	r25, r1
    2a1e:	09 f4       	brne	.+2      	; 0x2a22 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2a20:	59 c0       	rjmp	.+178    	; 0x2ad4 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2a22:	2b 81       	ldd	r18, Y+3	; 0x03
    2a24:	3c 81       	ldd	r19, Y+4	; 0x04
    2a26:	25 30       	cpi	r18, 0x05	; 5
    2a28:	31 05       	cpc	r19, r1
    2a2a:	9c f4       	brge	.+38     	; 0x2a52 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a30:	82 30       	cpi	r24, 0x02	; 2
    2a32:	91 05       	cpc	r25, r1
    2a34:	09 f4       	brne	.+2      	; 0x2a38 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2a36:	48 c0       	rjmp	.+144    	; 0x2ac8 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2a38:	2b 81       	ldd	r18, Y+3	; 0x03
    2a3a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a3c:	23 30       	cpi	r18, 0x03	; 3
    2a3e:	31 05       	cpc	r19, r1
    2a40:	0c f0       	brlt	.+2      	; 0x2a44 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2a42:	45 c0       	rjmp	.+138    	; 0x2ace <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2a44:	8b 81       	ldd	r24, Y+3	; 0x03
    2a46:	9c 81       	ldd	r25, Y+4	; 0x04
    2a48:	81 30       	cpi	r24, 0x01	; 1
    2a4a:	91 05       	cpc	r25, r1
    2a4c:	09 f4       	brne	.+2      	; 0x2a50 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2a4e:	39 c0       	rjmp	.+114    	; 0x2ac2 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2a50:	67 c0       	rjmp	.+206    	; 0x2b20 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2a52:	2b 81       	ldd	r18, Y+3	; 0x03
    2a54:	3c 81       	ldd	r19, Y+4	; 0x04
    2a56:	26 30       	cpi	r18, 0x06	; 6
    2a58:	31 05       	cpc	r19, r1
    2a5a:	09 f4       	brne	.+2      	; 0x2a5e <KEYPAD_4x4_adjustKeyNumber+0x78>
    2a5c:	41 c0       	rjmp	.+130    	; 0x2ae0 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a60:	9c 81       	ldd	r25, Y+4	; 0x04
    2a62:	87 30       	cpi	r24, 0x07	; 7
    2a64:	91 05       	cpc	r25, r1
    2a66:	0c f0       	brlt	.+2      	; 0x2a6a <KEYPAD_4x4_adjustKeyNumber+0x84>
    2a68:	3e c0       	rjmp	.+124    	; 0x2ae6 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2a6a:	37 c0       	rjmp	.+110    	; 0x2ada <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2a6c:	2b 81       	ldd	r18, Y+3	; 0x03
    2a6e:	3c 81       	ldd	r19, Y+4	; 0x04
    2a70:	2c 30       	cpi	r18, 0x0C	; 12
    2a72:	31 05       	cpc	r19, r1
    2a74:	09 f4       	brne	.+2      	; 0x2a78 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2a76:	46 c0       	rjmp	.+140    	; 0x2b04 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2a78:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a7c:	8d 30       	cpi	r24, 0x0D	; 13
    2a7e:	91 05       	cpc	r25, r1
    2a80:	5c f4       	brge	.+22     	; 0x2a98 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2a82:	2b 81       	ldd	r18, Y+3	; 0x03
    2a84:	3c 81       	ldd	r19, Y+4	; 0x04
    2a86:	2a 30       	cpi	r18, 0x0A	; 10
    2a88:	31 05       	cpc	r19, r1
    2a8a:	b1 f1       	breq	.+108    	; 0x2af8 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a90:	8b 30       	cpi	r24, 0x0B	; 11
    2a92:	91 05       	cpc	r25, r1
    2a94:	a4 f5       	brge	.+104    	; 0x2afe <KEYPAD_4x4_adjustKeyNumber+0x118>
    2a96:	2d c0       	rjmp	.+90     	; 0x2af2 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2a98:	2b 81       	ldd	r18, Y+3	; 0x03
    2a9a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a9c:	2e 30       	cpi	r18, 0x0E	; 14
    2a9e:	31 05       	cpc	r19, r1
    2aa0:	b9 f1       	breq	.+110    	; 0x2b10 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa6:	8e 30       	cpi	r24, 0x0E	; 14
    2aa8:	91 05       	cpc	r25, r1
    2aaa:	7c f1       	brlt	.+94     	; 0x2b0a <KEYPAD_4x4_adjustKeyNumber+0x124>
    2aac:	2b 81       	ldd	r18, Y+3	; 0x03
    2aae:	3c 81       	ldd	r19, Y+4	; 0x04
    2ab0:	2f 30       	cpi	r18, 0x0F	; 15
    2ab2:	31 05       	cpc	r19, r1
    2ab4:	79 f1       	breq	.+94     	; 0x2b14 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aba:	80 31       	cpi	r24, 0x10	; 16
    2abc:	91 05       	cpc	r25, r1
    2abe:	69 f1       	breq	.+90     	; 0x2b1a <KEYPAD_4x4_adjustKeyNumber+0x134>
    2ac0:	2f c0       	rjmp	.+94     	; 0x2b20 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2ac2:	87 e0       	ldi	r24, 0x07	; 7
    2ac4:	89 83       	std	Y+1, r24	; 0x01
    2ac6:	2e c0       	rjmp	.+92     	; 0x2b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2ac8:	88 e0       	ldi	r24, 0x08	; 8
    2aca:	89 83       	std	Y+1, r24	; 0x01
    2acc:	2b c0       	rjmp	.+86     	; 0x2b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2ace:	89 e0       	ldi	r24, 0x09	; 9
    2ad0:	89 83       	std	Y+1, r24	; 0x01
    2ad2:	28 c0       	rjmp	.+80     	; 0x2b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2ad4:	85 e2       	ldi	r24, 0x25	; 37
    2ad6:	89 83       	std	Y+1, r24	; 0x01
    2ad8:	25 c0       	rjmp	.+74     	; 0x2b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2ada:	84 e0       	ldi	r24, 0x04	; 4
    2adc:	89 83       	std	Y+1, r24	; 0x01
    2ade:	22 c0       	rjmp	.+68     	; 0x2b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2ae0:	85 e0       	ldi	r24, 0x05	; 5
    2ae2:	89 83       	std	Y+1, r24	; 0x01
    2ae4:	1f c0       	rjmp	.+62     	; 0x2b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2ae6:	86 e0       	ldi	r24, 0x06	; 6
    2ae8:	89 83       	std	Y+1, r24	; 0x01
    2aea:	1c c0       	rjmp	.+56     	; 0x2b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2aec:	8a e2       	ldi	r24, 0x2A	; 42
    2aee:	89 83       	std	Y+1, r24	; 0x01
    2af0:	19 c0       	rjmp	.+50     	; 0x2b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    2af2:	81 e0       	ldi	r24, 0x01	; 1
    2af4:	89 83       	std	Y+1, r24	; 0x01
    2af6:	16 c0       	rjmp	.+44     	; 0x2b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2af8:	82 e0       	ldi	r24, 0x02	; 2
    2afa:	89 83       	std	Y+1, r24	; 0x01
    2afc:	13 c0       	rjmp	.+38     	; 0x2b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2afe:	83 e0       	ldi	r24, 0x03	; 3
    2b00:	89 83       	std	Y+1, r24	; 0x01
    2b02:	10 c0       	rjmp	.+32     	; 0x2b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '/'; /* ASCII Code of '/' */
    2b04:	8f e2       	ldi	r24, 0x2F	; 47
    2b06:	89 83       	std	Y+1, r24	; 0x01
    2b08:	0d c0       	rjmp	.+26     	; 0x2b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = '-';  /* ASCII of '-' */
    2b0a:	8d e2       	ldi	r24, 0x2D	; 45
    2b0c:	89 83       	std	Y+1, r24	; 0x01
    2b0e:	0a c0       	rjmp	.+20     	; 0x2b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    2b10:	19 82       	std	Y+1, r1	; 0x01
    2b12:	08 c0       	rjmp	.+16     	; 0x2b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '+'; /* ASCII Code of '+' */
    2b14:	8b e2       	ldi	r24, 0x2B	; 43
    2b16:	89 83       	std	Y+1, r24	; 0x01
    2b18:	05 c0       	rjmp	.+10     	; 0x2b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '#'; /* ASCII of Enter */
    2b1a:	83 e2       	ldi	r24, 0x23	; 35
    2b1c:	89 83       	std	Y+1, r24	; 0x01
    2b1e:	02 c0       	rjmp	.+4      	; 0x2b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2b20:	8a 81       	ldd	r24, Y+2	; 0x02
    2b22:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2b24:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	0f 90       	pop	r0
    2b2c:	0f 90       	pop	r0
    2b2e:	cf 91       	pop	r28
    2b30:	df 91       	pop	r29
    2b32:	08 95       	ret

00002b34 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2b34:	df 93       	push	r29
    2b36:	cf 93       	push	r28
    2b38:	cd b7       	in	r28, 0x3d	; 61
    2b3a:	de b7       	in	r29, 0x3e	; 62
    2b3c:	2e 97       	sbiw	r28, 0x0e	; 14
    2b3e:	0f b6       	in	r0, 0x3f	; 63
    2b40:	f8 94       	cli
    2b42:	de bf       	out	0x3e, r29	; 62
    2b44:	0f be       	out	0x3f, r0	; 63
    2b46:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2b48:	82 e0       	ldi	r24, 0x02	; 2
    2b4a:	60 e0       	ldi	r22, 0x00	; 0
    2b4c:	41 e0       	ldi	r20, 0x01	; 1
    2b4e:	0e 94 2e 06 	call	0xc5c	; 0xc5c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2b52:	82 e0       	ldi	r24, 0x02	; 2
    2b54:	61 e0       	ldi	r22, 0x01	; 1
    2b56:	41 e0       	ldi	r20, 0x01	; 1
    2b58:	0e 94 2e 06 	call	0xc5c	; 0xc5c <GPIO_setupPinDirection>
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	a0 ea       	ldi	r26, 0xA0	; 160
    2b62:	b1 e4       	ldi	r27, 0x41	; 65
    2b64:	8b 87       	std	Y+11, r24	; 0x0b
    2b66:	9c 87       	std	Y+12, r25	; 0x0c
    2b68:	ad 87       	std	Y+13, r26	; 0x0d
    2b6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b70:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b72:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	4a ef       	ldi	r20, 0xFA	; 250
    2b7a:	54 e4       	ldi	r21, 0x44	; 68
    2b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	8f 83       	std	Y+7, r24	; 0x07
    2b86:	98 87       	std	Y+8, r25	; 0x08
    2b88:	a9 87       	std	Y+9, r26	; 0x09
    2b8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b8c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b8e:	78 85       	ldd	r23, Y+8	; 0x08
    2b90:	89 85       	ldd	r24, Y+9	; 0x09
    2b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	40 e8       	ldi	r20, 0x80	; 128
    2b9a:	5f e3       	ldi	r21, 0x3F	; 63
    2b9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ba0:	88 23       	and	r24, r24
    2ba2:	2c f4       	brge	.+10     	; 0x2bae <LCD_init+0x7a>
		__ticks = 1;
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	9e 83       	std	Y+6, r25	; 0x06
    2baa:	8d 83       	std	Y+5, r24	; 0x05
    2bac:	3f c0       	rjmp	.+126    	; 0x2c2c <LCD_init+0xf8>
	else if (__tmp > 65535)
    2bae:	6f 81       	ldd	r22, Y+7	; 0x07
    2bb0:	78 85       	ldd	r23, Y+8	; 0x08
    2bb2:	89 85       	ldd	r24, Y+9	; 0x09
    2bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	3f ef       	ldi	r19, 0xFF	; 255
    2bba:	4f e7       	ldi	r20, 0x7F	; 127
    2bbc:	57 e4       	ldi	r21, 0x47	; 71
    2bbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bc2:	18 16       	cp	r1, r24
    2bc4:	4c f5       	brge	.+82     	; 0x2c18 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bca:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	40 e2       	ldi	r20, 0x20	; 32
    2bd4:	51 e4       	ldi	r21, 0x41	; 65
    2bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	bc 01       	movw	r22, r24
    2be0:	cd 01       	movw	r24, r26
    2be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be6:	dc 01       	movw	r26, r24
    2be8:	cb 01       	movw	r24, r22
    2bea:	9e 83       	std	Y+6, r25	; 0x06
    2bec:	8d 83       	std	Y+5, r24	; 0x05
    2bee:	0f c0       	rjmp	.+30     	; 0x2c0e <LCD_init+0xda>
    2bf0:	88 ec       	ldi	r24, 0xC8	; 200
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	9c 83       	std	Y+4, r25	; 0x04
    2bf6:	8b 83       	std	Y+3, r24	; 0x03
    2bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    2bfc:	01 97       	sbiw	r24, 0x01	; 1
    2bfe:	f1 f7       	brne	.-4      	; 0x2bfc <LCD_init+0xc8>
    2c00:	9c 83       	std	Y+4, r25	; 0x04
    2c02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c04:	8d 81       	ldd	r24, Y+5	; 0x05
    2c06:	9e 81       	ldd	r25, Y+6	; 0x06
    2c08:	01 97       	sbiw	r24, 0x01	; 1
    2c0a:	9e 83       	std	Y+6, r25	; 0x06
    2c0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c10:	9e 81       	ldd	r25, Y+6	; 0x06
    2c12:	00 97       	sbiw	r24, 0x00	; 0
    2c14:	69 f7       	brne	.-38     	; 0x2bf0 <LCD_init+0xbc>
    2c16:	14 c0       	rjmp	.+40     	; 0x2c40 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c18:	6f 81       	ldd	r22, Y+7	; 0x07
    2c1a:	78 85       	ldd	r23, Y+8	; 0x08
    2c1c:	89 85       	ldd	r24, Y+9	; 0x09
    2c1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	9e 83       	std	Y+6, r25	; 0x06
    2c2a:	8d 83       	std	Y+5, r24	; 0x05
    2c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c30:	9a 83       	std	Y+2, r25	; 0x02
    2c32:	89 83       	std	Y+1, r24	; 0x01
    2c34:	89 81       	ldd	r24, Y+1	; 0x01
    2c36:	9a 81       	ldd	r25, Y+2	; 0x02
    2c38:	01 97       	sbiw	r24, 0x01	; 1
    2c3a:	f1 f7       	brne	.-4      	; 0x2c38 <LCD_init+0x104>
    2c3c:	9a 83       	std	Y+2, r25	; 0x02
    2c3e:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	6f ef       	ldi	r22, 0xFF	; 255
    2c44:	0e 94 9f 08 	call	0x113e	; 0x113e <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2c48:	88 e3       	ldi	r24, 0x38	; 56
    2c4a:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2c4e:	8c e0       	ldi	r24, 0x0C	; 12
    2c50:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <LCD_sendCommand>
}
    2c5a:	2e 96       	adiw	r28, 0x0e	; 14
    2c5c:	0f b6       	in	r0, 0x3f	; 63
    2c5e:	f8 94       	cli
    2c60:	de bf       	out	0x3e, r29	; 62
    2c62:	0f be       	out	0x3f, r0	; 63
    2c64:	cd bf       	out	0x3d, r28	; 61
    2c66:	cf 91       	pop	r28
    2c68:	df 91       	pop	r29
    2c6a:	08 95       	ret

00002c6c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2c6c:	df 93       	push	r29
    2c6e:	cf 93       	push	r28
    2c70:	cd b7       	in	r28, 0x3d	; 61
    2c72:	de b7       	in	r29, 0x3e	; 62
    2c74:	e9 97       	sbiw	r28, 0x39	; 57
    2c76:	0f b6       	in	r0, 0x3f	; 63
    2c78:	f8 94       	cli
    2c7a:	de bf       	out	0x3e, r29	; 62
    2c7c:	0f be       	out	0x3f, r0	; 63
    2c7e:	cd bf       	out	0x3d, r28	; 61
    2c80:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2c82:	82 e0       	ldi	r24, 0x02	; 2
    2c84:	60 e0       	ldi	r22, 0x00	; 0
    2c86:	40 e0       	ldi	r20, 0x00	; 0
    2c88:	0e 94 19 07 	call	0xe32	; 0xe32 <GPIO_writePin>
    2c8c:	80 e0       	ldi	r24, 0x00	; 0
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	a0 e8       	ldi	r26, 0x80	; 128
    2c92:	bf e3       	ldi	r27, 0x3F	; 63
    2c94:	8d ab       	std	Y+53, r24	; 0x35
    2c96:	9e ab       	std	Y+54, r25	; 0x36
    2c98:	af ab       	std	Y+55, r26	; 0x37
    2c9a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c9c:	6d a9       	ldd	r22, Y+53	; 0x35
    2c9e:	7e a9       	ldd	r23, Y+54	; 0x36
    2ca0:	8f a9       	ldd	r24, Y+55	; 0x37
    2ca2:	98 ad       	ldd	r25, Y+56	; 0x38
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	4a ef       	ldi	r20, 0xFA	; 250
    2caa:	54 e4       	ldi	r21, 0x44	; 68
    2cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	89 ab       	std	Y+49, r24	; 0x31
    2cb6:	9a ab       	std	Y+50, r25	; 0x32
    2cb8:	ab ab       	std	Y+51, r26	; 0x33
    2cba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2cbc:	69 a9       	ldd	r22, Y+49	; 0x31
    2cbe:	7a a9       	ldd	r23, Y+50	; 0x32
    2cc0:	8b a9       	ldd	r24, Y+51	; 0x33
    2cc2:	9c a9       	ldd	r25, Y+52	; 0x34
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	40 e8       	ldi	r20, 0x80	; 128
    2cca:	5f e3       	ldi	r21, 0x3F	; 63
    2ccc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cd0:	88 23       	and	r24, r24
    2cd2:	2c f4       	brge	.+10     	; 0x2cde <LCD_sendCommand+0x72>
		__ticks = 1;
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	98 ab       	std	Y+48, r25	; 0x30
    2cda:	8f a7       	std	Y+47, r24	; 0x2f
    2cdc:	3f c0       	rjmp	.+126    	; 0x2d5c <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2cde:	69 a9       	ldd	r22, Y+49	; 0x31
    2ce0:	7a a9       	ldd	r23, Y+50	; 0x32
    2ce2:	8b a9       	ldd	r24, Y+51	; 0x33
    2ce4:	9c a9       	ldd	r25, Y+52	; 0x34
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	3f ef       	ldi	r19, 0xFF	; 255
    2cea:	4f e7       	ldi	r20, 0x7F	; 127
    2cec:	57 e4       	ldi	r21, 0x47	; 71
    2cee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cf2:	18 16       	cp	r1, r24
    2cf4:	4c f5       	brge	.+82     	; 0x2d48 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cf6:	6d a9       	ldd	r22, Y+53	; 0x35
    2cf8:	7e a9       	ldd	r23, Y+54	; 0x36
    2cfa:	8f a9       	ldd	r24, Y+55	; 0x37
    2cfc:	98 ad       	ldd	r25, Y+56	; 0x38
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	40 e2       	ldi	r20, 0x20	; 32
    2d04:	51 e4       	ldi	r21, 0x41	; 65
    2d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	bc 01       	movw	r22, r24
    2d10:	cd 01       	movw	r24, r26
    2d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	98 ab       	std	Y+48, r25	; 0x30
    2d1c:	8f a7       	std	Y+47, r24	; 0x2f
    2d1e:	0f c0       	rjmp	.+30     	; 0x2d3e <LCD_sendCommand+0xd2>
    2d20:	88 ec       	ldi	r24, 0xC8	; 200
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	9e a7       	std	Y+46, r25	; 0x2e
    2d26:	8d a7       	std	Y+45, r24	; 0x2d
    2d28:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d2a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d2c:	01 97       	sbiw	r24, 0x01	; 1
    2d2e:	f1 f7       	brne	.-4      	; 0x2d2c <LCD_sendCommand+0xc0>
    2d30:	9e a7       	std	Y+46, r25	; 0x2e
    2d32:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d34:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d36:	98 a9       	ldd	r25, Y+48	; 0x30
    2d38:	01 97       	sbiw	r24, 0x01	; 1
    2d3a:	98 ab       	std	Y+48, r25	; 0x30
    2d3c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d40:	98 a9       	ldd	r25, Y+48	; 0x30
    2d42:	00 97       	sbiw	r24, 0x00	; 0
    2d44:	69 f7       	brne	.-38     	; 0x2d20 <LCD_sendCommand+0xb4>
    2d46:	14 c0       	rjmp	.+40     	; 0x2d70 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d48:	69 a9       	ldd	r22, Y+49	; 0x31
    2d4a:	7a a9       	ldd	r23, Y+50	; 0x32
    2d4c:	8b a9       	ldd	r24, Y+51	; 0x33
    2d4e:	9c a9       	ldd	r25, Y+52	; 0x34
    2d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	98 ab       	std	Y+48, r25	; 0x30
    2d5a:	8f a7       	std	Y+47, r24	; 0x2f
    2d5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d5e:	98 a9       	ldd	r25, Y+48	; 0x30
    2d60:	9c a7       	std	Y+44, r25	; 0x2c
    2d62:	8b a7       	std	Y+43, r24	; 0x2b
    2d64:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d66:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d68:	01 97       	sbiw	r24, 0x01	; 1
    2d6a:	f1 f7       	brne	.-4      	; 0x2d68 <LCD_sendCommand+0xfc>
    2d6c:	9c a7       	std	Y+44, r25	; 0x2c
    2d6e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2d70:	82 e0       	ldi	r24, 0x02	; 2
    2d72:	61 e0       	ldi	r22, 0x01	; 1
    2d74:	41 e0       	ldi	r20, 0x01	; 1
    2d76:	0e 94 19 07 	call	0xe32	; 0xe32 <GPIO_writePin>
    2d7a:	80 e0       	ldi	r24, 0x00	; 0
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	a0 e8       	ldi	r26, 0x80	; 128
    2d80:	bf e3       	ldi	r27, 0x3F	; 63
    2d82:	8f a3       	std	Y+39, r24	; 0x27
    2d84:	98 a7       	std	Y+40, r25	; 0x28
    2d86:	a9 a7       	std	Y+41, r26	; 0x29
    2d88:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d8a:	6f a1       	ldd	r22, Y+39	; 0x27
    2d8c:	78 a5       	ldd	r23, Y+40	; 0x28
    2d8e:	89 a5       	ldd	r24, Y+41	; 0x29
    2d90:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	4a ef       	ldi	r20, 0xFA	; 250
    2d98:	54 e4       	ldi	r21, 0x44	; 68
    2d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	8b a3       	std	Y+35, r24	; 0x23
    2da4:	9c a3       	std	Y+36, r25	; 0x24
    2da6:	ad a3       	std	Y+37, r26	; 0x25
    2da8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2daa:	6b a1       	ldd	r22, Y+35	; 0x23
    2dac:	7c a1       	ldd	r23, Y+36	; 0x24
    2dae:	8d a1       	ldd	r24, Y+37	; 0x25
    2db0:	9e a1       	ldd	r25, Y+38	; 0x26
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	40 e8       	ldi	r20, 0x80	; 128
    2db8:	5f e3       	ldi	r21, 0x3F	; 63
    2dba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dbe:	88 23       	and	r24, r24
    2dc0:	2c f4       	brge	.+10     	; 0x2dcc <LCD_sendCommand+0x160>
		__ticks = 1;
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	9a a3       	std	Y+34, r25	; 0x22
    2dc8:	89 a3       	std	Y+33, r24	; 0x21
    2dca:	3f c0       	rjmp	.+126    	; 0x2e4a <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2dcc:	6b a1       	ldd	r22, Y+35	; 0x23
    2dce:	7c a1       	ldd	r23, Y+36	; 0x24
    2dd0:	8d a1       	ldd	r24, Y+37	; 0x25
    2dd2:	9e a1       	ldd	r25, Y+38	; 0x26
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	3f ef       	ldi	r19, 0xFF	; 255
    2dd8:	4f e7       	ldi	r20, 0x7F	; 127
    2dda:	57 e4       	ldi	r21, 0x47	; 71
    2ddc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2de0:	18 16       	cp	r1, r24
    2de2:	4c f5       	brge	.+82     	; 0x2e36 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2de4:	6f a1       	ldd	r22, Y+39	; 0x27
    2de6:	78 a5       	ldd	r23, Y+40	; 0x28
    2de8:	89 a5       	ldd	r24, Y+41	; 0x29
    2dea:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dec:	20 e0       	ldi	r18, 0x00	; 0
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	40 e2       	ldi	r20, 0x20	; 32
    2df2:	51 e4       	ldi	r21, 0x41	; 65
    2df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	bc 01       	movw	r22, r24
    2dfe:	cd 01       	movw	r24, r26
    2e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e04:	dc 01       	movw	r26, r24
    2e06:	cb 01       	movw	r24, r22
    2e08:	9a a3       	std	Y+34, r25	; 0x22
    2e0a:	89 a3       	std	Y+33, r24	; 0x21
    2e0c:	0f c0       	rjmp	.+30     	; 0x2e2c <LCD_sendCommand+0x1c0>
    2e0e:	88 ec       	ldi	r24, 0xC8	; 200
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	98 a3       	std	Y+32, r25	; 0x20
    2e14:	8f 8f       	std	Y+31, r24	; 0x1f
    2e16:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e18:	98 a1       	ldd	r25, Y+32	; 0x20
    2e1a:	01 97       	sbiw	r24, 0x01	; 1
    2e1c:	f1 f7       	brne	.-4      	; 0x2e1a <LCD_sendCommand+0x1ae>
    2e1e:	98 a3       	std	Y+32, r25	; 0x20
    2e20:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e22:	89 a1       	ldd	r24, Y+33	; 0x21
    2e24:	9a a1       	ldd	r25, Y+34	; 0x22
    2e26:	01 97       	sbiw	r24, 0x01	; 1
    2e28:	9a a3       	std	Y+34, r25	; 0x22
    2e2a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e2c:	89 a1       	ldd	r24, Y+33	; 0x21
    2e2e:	9a a1       	ldd	r25, Y+34	; 0x22
    2e30:	00 97       	sbiw	r24, 0x00	; 0
    2e32:	69 f7       	brne	.-38     	; 0x2e0e <LCD_sendCommand+0x1a2>
    2e34:	14 c0       	rjmp	.+40     	; 0x2e5e <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e36:	6b a1       	ldd	r22, Y+35	; 0x23
    2e38:	7c a1       	ldd	r23, Y+36	; 0x24
    2e3a:	8d a1       	ldd	r24, Y+37	; 0x25
    2e3c:	9e a1       	ldd	r25, Y+38	; 0x26
    2e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	9a a3       	std	Y+34, r25	; 0x22
    2e48:	89 a3       	std	Y+33, r24	; 0x21
    2e4a:	89 a1       	ldd	r24, Y+33	; 0x21
    2e4c:	9a a1       	ldd	r25, Y+34	; 0x22
    2e4e:	9e 8f       	std	Y+30, r25	; 0x1e
    2e50:	8d 8f       	std	Y+29, r24	; 0x1d
    2e52:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e54:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e56:	01 97       	sbiw	r24, 0x01	; 1
    2e58:	f1 f7       	brne	.-4      	; 0x2e56 <LCD_sendCommand+0x1ea>
    2e5a:	9e 8f       	std	Y+30, r25	; 0x1e
    2e5c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2e5e:	80 e0       	ldi	r24, 0x00	; 0
    2e60:	69 ad       	ldd	r22, Y+57	; 0x39
    2e62:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <GPIO_writePort>
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	a0 e8       	ldi	r26, 0x80	; 128
    2e6c:	bf e3       	ldi	r27, 0x3F	; 63
    2e6e:	89 8f       	std	Y+25, r24	; 0x19
    2e70:	9a 8f       	std	Y+26, r25	; 0x1a
    2e72:	ab 8f       	std	Y+27, r26	; 0x1b
    2e74:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e76:	69 8d       	ldd	r22, Y+25	; 0x19
    2e78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	4a ef       	ldi	r20, 0xFA	; 250
    2e84:	54 e4       	ldi	r21, 0x44	; 68
    2e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	8d 8b       	std	Y+21, r24	; 0x15
    2e90:	9e 8b       	std	Y+22, r25	; 0x16
    2e92:	af 8b       	std	Y+23, r26	; 0x17
    2e94:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e96:	6d 89       	ldd	r22, Y+21	; 0x15
    2e98:	7e 89       	ldd	r23, Y+22	; 0x16
    2e9a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e9c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	40 e8       	ldi	r20, 0x80	; 128
    2ea4:	5f e3       	ldi	r21, 0x3F	; 63
    2ea6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2eaa:	88 23       	and	r24, r24
    2eac:	2c f4       	brge	.+10     	; 0x2eb8 <LCD_sendCommand+0x24c>
		__ticks = 1;
    2eae:	81 e0       	ldi	r24, 0x01	; 1
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	9c 8b       	std	Y+20, r25	; 0x14
    2eb4:	8b 8b       	std	Y+19, r24	; 0x13
    2eb6:	3f c0       	rjmp	.+126    	; 0x2f36 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2eb8:	6d 89       	ldd	r22, Y+21	; 0x15
    2eba:	7e 89       	ldd	r23, Y+22	; 0x16
    2ebc:	8f 89       	ldd	r24, Y+23	; 0x17
    2ebe:	98 8d       	ldd	r25, Y+24	; 0x18
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	3f ef       	ldi	r19, 0xFF	; 255
    2ec4:	4f e7       	ldi	r20, 0x7F	; 127
    2ec6:	57 e4       	ldi	r21, 0x47	; 71
    2ec8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ecc:	18 16       	cp	r1, r24
    2ece:	4c f5       	brge	.+82     	; 0x2f22 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed0:	69 8d       	ldd	r22, Y+25	; 0x19
    2ed2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ed4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ed6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	40 e2       	ldi	r20, 0x20	; 32
    2ede:	51 e4       	ldi	r21, 0x41	; 65
    2ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	bc 01       	movw	r22, r24
    2eea:	cd 01       	movw	r24, r26
    2eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef0:	dc 01       	movw	r26, r24
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	9c 8b       	std	Y+20, r25	; 0x14
    2ef6:	8b 8b       	std	Y+19, r24	; 0x13
    2ef8:	0f c0       	rjmp	.+30     	; 0x2f18 <LCD_sendCommand+0x2ac>
    2efa:	88 ec       	ldi	r24, 0xC8	; 200
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	9a 8b       	std	Y+18, r25	; 0x12
    2f00:	89 8b       	std	Y+17, r24	; 0x11
    2f02:	89 89       	ldd	r24, Y+17	; 0x11
    2f04:	9a 89       	ldd	r25, Y+18	; 0x12
    2f06:	01 97       	sbiw	r24, 0x01	; 1
    2f08:	f1 f7       	brne	.-4      	; 0x2f06 <LCD_sendCommand+0x29a>
    2f0a:	9a 8b       	std	Y+18, r25	; 0x12
    2f0c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f0e:	8b 89       	ldd	r24, Y+19	; 0x13
    2f10:	9c 89       	ldd	r25, Y+20	; 0x14
    2f12:	01 97       	sbiw	r24, 0x01	; 1
    2f14:	9c 8b       	std	Y+20, r25	; 0x14
    2f16:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f18:	8b 89       	ldd	r24, Y+19	; 0x13
    2f1a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f1c:	00 97       	sbiw	r24, 0x00	; 0
    2f1e:	69 f7       	brne	.-38     	; 0x2efa <LCD_sendCommand+0x28e>
    2f20:	14 c0       	rjmp	.+40     	; 0x2f4a <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f22:	6d 89       	ldd	r22, Y+21	; 0x15
    2f24:	7e 89       	ldd	r23, Y+22	; 0x16
    2f26:	8f 89       	ldd	r24, Y+23	; 0x17
    2f28:	98 8d       	ldd	r25, Y+24	; 0x18
    2f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f2e:	dc 01       	movw	r26, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	9c 8b       	std	Y+20, r25	; 0x14
    2f34:	8b 8b       	std	Y+19, r24	; 0x13
    2f36:	8b 89       	ldd	r24, Y+19	; 0x13
    2f38:	9c 89       	ldd	r25, Y+20	; 0x14
    2f3a:	98 8b       	std	Y+16, r25	; 0x10
    2f3c:	8f 87       	std	Y+15, r24	; 0x0f
    2f3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f40:	98 89       	ldd	r25, Y+16	; 0x10
    2f42:	01 97       	sbiw	r24, 0x01	; 1
    2f44:	f1 f7       	brne	.-4      	; 0x2f42 <LCD_sendCommand+0x2d6>
    2f46:	98 8b       	std	Y+16, r25	; 0x10
    2f48:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2f4a:	82 e0       	ldi	r24, 0x02	; 2
    2f4c:	61 e0       	ldi	r22, 0x01	; 1
    2f4e:	40 e0       	ldi	r20, 0x00	; 0
    2f50:	0e 94 19 07 	call	0xe32	; 0xe32 <GPIO_writePin>
    2f54:	80 e0       	ldi	r24, 0x00	; 0
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	a0 e8       	ldi	r26, 0x80	; 128
    2f5a:	bf e3       	ldi	r27, 0x3F	; 63
    2f5c:	8b 87       	std	Y+11, r24	; 0x0b
    2f5e:	9c 87       	std	Y+12, r25	; 0x0c
    2f60:	ad 87       	std	Y+13, r26	; 0x0d
    2f62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f64:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f66:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f68:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	4a ef       	ldi	r20, 0xFA	; 250
    2f72:	54 e4       	ldi	r21, 0x44	; 68
    2f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	8f 83       	std	Y+7, r24	; 0x07
    2f7e:	98 87       	std	Y+8, r25	; 0x08
    2f80:	a9 87       	std	Y+9, r26	; 0x09
    2f82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f84:	6f 81       	ldd	r22, Y+7	; 0x07
    2f86:	78 85       	ldd	r23, Y+8	; 0x08
    2f88:	89 85       	ldd	r24, Y+9	; 0x09
    2f8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	40 e8       	ldi	r20, 0x80	; 128
    2f92:	5f e3       	ldi	r21, 0x3F	; 63
    2f94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f98:	88 23       	and	r24, r24
    2f9a:	2c f4       	brge	.+10     	; 0x2fa6 <LCD_sendCommand+0x33a>
		__ticks = 1;
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	9e 83       	std	Y+6, r25	; 0x06
    2fa2:	8d 83       	std	Y+5, r24	; 0x05
    2fa4:	3f c0       	rjmp	.+126    	; 0x3024 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2fa6:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa8:	78 85       	ldd	r23, Y+8	; 0x08
    2faa:	89 85       	ldd	r24, Y+9	; 0x09
    2fac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	3f ef       	ldi	r19, 0xFF	; 255
    2fb2:	4f e7       	ldi	r20, 0x7F	; 127
    2fb4:	57 e4       	ldi	r21, 0x47	; 71
    2fb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fba:	18 16       	cp	r1, r24
    2fbc:	4c f5       	brge	.+82     	; 0x3010 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fc6:	20 e0       	ldi	r18, 0x00	; 0
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	40 e2       	ldi	r20, 0x20	; 32
    2fcc:	51 e4       	ldi	r21, 0x41	; 65
    2fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	bc 01       	movw	r22, r24
    2fd8:	cd 01       	movw	r24, r26
    2fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	9e 83       	std	Y+6, r25	; 0x06
    2fe4:	8d 83       	std	Y+5, r24	; 0x05
    2fe6:	0f c0       	rjmp	.+30     	; 0x3006 <LCD_sendCommand+0x39a>
    2fe8:	88 ec       	ldi	r24, 0xC8	; 200
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	9c 83       	std	Y+4, r25	; 0x04
    2fee:	8b 83       	std	Y+3, r24	; 0x03
    2ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff4:	01 97       	sbiw	r24, 0x01	; 1
    2ff6:	f1 f7       	brne	.-4      	; 0x2ff4 <LCD_sendCommand+0x388>
    2ff8:	9c 83       	std	Y+4, r25	; 0x04
    2ffa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	9e 83       	std	Y+6, r25	; 0x06
    3004:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3006:	8d 81       	ldd	r24, Y+5	; 0x05
    3008:	9e 81       	ldd	r25, Y+6	; 0x06
    300a:	00 97       	sbiw	r24, 0x00	; 0
    300c:	69 f7       	brne	.-38     	; 0x2fe8 <LCD_sendCommand+0x37c>
    300e:	14 c0       	rjmp	.+40     	; 0x3038 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3010:	6f 81       	ldd	r22, Y+7	; 0x07
    3012:	78 85       	ldd	r23, Y+8	; 0x08
    3014:	89 85       	ldd	r24, Y+9	; 0x09
    3016:	9a 85       	ldd	r25, Y+10	; 0x0a
    3018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301c:	dc 01       	movw	r26, r24
    301e:	cb 01       	movw	r24, r22
    3020:	9e 83       	std	Y+6, r25	; 0x06
    3022:	8d 83       	std	Y+5, r24	; 0x05
    3024:	8d 81       	ldd	r24, Y+5	; 0x05
    3026:	9e 81       	ldd	r25, Y+6	; 0x06
    3028:	9a 83       	std	Y+2, r25	; 0x02
    302a:	89 83       	std	Y+1, r24	; 0x01
    302c:	89 81       	ldd	r24, Y+1	; 0x01
    302e:	9a 81       	ldd	r25, Y+2	; 0x02
    3030:	01 97       	sbiw	r24, 0x01	; 1
    3032:	f1 f7       	brne	.-4      	; 0x3030 <LCD_sendCommand+0x3c4>
    3034:	9a 83       	std	Y+2, r25	; 0x02
    3036:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3038:	e9 96       	adiw	r28, 0x39	; 57
    303a:	0f b6       	in	r0, 0x3f	; 63
    303c:	f8 94       	cli
    303e:	de bf       	out	0x3e, r29	; 62
    3040:	0f be       	out	0x3f, r0	; 63
    3042:	cd bf       	out	0x3d, r28	; 61
    3044:	cf 91       	pop	r28
    3046:	df 91       	pop	r29
    3048:	08 95       	ret

0000304a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    304a:	df 93       	push	r29
    304c:	cf 93       	push	r28
    304e:	cd b7       	in	r28, 0x3d	; 61
    3050:	de b7       	in	r29, 0x3e	; 62
    3052:	e9 97       	sbiw	r28, 0x39	; 57
    3054:	0f b6       	in	r0, 0x3f	; 63
    3056:	f8 94       	cli
    3058:	de bf       	out	0x3e, r29	; 62
    305a:	0f be       	out	0x3f, r0	; 63
    305c:	cd bf       	out	0x3d, r28	; 61
    305e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    3060:	82 e0       	ldi	r24, 0x02	; 2
    3062:	60 e0       	ldi	r22, 0x00	; 0
    3064:	41 e0       	ldi	r20, 0x01	; 1
    3066:	0e 94 19 07 	call	0xe32	; 0xe32 <GPIO_writePin>
    306a:	80 e0       	ldi	r24, 0x00	; 0
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	a0 e8       	ldi	r26, 0x80	; 128
    3070:	bf e3       	ldi	r27, 0x3F	; 63
    3072:	8d ab       	std	Y+53, r24	; 0x35
    3074:	9e ab       	std	Y+54, r25	; 0x36
    3076:	af ab       	std	Y+55, r26	; 0x37
    3078:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    307a:	6d a9       	ldd	r22, Y+53	; 0x35
    307c:	7e a9       	ldd	r23, Y+54	; 0x36
    307e:	8f a9       	ldd	r24, Y+55	; 0x37
    3080:	98 ad       	ldd	r25, Y+56	; 0x38
    3082:	20 e0       	ldi	r18, 0x00	; 0
    3084:	30 e0       	ldi	r19, 0x00	; 0
    3086:	4a ef       	ldi	r20, 0xFA	; 250
    3088:	54 e4       	ldi	r21, 0x44	; 68
    308a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308e:	dc 01       	movw	r26, r24
    3090:	cb 01       	movw	r24, r22
    3092:	89 ab       	std	Y+49, r24	; 0x31
    3094:	9a ab       	std	Y+50, r25	; 0x32
    3096:	ab ab       	std	Y+51, r26	; 0x33
    3098:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    309a:	69 a9       	ldd	r22, Y+49	; 0x31
    309c:	7a a9       	ldd	r23, Y+50	; 0x32
    309e:	8b a9       	ldd	r24, Y+51	; 0x33
    30a0:	9c a9       	ldd	r25, Y+52	; 0x34
    30a2:	20 e0       	ldi	r18, 0x00	; 0
    30a4:	30 e0       	ldi	r19, 0x00	; 0
    30a6:	40 e8       	ldi	r20, 0x80	; 128
    30a8:	5f e3       	ldi	r21, 0x3F	; 63
    30aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30ae:	88 23       	and	r24, r24
    30b0:	2c f4       	brge	.+10     	; 0x30bc <LCD_displayCharacter+0x72>
		__ticks = 1;
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	98 ab       	std	Y+48, r25	; 0x30
    30b8:	8f a7       	std	Y+47, r24	; 0x2f
    30ba:	3f c0       	rjmp	.+126    	; 0x313a <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    30bc:	69 a9       	ldd	r22, Y+49	; 0x31
    30be:	7a a9       	ldd	r23, Y+50	; 0x32
    30c0:	8b a9       	ldd	r24, Y+51	; 0x33
    30c2:	9c a9       	ldd	r25, Y+52	; 0x34
    30c4:	20 e0       	ldi	r18, 0x00	; 0
    30c6:	3f ef       	ldi	r19, 0xFF	; 255
    30c8:	4f e7       	ldi	r20, 0x7F	; 127
    30ca:	57 e4       	ldi	r21, 0x47	; 71
    30cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30d0:	18 16       	cp	r1, r24
    30d2:	4c f5       	brge	.+82     	; 0x3126 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30d4:	6d a9       	ldd	r22, Y+53	; 0x35
    30d6:	7e a9       	ldd	r23, Y+54	; 0x36
    30d8:	8f a9       	ldd	r24, Y+55	; 0x37
    30da:	98 ad       	ldd	r25, Y+56	; 0x38
    30dc:	20 e0       	ldi	r18, 0x00	; 0
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	40 e2       	ldi	r20, 0x20	; 32
    30e2:	51 e4       	ldi	r21, 0x41	; 65
    30e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e8:	dc 01       	movw	r26, r24
    30ea:	cb 01       	movw	r24, r22
    30ec:	bc 01       	movw	r22, r24
    30ee:	cd 01       	movw	r24, r26
    30f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	98 ab       	std	Y+48, r25	; 0x30
    30fa:	8f a7       	std	Y+47, r24	; 0x2f
    30fc:	0f c0       	rjmp	.+30     	; 0x311c <LCD_displayCharacter+0xd2>
    30fe:	88 ec       	ldi	r24, 0xC8	; 200
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	9e a7       	std	Y+46, r25	; 0x2e
    3104:	8d a7       	std	Y+45, r24	; 0x2d
    3106:	8d a5       	ldd	r24, Y+45	; 0x2d
    3108:	9e a5       	ldd	r25, Y+46	; 0x2e
    310a:	01 97       	sbiw	r24, 0x01	; 1
    310c:	f1 f7       	brne	.-4      	; 0x310a <LCD_displayCharacter+0xc0>
    310e:	9e a7       	std	Y+46, r25	; 0x2e
    3110:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3112:	8f a5       	ldd	r24, Y+47	; 0x2f
    3114:	98 a9       	ldd	r25, Y+48	; 0x30
    3116:	01 97       	sbiw	r24, 0x01	; 1
    3118:	98 ab       	std	Y+48, r25	; 0x30
    311a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    311c:	8f a5       	ldd	r24, Y+47	; 0x2f
    311e:	98 a9       	ldd	r25, Y+48	; 0x30
    3120:	00 97       	sbiw	r24, 0x00	; 0
    3122:	69 f7       	brne	.-38     	; 0x30fe <LCD_displayCharacter+0xb4>
    3124:	14 c0       	rjmp	.+40     	; 0x314e <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3126:	69 a9       	ldd	r22, Y+49	; 0x31
    3128:	7a a9       	ldd	r23, Y+50	; 0x32
    312a:	8b a9       	ldd	r24, Y+51	; 0x33
    312c:	9c a9       	ldd	r25, Y+52	; 0x34
    312e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3132:	dc 01       	movw	r26, r24
    3134:	cb 01       	movw	r24, r22
    3136:	98 ab       	std	Y+48, r25	; 0x30
    3138:	8f a7       	std	Y+47, r24	; 0x2f
    313a:	8f a5       	ldd	r24, Y+47	; 0x2f
    313c:	98 a9       	ldd	r25, Y+48	; 0x30
    313e:	9c a7       	std	Y+44, r25	; 0x2c
    3140:	8b a7       	std	Y+43, r24	; 0x2b
    3142:	8b a5       	ldd	r24, Y+43	; 0x2b
    3144:	9c a5       	ldd	r25, Y+44	; 0x2c
    3146:	01 97       	sbiw	r24, 0x01	; 1
    3148:	f1 f7       	brne	.-4      	; 0x3146 <LCD_displayCharacter+0xfc>
    314a:	9c a7       	std	Y+44, r25	; 0x2c
    314c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    314e:	82 e0       	ldi	r24, 0x02	; 2
    3150:	61 e0       	ldi	r22, 0x01	; 1
    3152:	41 e0       	ldi	r20, 0x01	; 1
    3154:	0e 94 19 07 	call	0xe32	; 0xe32 <GPIO_writePin>
    3158:	80 e0       	ldi	r24, 0x00	; 0
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	a0 e8       	ldi	r26, 0x80	; 128
    315e:	bf e3       	ldi	r27, 0x3F	; 63
    3160:	8f a3       	std	Y+39, r24	; 0x27
    3162:	98 a7       	std	Y+40, r25	; 0x28
    3164:	a9 a7       	std	Y+41, r26	; 0x29
    3166:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3168:	6f a1       	ldd	r22, Y+39	; 0x27
    316a:	78 a5       	ldd	r23, Y+40	; 0x28
    316c:	89 a5       	ldd	r24, Y+41	; 0x29
    316e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	4a ef       	ldi	r20, 0xFA	; 250
    3176:	54 e4       	ldi	r21, 0x44	; 68
    3178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	8b a3       	std	Y+35, r24	; 0x23
    3182:	9c a3       	std	Y+36, r25	; 0x24
    3184:	ad a3       	std	Y+37, r26	; 0x25
    3186:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3188:	6b a1       	ldd	r22, Y+35	; 0x23
    318a:	7c a1       	ldd	r23, Y+36	; 0x24
    318c:	8d a1       	ldd	r24, Y+37	; 0x25
    318e:	9e a1       	ldd	r25, Y+38	; 0x26
    3190:	20 e0       	ldi	r18, 0x00	; 0
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	40 e8       	ldi	r20, 0x80	; 128
    3196:	5f e3       	ldi	r21, 0x3F	; 63
    3198:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    319c:	88 23       	and	r24, r24
    319e:	2c f4       	brge	.+10     	; 0x31aa <LCD_displayCharacter+0x160>
		__ticks = 1;
    31a0:	81 e0       	ldi	r24, 0x01	; 1
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	9a a3       	std	Y+34, r25	; 0x22
    31a6:	89 a3       	std	Y+33, r24	; 0x21
    31a8:	3f c0       	rjmp	.+126    	; 0x3228 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    31aa:	6b a1       	ldd	r22, Y+35	; 0x23
    31ac:	7c a1       	ldd	r23, Y+36	; 0x24
    31ae:	8d a1       	ldd	r24, Y+37	; 0x25
    31b0:	9e a1       	ldd	r25, Y+38	; 0x26
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	3f ef       	ldi	r19, 0xFF	; 255
    31b6:	4f e7       	ldi	r20, 0x7F	; 127
    31b8:	57 e4       	ldi	r21, 0x47	; 71
    31ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31be:	18 16       	cp	r1, r24
    31c0:	4c f5       	brge	.+82     	; 0x3214 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31c2:	6f a1       	ldd	r22, Y+39	; 0x27
    31c4:	78 a5       	ldd	r23, Y+40	; 0x28
    31c6:	89 a5       	ldd	r24, Y+41	; 0x29
    31c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	40 e2       	ldi	r20, 0x20	; 32
    31d0:	51 e4       	ldi	r21, 0x41	; 65
    31d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	bc 01       	movw	r22, r24
    31dc:	cd 01       	movw	r24, r26
    31de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	9a a3       	std	Y+34, r25	; 0x22
    31e8:	89 a3       	std	Y+33, r24	; 0x21
    31ea:	0f c0       	rjmp	.+30     	; 0x320a <LCD_displayCharacter+0x1c0>
    31ec:	88 ec       	ldi	r24, 0xC8	; 200
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	98 a3       	std	Y+32, r25	; 0x20
    31f2:	8f 8f       	std	Y+31, r24	; 0x1f
    31f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31f6:	98 a1       	ldd	r25, Y+32	; 0x20
    31f8:	01 97       	sbiw	r24, 0x01	; 1
    31fa:	f1 f7       	brne	.-4      	; 0x31f8 <LCD_displayCharacter+0x1ae>
    31fc:	98 a3       	std	Y+32, r25	; 0x20
    31fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3200:	89 a1       	ldd	r24, Y+33	; 0x21
    3202:	9a a1       	ldd	r25, Y+34	; 0x22
    3204:	01 97       	sbiw	r24, 0x01	; 1
    3206:	9a a3       	std	Y+34, r25	; 0x22
    3208:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    320a:	89 a1       	ldd	r24, Y+33	; 0x21
    320c:	9a a1       	ldd	r25, Y+34	; 0x22
    320e:	00 97       	sbiw	r24, 0x00	; 0
    3210:	69 f7       	brne	.-38     	; 0x31ec <LCD_displayCharacter+0x1a2>
    3212:	14 c0       	rjmp	.+40     	; 0x323c <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3214:	6b a1       	ldd	r22, Y+35	; 0x23
    3216:	7c a1       	ldd	r23, Y+36	; 0x24
    3218:	8d a1       	ldd	r24, Y+37	; 0x25
    321a:	9e a1       	ldd	r25, Y+38	; 0x26
    321c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3220:	dc 01       	movw	r26, r24
    3222:	cb 01       	movw	r24, r22
    3224:	9a a3       	std	Y+34, r25	; 0x22
    3226:	89 a3       	std	Y+33, r24	; 0x21
    3228:	89 a1       	ldd	r24, Y+33	; 0x21
    322a:	9a a1       	ldd	r25, Y+34	; 0x22
    322c:	9e 8f       	std	Y+30, r25	; 0x1e
    322e:	8d 8f       	std	Y+29, r24	; 0x1d
    3230:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3232:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3234:	01 97       	sbiw	r24, 0x01	; 1
    3236:	f1 f7       	brne	.-4      	; 0x3234 <LCD_displayCharacter+0x1ea>
    3238:	9e 8f       	std	Y+30, r25	; 0x1e
    323a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    323c:	80 e0       	ldi	r24, 0x00	; 0
    323e:	69 ad       	ldd	r22, Y+57	; 0x39
    3240:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <GPIO_writePort>
    3244:	80 e0       	ldi	r24, 0x00	; 0
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	a0 e8       	ldi	r26, 0x80	; 128
    324a:	bf e3       	ldi	r27, 0x3F	; 63
    324c:	89 8f       	std	Y+25, r24	; 0x19
    324e:	9a 8f       	std	Y+26, r25	; 0x1a
    3250:	ab 8f       	std	Y+27, r26	; 0x1b
    3252:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3254:	69 8d       	ldd	r22, Y+25	; 0x19
    3256:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3258:	8b 8d       	ldd	r24, Y+27	; 0x1b
    325a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	4a ef       	ldi	r20, 0xFA	; 250
    3262:	54 e4       	ldi	r21, 0x44	; 68
    3264:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3268:	dc 01       	movw	r26, r24
    326a:	cb 01       	movw	r24, r22
    326c:	8d 8b       	std	Y+21, r24	; 0x15
    326e:	9e 8b       	std	Y+22, r25	; 0x16
    3270:	af 8b       	std	Y+23, r26	; 0x17
    3272:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3274:	6d 89       	ldd	r22, Y+21	; 0x15
    3276:	7e 89       	ldd	r23, Y+22	; 0x16
    3278:	8f 89       	ldd	r24, Y+23	; 0x17
    327a:	98 8d       	ldd	r25, Y+24	; 0x18
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	40 e8       	ldi	r20, 0x80	; 128
    3282:	5f e3       	ldi	r21, 0x3F	; 63
    3284:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3288:	88 23       	and	r24, r24
    328a:	2c f4       	brge	.+10     	; 0x3296 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    328c:	81 e0       	ldi	r24, 0x01	; 1
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	9c 8b       	std	Y+20, r25	; 0x14
    3292:	8b 8b       	std	Y+19, r24	; 0x13
    3294:	3f c0       	rjmp	.+126    	; 0x3314 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    3296:	6d 89       	ldd	r22, Y+21	; 0x15
    3298:	7e 89       	ldd	r23, Y+22	; 0x16
    329a:	8f 89       	ldd	r24, Y+23	; 0x17
    329c:	98 8d       	ldd	r25, Y+24	; 0x18
    329e:	20 e0       	ldi	r18, 0x00	; 0
    32a0:	3f ef       	ldi	r19, 0xFF	; 255
    32a2:	4f e7       	ldi	r20, 0x7F	; 127
    32a4:	57 e4       	ldi	r21, 0x47	; 71
    32a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32aa:	18 16       	cp	r1, r24
    32ac:	4c f5       	brge	.+82     	; 0x3300 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ae:	69 8d       	ldd	r22, Y+25	; 0x19
    32b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32b6:	20 e0       	ldi	r18, 0x00	; 0
    32b8:	30 e0       	ldi	r19, 0x00	; 0
    32ba:	40 e2       	ldi	r20, 0x20	; 32
    32bc:	51 e4       	ldi	r21, 0x41	; 65
    32be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c2:	dc 01       	movw	r26, r24
    32c4:	cb 01       	movw	r24, r22
    32c6:	bc 01       	movw	r22, r24
    32c8:	cd 01       	movw	r24, r26
    32ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ce:	dc 01       	movw	r26, r24
    32d0:	cb 01       	movw	r24, r22
    32d2:	9c 8b       	std	Y+20, r25	; 0x14
    32d4:	8b 8b       	std	Y+19, r24	; 0x13
    32d6:	0f c0       	rjmp	.+30     	; 0x32f6 <LCD_displayCharacter+0x2ac>
    32d8:	88 ec       	ldi	r24, 0xC8	; 200
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	9a 8b       	std	Y+18, r25	; 0x12
    32de:	89 8b       	std	Y+17, r24	; 0x11
    32e0:	89 89       	ldd	r24, Y+17	; 0x11
    32e2:	9a 89       	ldd	r25, Y+18	; 0x12
    32e4:	01 97       	sbiw	r24, 0x01	; 1
    32e6:	f1 f7       	brne	.-4      	; 0x32e4 <LCD_displayCharacter+0x29a>
    32e8:	9a 8b       	std	Y+18, r25	; 0x12
    32ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ec:	8b 89       	ldd	r24, Y+19	; 0x13
    32ee:	9c 89       	ldd	r25, Y+20	; 0x14
    32f0:	01 97       	sbiw	r24, 0x01	; 1
    32f2:	9c 8b       	std	Y+20, r25	; 0x14
    32f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32f6:	8b 89       	ldd	r24, Y+19	; 0x13
    32f8:	9c 89       	ldd	r25, Y+20	; 0x14
    32fa:	00 97       	sbiw	r24, 0x00	; 0
    32fc:	69 f7       	brne	.-38     	; 0x32d8 <LCD_displayCharacter+0x28e>
    32fe:	14 c0       	rjmp	.+40     	; 0x3328 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3300:	6d 89       	ldd	r22, Y+21	; 0x15
    3302:	7e 89       	ldd	r23, Y+22	; 0x16
    3304:	8f 89       	ldd	r24, Y+23	; 0x17
    3306:	98 8d       	ldd	r25, Y+24	; 0x18
    3308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    330c:	dc 01       	movw	r26, r24
    330e:	cb 01       	movw	r24, r22
    3310:	9c 8b       	std	Y+20, r25	; 0x14
    3312:	8b 8b       	std	Y+19, r24	; 0x13
    3314:	8b 89       	ldd	r24, Y+19	; 0x13
    3316:	9c 89       	ldd	r25, Y+20	; 0x14
    3318:	98 8b       	std	Y+16, r25	; 0x10
    331a:	8f 87       	std	Y+15, r24	; 0x0f
    331c:	8f 85       	ldd	r24, Y+15	; 0x0f
    331e:	98 89       	ldd	r25, Y+16	; 0x10
    3320:	01 97       	sbiw	r24, 0x01	; 1
    3322:	f1 f7       	brne	.-4      	; 0x3320 <LCD_displayCharacter+0x2d6>
    3324:	98 8b       	std	Y+16, r25	; 0x10
    3326:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3328:	82 e0       	ldi	r24, 0x02	; 2
    332a:	61 e0       	ldi	r22, 0x01	; 1
    332c:	40 e0       	ldi	r20, 0x00	; 0
    332e:	0e 94 19 07 	call	0xe32	; 0xe32 <GPIO_writePin>
    3332:	80 e0       	ldi	r24, 0x00	; 0
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	a0 e8       	ldi	r26, 0x80	; 128
    3338:	bf e3       	ldi	r27, 0x3F	; 63
    333a:	8b 87       	std	Y+11, r24	; 0x0b
    333c:	9c 87       	std	Y+12, r25	; 0x0c
    333e:	ad 87       	std	Y+13, r26	; 0x0d
    3340:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3342:	6b 85       	ldd	r22, Y+11	; 0x0b
    3344:	7c 85       	ldd	r23, Y+12	; 0x0c
    3346:	8d 85       	ldd	r24, Y+13	; 0x0d
    3348:	9e 85       	ldd	r25, Y+14	; 0x0e
    334a:	20 e0       	ldi	r18, 0x00	; 0
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	4a ef       	ldi	r20, 0xFA	; 250
    3350:	54 e4       	ldi	r21, 0x44	; 68
    3352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3356:	dc 01       	movw	r26, r24
    3358:	cb 01       	movw	r24, r22
    335a:	8f 83       	std	Y+7, r24	; 0x07
    335c:	98 87       	std	Y+8, r25	; 0x08
    335e:	a9 87       	std	Y+9, r26	; 0x09
    3360:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3362:	6f 81       	ldd	r22, Y+7	; 0x07
    3364:	78 85       	ldd	r23, Y+8	; 0x08
    3366:	89 85       	ldd	r24, Y+9	; 0x09
    3368:	9a 85       	ldd	r25, Y+10	; 0x0a
    336a:	20 e0       	ldi	r18, 0x00	; 0
    336c:	30 e0       	ldi	r19, 0x00	; 0
    336e:	40 e8       	ldi	r20, 0x80	; 128
    3370:	5f e3       	ldi	r21, 0x3F	; 63
    3372:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3376:	88 23       	and	r24, r24
    3378:	2c f4       	brge	.+10     	; 0x3384 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	9e 83       	std	Y+6, r25	; 0x06
    3380:	8d 83       	std	Y+5, r24	; 0x05
    3382:	3f c0       	rjmp	.+126    	; 0x3402 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    3384:	6f 81       	ldd	r22, Y+7	; 0x07
    3386:	78 85       	ldd	r23, Y+8	; 0x08
    3388:	89 85       	ldd	r24, Y+9	; 0x09
    338a:	9a 85       	ldd	r25, Y+10	; 0x0a
    338c:	20 e0       	ldi	r18, 0x00	; 0
    338e:	3f ef       	ldi	r19, 0xFF	; 255
    3390:	4f e7       	ldi	r20, 0x7F	; 127
    3392:	57 e4       	ldi	r21, 0x47	; 71
    3394:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3398:	18 16       	cp	r1, r24
    339a:	4c f5       	brge	.+82     	; 0x33ee <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    339c:	6b 85       	ldd	r22, Y+11	; 0x0b
    339e:	7c 85       	ldd	r23, Y+12	; 0x0c
    33a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    33a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    33a4:	20 e0       	ldi	r18, 0x00	; 0
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	40 e2       	ldi	r20, 0x20	; 32
    33aa:	51 e4       	ldi	r21, 0x41	; 65
    33ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b0:	dc 01       	movw	r26, r24
    33b2:	cb 01       	movw	r24, r22
    33b4:	bc 01       	movw	r22, r24
    33b6:	cd 01       	movw	r24, r26
    33b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33bc:	dc 01       	movw	r26, r24
    33be:	cb 01       	movw	r24, r22
    33c0:	9e 83       	std	Y+6, r25	; 0x06
    33c2:	8d 83       	std	Y+5, r24	; 0x05
    33c4:	0f c0       	rjmp	.+30     	; 0x33e4 <LCD_displayCharacter+0x39a>
    33c6:	88 ec       	ldi	r24, 0xC8	; 200
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	9c 83       	std	Y+4, r25	; 0x04
    33cc:	8b 83       	std	Y+3, r24	; 0x03
    33ce:	8b 81       	ldd	r24, Y+3	; 0x03
    33d0:	9c 81       	ldd	r25, Y+4	; 0x04
    33d2:	01 97       	sbiw	r24, 0x01	; 1
    33d4:	f1 f7       	brne	.-4      	; 0x33d2 <LCD_displayCharacter+0x388>
    33d6:	9c 83       	std	Y+4, r25	; 0x04
    33d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33da:	8d 81       	ldd	r24, Y+5	; 0x05
    33dc:	9e 81       	ldd	r25, Y+6	; 0x06
    33de:	01 97       	sbiw	r24, 0x01	; 1
    33e0:	9e 83       	std	Y+6, r25	; 0x06
    33e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e4:	8d 81       	ldd	r24, Y+5	; 0x05
    33e6:	9e 81       	ldd	r25, Y+6	; 0x06
    33e8:	00 97       	sbiw	r24, 0x00	; 0
    33ea:	69 f7       	brne	.-38     	; 0x33c6 <LCD_displayCharacter+0x37c>
    33ec:	14 c0       	rjmp	.+40     	; 0x3416 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ee:	6f 81       	ldd	r22, Y+7	; 0x07
    33f0:	78 85       	ldd	r23, Y+8	; 0x08
    33f2:	89 85       	ldd	r24, Y+9	; 0x09
    33f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    33f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22
    33fe:	9e 83       	std	Y+6, r25	; 0x06
    3400:	8d 83       	std	Y+5, r24	; 0x05
    3402:	8d 81       	ldd	r24, Y+5	; 0x05
    3404:	9e 81       	ldd	r25, Y+6	; 0x06
    3406:	9a 83       	std	Y+2, r25	; 0x02
    3408:	89 83       	std	Y+1, r24	; 0x01
    340a:	89 81       	ldd	r24, Y+1	; 0x01
    340c:	9a 81       	ldd	r25, Y+2	; 0x02
    340e:	01 97       	sbiw	r24, 0x01	; 1
    3410:	f1 f7       	brne	.-4      	; 0x340e <LCD_displayCharacter+0x3c4>
    3412:	9a 83       	std	Y+2, r25	; 0x02
    3414:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3416:	e9 96       	adiw	r28, 0x39	; 57
    3418:	0f b6       	in	r0, 0x3f	; 63
    341a:	f8 94       	cli
    341c:	de bf       	out	0x3e, r29	; 62
    341e:	0f be       	out	0x3f, r0	; 63
    3420:	cd bf       	out	0x3d, r28	; 61
    3422:	cf 91       	pop	r28
    3424:	df 91       	pop	r29
    3426:	08 95       	ret

00003428 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3428:	df 93       	push	r29
    342a:	cf 93       	push	r28
    342c:	00 d0       	rcall	.+0      	; 0x342e <LCD_displayString+0x6>
    342e:	0f 92       	push	r0
    3430:	cd b7       	in	r28, 0x3d	; 61
    3432:	de b7       	in	r29, 0x3e	; 62
    3434:	9b 83       	std	Y+3, r25	; 0x03
    3436:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3438:	19 82       	std	Y+1, r1	; 0x01
    343a:	0e c0       	rjmp	.+28     	; 0x3458 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    343c:	89 81       	ldd	r24, Y+1	; 0x01
    343e:	28 2f       	mov	r18, r24
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	8a 81       	ldd	r24, Y+2	; 0x02
    3444:	9b 81       	ldd	r25, Y+3	; 0x03
    3446:	fc 01       	movw	r30, r24
    3448:	e2 0f       	add	r30, r18
    344a:	f3 1f       	adc	r31, r19
    344c:	80 81       	ld	r24, Z
    344e:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_displayCharacter>
		i++;
    3452:	89 81       	ldd	r24, Y+1	; 0x01
    3454:	8f 5f       	subi	r24, 0xFF	; 255
    3456:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3458:	89 81       	ldd	r24, Y+1	; 0x01
    345a:	28 2f       	mov	r18, r24
    345c:	30 e0       	ldi	r19, 0x00	; 0
    345e:	8a 81       	ldd	r24, Y+2	; 0x02
    3460:	9b 81       	ldd	r25, Y+3	; 0x03
    3462:	fc 01       	movw	r30, r24
    3464:	e2 0f       	add	r30, r18
    3466:	f3 1f       	adc	r31, r19
    3468:	80 81       	ld	r24, Z
    346a:	88 23       	and	r24, r24
    346c:	39 f7       	brne	.-50     	; 0x343c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    346e:	0f 90       	pop	r0
    3470:	0f 90       	pop	r0
    3472:	0f 90       	pop	r0
    3474:	cf 91       	pop	r28
    3476:	df 91       	pop	r29
    3478:	08 95       	ret

0000347a <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    347a:	df 93       	push	r29
    347c:	cf 93       	push	r28
    347e:	00 d0       	rcall	.+0      	; 0x3480 <LCD_moveCursor+0x6>
    3480:	00 d0       	rcall	.+0      	; 0x3482 <LCD_moveCursor+0x8>
    3482:	0f 92       	push	r0
    3484:	cd b7       	in	r28, 0x3d	; 61
    3486:	de b7       	in	r29, 0x3e	; 62
    3488:	8a 83       	std	Y+2, r24	; 0x02
    348a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    348c:	8a 81       	ldd	r24, Y+2	; 0x02
    348e:	28 2f       	mov	r18, r24
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	3d 83       	std	Y+5, r19	; 0x05
    3494:	2c 83       	std	Y+4, r18	; 0x04
    3496:	8c 81       	ldd	r24, Y+4	; 0x04
    3498:	9d 81       	ldd	r25, Y+5	; 0x05
    349a:	81 30       	cpi	r24, 0x01	; 1
    349c:	91 05       	cpc	r25, r1
    349e:	c1 f0       	breq	.+48     	; 0x34d0 <LCD_moveCursor+0x56>
    34a0:	2c 81       	ldd	r18, Y+4	; 0x04
    34a2:	3d 81       	ldd	r19, Y+5	; 0x05
    34a4:	22 30       	cpi	r18, 0x02	; 2
    34a6:	31 05       	cpc	r19, r1
    34a8:	2c f4       	brge	.+10     	; 0x34b4 <LCD_moveCursor+0x3a>
    34aa:	8c 81       	ldd	r24, Y+4	; 0x04
    34ac:	9d 81       	ldd	r25, Y+5	; 0x05
    34ae:	00 97       	sbiw	r24, 0x00	; 0
    34b0:	61 f0       	breq	.+24     	; 0x34ca <LCD_moveCursor+0x50>
    34b2:	19 c0       	rjmp	.+50     	; 0x34e6 <LCD_moveCursor+0x6c>
    34b4:	2c 81       	ldd	r18, Y+4	; 0x04
    34b6:	3d 81       	ldd	r19, Y+5	; 0x05
    34b8:	22 30       	cpi	r18, 0x02	; 2
    34ba:	31 05       	cpc	r19, r1
    34bc:	69 f0       	breq	.+26     	; 0x34d8 <LCD_moveCursor+0x5e>
    34be:	8c 81       	ldd	r24, Y+4	; 0x04
    34c0:	9d 81       	ldd	r25, Y+5	; 0x05
    34c2:	83 30       	cpi	r24, 0x03	; 3
    34c4:	91 05       	cpc	r25, r1
    34c6:	61 f0       	breq	.+24     	; 0x34e0 <LCD_moveCursor+0x66>
    34c8:	0e c0       	rjmp	.+28     	; 0x34e6 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    34ca:	8b 81       	ldd	r24, Y+3	; 0x03
    34cc:	89 83       	std	Y+1, r24	; 0x01
    34ce:	0b c0       	rjmp	.+22     	; 0x34e6 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    34d0:	8b 81       	ldd	r24, Y+3	; 0x03
    34d2:	80 5c       	subi	r24, 0xC0	; 192
    34d4:	89 83       	std	Y+1, r24	; 0x01
    34d6:	07 c0       	rjmp	.+14     	; 0x34e6 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    34d8:	8b 81       	ldd	r24, Y+3	; 0x03
    34da:	80 5f       	subi	r24, 0xF0	; 240
    34dc:	89 83       	std	Y+1, r24	; 0x01
    34de:	03 c0       	rjmp	.+6      	; 0x34e6 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    34e0:	8b 81       	ldd	r24, Y+3	; 0x03
    34e2:	80 5b       	subi	r24, 0xB0	; 176
    34e4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    34e6:	89 81       	ldd	r24, Y+1	; 0x01
    34e8:	80 68       	ori	r24, 0x80	; 128
    34ea:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <LCD_sendCommand>
}
    34ee:	0f 90       	pop	r0
    34f0:	0f 90       	pop	r0
    34f2:	0f 90       	pop	r0
    34f4:	0f 90       	pop	r0
    34f6:	0f 90       	pop	r0
    34f8:	cf 91       	pop	r28
    34fa:	df 91       	pop	r29
    34fc:	08 95       	ret

000034fe <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    34fe:	df 93       	push	r29
    3500:	cf 93       	push	r28
    3502:	00 d0       	rcall	.+0      	; 0x3504 <LCD_displayStringRowColumn+0x6>
    3504:	00 d0       	rcall	.+0      	; 0x3506 <LCD_displayStringRowColumn+0x8>
    3506:	cd b7       	in	r28, 0x3d	; 61
    3508:	de b7       	in	r29, 0x3e	; 62
    350a:	89 83       	std	Y+1, r24	; 0x01
    350c:	6a 83       	std	Y+2, r22	; 0x02
    350e:	5c 83       	std	Y+4, r21	; 0x04
    3510:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3512:	89 81       	ldd	r24, Y+1	; 0x01
    3514:	6a 81       	ldd	r22, Y+2	; 0x02
    3516:	0e 94 3d 1a 	call	0x347a	; 0x347a <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    351a:	8b 81       	ldd	r24, Y+3	; 0x03
    351c:	9c 81       	ldd	r25, Y+4	; 0x04
    351e:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
}
    3522:	0f 90       	pop	r0
    3524:	0f 90       	pop	r0
    3526:	0f 90       	pop	r0
    3528:	0f 90       	pop	r0
    352a:	cf 91       	pop	r28
    352c:	df 91       	pop	r29
    352e:	08 95       	ret

00003530 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3530:	df 93       	push	r29
    3532:	cf 93       	push	r28
    3534:	cd b7       	in	r28, 0x3d	; 61
    3536:	de b7       	in	r29, 0x3e	; 62
    3538:	62 97       	sbiw	r28, 0x12	; 18
    353a:	0f b6       	in	r0, 0x3f	; 63
    353c:	f8 94       	cli
    353e:	de bf       	out	0x3e, r29	; 62
    3540:	0f be       	out	0x3f, r0	; 63
    3542:	cd bf       	out	0x3d, r28	; 61
    3544:	9a 8b       	std	Y+18, r25	; 0x12
    3546:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3548:	89 89       	ldd	r24, Y+17	; 0x11
    354a:	9a 89       	ldd	r25, Y+18	; 0x12
    354c:	9e 01       	movw	r18, r28
    354e:	2f 5f       	subi	r18, 0xFF	; 255
    3550:	3f 4f       	sbci	r19, 0xFF	; 255
    3552:	b9 01       	movw	r22, r18
    3554:	4a e0       	ldi	r20, 0x0A	; 10
    3556:	50 e0       	ldi	r21, 0x00	; 0
    3558:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <itoa>
   LCD_displayString(buff); /* Display the string */
    355c:	ce 01       	movw	r24, r28
    355e:	01 96       	adiw	r24, 0x01	; 1
    3560:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_displayString>
}
    3564:	62 96       	adiw	r28, 0x12	; 18
    3566:	0f b6       	in	r0, 0x3f	; 63
    3568:	f8 94       	cli
    356a:	de bf       	out	0x3e, r29	; 62
    356c:	0f be       	out	0x3f, r0	; 63
    356e:	cd bf       	out	0x3d, r28	; 61
    3570:	cf 91       	pop	r28
    3572:	df 91       	pop	r29
    3574:	08 95       	ret

00003576 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3576:	df 93       	push	r29
    3578:	cf 93       	push	r28
    357a:	cd b7       	in	r28, 0x3d	; 61
    357c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    357e:	81 e0       	ldi	r24, 0x01	; 1
    3580:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <LCD_sendCommand>
}
    3584:	cf 91       	pop	r28
    3586:	df 91       	pop	r29
    3588:	08 95       	ret

0000358a <__vector_11>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect) {
    358a:	1f 92       	push	r1
    358c:	0f 92       	push	r0
    358e:	0f b6       	in	r0, 0x3f	; 63
    3590:	0f 92       	push	r0
    3592:	11 24       	eor	r1, r1
    3594:	2f 93       	push	r18
    3596:	3f 93       	push	r19
    3598:	4f 93       	push	r20
    359a:	5f 93       	push	r21
    359c:	6f 93       	push	r22
    359e:	7f 93       	push	r23
    35a0:	8f 93       	push	r24
    35a2:	9f 93       	push	r25
    35a4:	af 93       	push	r26
    35a6:	bf 93       	push	r27
    35a8:	ef 93       	push	r30
    35aa:	ff 93       	push	r31
    35ac:	df 93       	push	r29
    35ae:	cf 93       	push	r28
    35b0:	cd b7       	in	r28, 0x3d	; 61
    35b2:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr[0] != NULL_PTR) {
    35b4:	80 91 5b 02 	lds	r24, 0x025B
    35b8:	90 91 5c 02 	lds	r25, 0x025C
    35bc:	00 97       	sbiw	r24, 0x00	; 0
    35be:	29 f0       	breq	.+10     	; 0x35ca <__vector_11+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr[0])();
    35c0:	e0 91 5b 02 	lds	r30, 0x025B
    35c4:	f0 91 5c 02 	lds	r31, 0x025C
    35c8:	09 95       	icall
	}
}
    35ca:	cf 91       	pop	r28
    35cc:	df 91       	pop	r29
    35ce:	ff 91       	pop	r31
    35d0:	ef 91       	pop	r30
    35d2:	bf 91       	pop	r27
    35d4:	af 91       	pop	r26
    35d6:	9f 91       	pop	r25
    35d8:	8f 91       	pop	r24
    35da:	7f 91       	pop	r23
    35dc:	6f 91       	pop	r22
    35de:	5f 91       	pop	r21
    35e0:	4f 91       	pop	r20
    35e2:	3f 91       	pop	r19
    35e4:	2f 91       	pop	r18
    35e6:	0f 90       	pop	r0
    35e8:	0f be       	out	0x3f, r0	; 63
    35ea:	0f 90       	pop	r0
    35ec:	1f 90       	pop	r1
    35ee:	18 95       	reti

000035f0 <__vector_10>:

ISR(TIMER0_COMP_vect) {
    35f0:	1f 92       	push	r1
    35f2:	0f 92       	push	r0
    35f4:	0f b6       	in	r0, 0x3f	; 63
    35f6:	0f 92       	push	r0
    35f8:	11 24       	eor	r1, r1
    35fa:	2f 93       	push	r18
    35fc:	3f 93       	push	r19
    35fe:	4f 93       	push	r20
    3600:	5f 93       	push	r21
    3602:	6f 93       	push	r22
    3604:	7f 93       	push	r23
    3606:	8f 93       	push	r24
    3608:	9f 93       	push	r25
    360a:	af 93       	push	r26
    360c:	bf 93       	push	r27
    360e:	ef 93       	push	r30
    3610:	ff 93       	push	r31
    3612:	df 93       	push	r29
    3614:	cf 93       	push	r28
    3616:	cd b7       	in	r28, 0x3d	; 61
    3618:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr[0] != NULL_PTR) {
    361a:	80 91 5b 02 	lds	r24, 0x025B
    361e:	90 91 5c 02 	lds	r25, 0x025C
    3622:	00 97       	sbiw	r24, 0x00	; 0
    3624:	29 f0       	breq	.+10     	; 0x3630 <__vector_10+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr[0])();
    3626:	e0 91 5b 02 	lds	r30, 0x025B
    362a:	f0 91 5c 02 	lds	r31, 0x025C
    362e:	09 95       	icall
	}
}
    3630:	cf 91       	pop	r28
    3632:	df 91       	pop	r29
    3634:	ff 91       	pop	r31
    3636:	ef 91       	pop	r30
    3638:	bf 91       	pop	r27
    363a:	af 91       	pop	r26
    363c:	9f 91       	pop	r25
    363e:	8f 91       	pop	r24
    3640:	7f 91       	pop	r23
    3642:	6f 91       	pop	r22
    3644:	5f 91       	pop	r21
    3646:	4f 91       	pop	r20
    3648:	3f 91       	pop	r19
    364a:	2f 91       	pop	r18
    364c:	0f 90       	pop	r0
    364e:	0f be       	out	0x3f, r0	; 63
    3650:	0f 90       	pop	r0
    3652:	1f 90       	pop	r1
    3654:	18 95       	reti

00003656 <__vector_9>:

ISR(TIMER1_OVF_vect) {
    3656:	1f 92       	push	r1
    3658:	0f 92       	push	r0
    365a:	0f b6       	in	r0, 0x3f	; 63
    365c:	0f 92       	push	r0
    365e:	11 24       	eor	r1, r1
    3660:	2f 93       	push	r18
    3662:	3f 93       	push	r19
    3664:	4f 93       	push	r20
    3666:	5f 93       	push	r21
    3668:	6f 93       	push	r22
    366a:	7f 93       	push	r23
    366c:	8f 93       	push	r24
    366e:	9f 93       	push	r25
    3670:	af 93       	push	r26
    3672:	bf 93       	push	r27
    3674:	ef 93       	push	r30
    3676:	ff 93       	push	r31
    3678:	df 93       	push	r29
    367a:	cf 93       	push	r28
    367c:	cd b7       	in	r28, 0x3d	; 61
    367e:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr[1] != NULL_PTR) {
    3680:	80 91 5d 02 	lds	r24, 0x025D
    3684:	90 91 5e 02 	lds	r25, 0x025E
    3688:	00 97       	sbiw	r24, 0x00	; 0
    368a:	29 f0       	breq	.+10     	; 0x3696 <__vector_9+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr[1])();
    368c:	e0 91 5d 02 	lds	r30, 0x025D
    3690:	f0 91 5e 02 	lds	r31, 0x025E
    3694:	09 95       	icall
	}
}
    3696:	cf 91       	pop	r28
    3698:	df 91       	pop	r29
    369a:	ff 91       	pop	r31
    369c:	ef 91       	pop	r30
    369e:	bf 91       	pop	r27
    36a0:	af 91       	pop	r26
    36a2:	9f 91       	pop	r25
    36a4:	8f 91       	pop	r24
    36a6:	7f 91       	pop	r23
    36a8:	6f 91       	pop	r22
    36aa:	5f 91       	pop	r21
    36ac:	4f 91       	pop	r20
    36ae:	3f 91       	pop	r19
    36b0:	2f 91       	pop	r18
    36b2:	0f 90       	pop	r0
    36b4:	0f be       	out	0x3f, r0	; 63
    36b6:	0f 90       	pop	r0
    36b8:	1f 90       	pop	r1
    36ba:	18 95       	reti

000036bc <__vector_7>:

ISR(TIMER1_COMPA_vect) {
    36bc:	1f 92       	push	r1
    36be:	0f 92       	push	r0
    36c0:	0f b6       	in	r0, 0x3f	; 63
    36c2:	0f 92       	push	r0
    36c4:	11 24       	eor	r1, r1
    36c6:	2f 93       	push	r18
    36c8:	3f 93       	push	r19
    36ca:	4f 93       	push	r20
    36cc:	5f 93       	push	r21
    36ce:	6f 93       	push	r22
    36d0:	7f 93       	push	r23
    36d2:	8f 93       	push	r24
    36d4:	9f 93       	push	r25
    36d6:	af 93       	push	r26
    36d8:	bf 93       	push	r27
    36da:	ef 93       	push	r30
    36dc:	ff 93       	push	r31
    36de:	df 93       	push	r29
    36e0:	cf 93       	push	r28
    36e2:	cd b7       	in	r28, 0x3d	; 61
    36e4:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr[1] != NULL_PTR) {
    36e6:	80 91 5d 02 	lds	r24, 0x025D
    36ea:	90 91 5e 02 	lds	r25, 0x025E
    36ee:	00 97       	sbiw	r24, 0x00	; 0
    36f0:	29 f0       	breq	.+10     	; 0x36fc <__vector_7+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr[1])();
    36f2:	e0 91 5d 02 	lds	r30, 0x025D
    36f6:	f0 91 5e 02 	lds	r31, 0x025E
    36fa:	09 95       	icall
	}
}
    36fc:	cf 91       	pop	r28
    36fe:	df 91       	pop	r29
    3700:	ff 91       	pop	r31
    3702:	ef 91       	pop	r30
    3704:	bf 91       	pop	r27
    3706:	af 91       	pop	r26
    3708:	9f 91       	pop	r25
    370a:	8f 91       	pop	r24
    370c:	7f 91       	pop	r23
    370e:	6f 91       	pop	r22
    3710:	5f 91       	pop	r21
    3712:	4f 91       	pop	r20
    3714:	3f 91       	pop	r19
    3716:	2f 91       	pop	r18
    3718:	0f 90       	pop	r0
    371a:	0f be       	out	0x3f, r0	; 63
    371c:	0f 90       	pop	r0
    371e:	1f 90       	pop	r1
    3720:	18 95       	reti

00003722 <__vector_5>:

ISR(TIMER2_OVF_vect) {
    3722:	1f 92       	push	r1
    3724:	0f 92       	push	r0
    3726:	0f b6       	in	r0, 0x3f	; 63
    3728:	0f 92       	push	r0
    372a:	11 24       	eor	r1, r1
    372c:	2f 93       	push	r18
    372e:	3f 93       	push	r19
    3730:	4f 93       	push	r20
    3732:	5f 93       	push	r21
    3734:	6f 93       	push	r22
    3736:	7f 93       	push	r23
    3738:	8f 93       	push	r24
    373a:	9f 93       	push	r25
    373c:	af 93       	push	r26
    373e:	bf 93       	push	r27
    3740:	ef 93       	push	r30
    3742:	ff 93       	push	r31
    3744:	df 93       	push	r29
    3746:	cf 93       	push	r28
    3748:	cd b7       	in	r28, 0x3d	; 61
    374a:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr[2] != NULL_PTR) {
    374c:	80 91 5f 02 	lds	r24, 0x025F
    3750:	90 91 60 02 	lds	r25, 0x0260
    3754:	00 97       	sbiw	r24, 0x00	; 0
    3756:	29 f0       	breq	.+10     	; 0x3762 <__vector_5+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr[2])();
    3758:	e0 91 5f 02 	lds	r30, 0x025F
    375c:	f0 91 60 02 	lds	r31, 0x0260
    3760:	09 95       	icall
	}
}
    3762:	cf 91       	pop	r28
    3764:	df 91       	pop	r29
    3766:	ff 91       	pop	r31
    3768:	ef 91       	pop	r30
    376a:	bf 91       	pop	r27
    376c:	af 91       	pop	r26
    376e:	9f 91       	pop	r25
    3770:	8f 91       	pop	r24
    3772:	7f 91       	pop	r23
    3774:	6f 91       	pop	r22
    3776:	5f 91       	pop	r21
    3778:	4f 91       	pop	r20
    377a:	3f 91       	pop	r19
    377c:	2f 91       	pop	r18
    377e:	0f 90       	pop	r0
    3780:	0f be       	out	0x3f, r0	; 63
    3782:	0f 90       	pop	r0
    3784:	1f 90       	pop	r1
    3786:	18 95       	reti

00003788 <__vector_4>:

ISR(TIMER2_COMP_vect) {
    3788:	1f 92       	push	r1
    378a:	0f 92       	push	r0
    378c:	0f b6       	in	r0, 0x3f	; 63
    378e:	0f 92       	push	r0
    3790:	11 24       	eor	r1, r1
    3792:	2f 93       	push	r18
    3794:	3f 93       	push	r19
    3796:	4f 93       	push	r20
    3798:	5f 93       	push	r21
    379a:	6f 93       	push	r22
    379c:	7f 93       	push	r23
    379e:	8f 93       	push	r24
    37a0:	9f 93       	push	r25
    37a2:	af 93       	push	r26
    37a4:	bf 93       	push	r27
    37a6:	ef 93       	push	r30
    37a8:	ff 93       	push	r31
    37aa:	df 93       	push	r29
    37ac:	cf 93       	push	r28
    37ae:	cd b7       	in	r28, 0x3d	; 61
    37b0:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr[2] != NULL_PTR) {
    37b2:	80 91 5f 02 	lds	r24, 0x025F
    37b6:	90 91 60 02 	lds	r25, 0x0260
    37ba:	00 97       	sbiw	r24, 0x00	; 0
    37bc:	29 f0       	breq	.+10     	; 0x37c8 <__vector_4+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr[2])();
    37be:	e0 91 5f 02 	lds	r30, 0x025F
    37c2:	f0 91 60 02 	lds	r31, 0x0260
    37c6:	09 95       	icall
	}
}
    37c8:	cf 91       	pop	r28
    37ca:	df 91       	pop	r29
    37cc:	ff 91       	pop	r31
    37ce:	ef 91       	pop	r30
    37d0:	bf 91       	pop	r27
    37d2:	af 91       	pop	r26
    37d4:	9f 91       	pop	r25
    37d6:	8f 91       	pop	r24
    37d8:	7f 91       	pop	r23
    37da:	6f 91       	pop	r22
    37dc:	5f 91       	pop	r21
    37de:	4f 91       	pop	r20
    37e0:	3f 91       	pop	r19
    37e2:	2f 91       	pop	r18
    37e4:	0f 90       	pop	r0
    37e6:	0f be       	out	0x3f, r0	; 63
    37e8:	0f 90       	pop	r0
    37ea:	1f 90       	pop	r1
    37ec:	18 95       	reti

000037ee <Timer_init>:

/*******************************************************************************
 *                            Function Definitions                             *
 *******************************************************************************/

void Timer_init(const Timer_ConfigType *Config_Ptr) {
    37ee:	df 93       	push	r29
    37f0:	cf 93       	push	r28
    37f2:	00 d0       	rcall	.+0      	; 0x37f4 <Timer_init+0x6>
    37f4:	00 d0       	rcall	.+0      	; 0x37f6 <Timer_init+0x8>
    37f6:	cd b7       	in	r28, 0x3d	; 61
    37f8:	de b7       	in	r29, 0x3e	; 62
    37fa:	9a 83       	std	Y+2, r25	; 0x02
    37fc:	89 83       	std	Y+1, r24	; 0x01
	switch (Config_Ptr->timer_ID) {
    37fe:	e9 81       	ldd	r30, Y+1	; 0x01
    3800:	fa 81       	ldd	r31, Y+2	; 0x02
    3802:	84 81       	ldd	r24, Z+4	; 0x04
    3804:	28 2f       	mov	r18, r24
    3806:	30 e0       	ldi	r19, 0x00	; 0
    3808:	3c 83       	std	Y+4, r19	; 0x04
    380a:	2b 83       	std	Y+3, r18	; 0x03
    380c:	8b 81       	ldd	r24, Y+3	; 0x03
    380e:	9c 81       	ldd	r25, Y+4	; 0x04
    3810:	81 30       	cpi	r24, 0x01	; 1
    3812:	91 05       	cpc	r25, r1
    3814:	71 f0       	breq	.+28     	; 0x3832 <Timer_init+0x44>
    3816:	2b 81       	ldd	r18, Y+3	; 0x03
    3818:	3c 81       	ldd	r19, Y+4	; 0x04
    381a:	22 30       	cpi	r18, 0x02	; 2
    381c:	31 05       	cpc	r19, r1
    381e:	71 f0       	breq	.+28     	; 0x383c <Timer_init+0x4e>
    3820:	8b 81       	ldd	r24, Y+3	; 0x03
    3822:	9c 81       	ldd	r25, Y+4	; 0x04
    3824:	00 97       	sbiw	r24, 0x00	; 0
    3826:	71 f4       	brne	.+28     	; 0x3844 <Timer_init+0x56>
	case TIMER0:
		Timer0_init(Config_Ptr);
    3828:	89 81       	ldd	r24, Y+1	; 0x01
    382a:	9a 81       	ldd	r25, Y+2	; 0x02
    382c:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <Timer0_init>
    3830:	09 c0       	rjmp	.+18     	; 0x3844 <Timer_init+0x56>
		break;
	case TIMER1:
		Timer1_init(Config_Ptr);
    3832:	89 81       	ldd	r24, Y+1	; 0x01
    3834:	9a 81       	ldd	r25, Y+2	; 0x02
    3836:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <Timer1_init>
    383a:	04 c0       	rjmp	.+8      	; 0x3844 <Timer_init+0x56>
		break;
	case TIMER2:
		Timer2_init(Config_Ptr);
    383c:	89 81       	ldd	r24, Y+1	; 0x01
    383e:	9a 81       	ldd	r25, Y+2	; 0x02
    3840:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <Timer2_init>
		break;
	}
}
    3844:	0f 90       	pop	r0
    3846:	0f 90       	pop	r0
    3848:	0f 90       	pop	r0
    384a:	0f 90       	pop	r0
    384c:	cf 91       	pop	r28
    384e:	df 91       	pop	r29
    3850:	08 95       	ret

00003852 <Timer_deInit>:

void Timer_deInit(Timer_ID_Type timer_type) {
    3852:	df 93       	push	r29
    3854:	cf 93       	push	r28
    3856:	00 d0       	rcall	.+0      	; 0x3858 <Timer_deInit+0x6>
    3858:	0f 92       	push	r0
    385a:	cd b7       	in	r28, 0x3d	; 61
    385c:	de b7       	in	r29, 0x3e	; 62
    385e:	89 83       	std	Y+1, r24	; 0x01
	switch (timer_type) {
    3860:	89 81       	ldd	r24, Y+1	; 0x01
    3862:	28 2f       	mov	r18, r24
    3864:	30 e0       	ldi	r19, 0x00	; 0
    3866:	3b 83       	std	Y+3, r19	; 0x03
    3868:	2a 83       	std	Y+2, r18	; 0x02
    386a:	8a 81       	ldd	r24, Y+2	; 0x02
    386c:	9b 81       	ldd	r25, Y+3	; 0x03
    386e:	81 30       	cpi	r24, 0x01	; 1
    3870:	91 05       	cpc	r25, r1
    3872:	61 f0       	breq	.+24     	; 0x388c <Timer_deInit+0x3a>
    3874:	2a 81       	ldd	r18, Y+2	; 0x02
    3876:	3b 81       	ldd	r19, Y+3	; 0x03
    3878:	22 30       	cpi	r18, 0x02	; 2
    387a:	31 05       	cpc	r19, r1
    387c:	51 f0       	breq	.+20     	; 0x3892 <Timer_deInit+0x40>
    387e:	8a 81       	ldd	r24, Y+2	; 0x02
    3880:	9b 81       	ldd	r25, Y+3	; 0x03
    3882:	00 97       	sbiw	r24, 0x00	; 0
    3884:	41 f4       	brne	.+16     	; 0x3896 <Timer_deInit+0x44>
	case TIMER0:
		Timer0_deInit();
    3886:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <Timer0_deInit>
    388a:	05 c0       	rjmp	.+10     	; 0x3896 <Timer_deInit+0x44>
		break;
	case TIMER1:
		Timer1_deInit();
    388c:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <Timer1_deInit>
    3890:	02 c0       	rjmp	.+4      	; 0x3896 <Timer_deInit+0x44>
		break;
	case TIMER2:
		Timer2_deInit();
    3892:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <Timer2_deInit>
		break;
	}
}
    3896:	0f 90       	pop	r0
    3898:	0f 90       	pop	r0
    389a:	0f 90       	pop	r0
    389c:	cf 91       	pop	r28
    389e:	df 91       	pop	r29
    38a0:	08 95       	ret

000038a2 <Timer_setCallBack>:

void Timer_setCallBack(void (*a_ptr)(void), Timer_ID_Type a_timer_ID) {
    38a2:	df 93       	push	r29
    38a4:	cf 93       	push	r28
    38a6:	00 d0       	rcall	.+0      	; 0x38a8 <Timer_setCallBack+0x6>
    38a8:	0f 92       	push	r0
    38aa:	cd b7       	in	r28, 0x3d	; 61
    38ac:	de b7       	in	r29, 0x3e	; 62
    38ae:	9a 83       	std	Y+2, r25	; 0x02
    38b0:	89 83       	std	Y+1, r24	; 0x01
    38b2:	6b 83       	std	Y+3, r22	; 0x03
	g_callBackPtr[a_timer_ID] = a_ptr;
    38b4:	8b 81       	ldd	r24, Y+3	; 0x03
    38b6:	88 2f       	mov	r24, r24
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	29 81       	ldd	r18, Y+1	; 0x01
    38bc:	3a 81       	ldd	r19, Y+2	; 0x02
    38be:	88 0f       	add	r24, r24
    38c0:	99 1f       	adc	r25, r25
    38c2:	fc 01       	movw	r30, r24
    38c4:	e5 5a       	subi	r30, 0xA5	; 165
    38c6:	fd 4f       	sbci	r31, 0xFD	; 253
    38c8:	31 83       	std	Z+1, r19	; 0x01
    38ca:	20 83       	st	Z, r18
}
    38cc:	0f 90       	pop	r0
    38ce:	0f 90       	pop	r0
    38d0:	0f 90       	pop	r0
    38d2:	cf 91       	pop	r28
    38d4:	df 91       	pop	r29
    38d6:	08 95       	ret

000038d8 <Timer0_init>:

/*******************************************************************************
 *                          Timer0 Functions                                   *
 *******************************************************************************/

static void Timer0_init(const Timer_ConfigType *Config_Ptr) {
    38d8:	df 93       	push	r29
    38da:	cf 93       	push	r28
    38dc:	00 d0       	rcall	.+0      	; 0x38de <Timer0_init+0x6>
    38de:	00 d0       	rcall	.+0      	; 0x38e0 <Timer0_init+0x8>
    38e0:	cd b7       	in	r28, 0x3d	; 61
    38e2:	de b7       	in	r29, 0x3e	; 62
    38e4:	9a 83       	std	Y+2, r25	; 0x02
    38e6:	89 83       	std	Y+1, r24	; 0x01
	/* Set the initial value */
	TCNT0_REG.Byte = Config_Ptr->timer_InitialValue;
    38e8:	a2 e5       	ldi	r26, 0x52	; 82
    38ea:	b0 e0       	ldi	r27, 0x00	; 0
    38ec:	e9 81       	ldd	r30, Y+1	; 0x01
    38ee:	fa 81       	ldd	r31, Y+2	; 0x02
    38f0:	80 81       	ld	r24, Z
    38f2:	91 81       	ldd	r25, Z+1	; 0x01
    38f4:	8c 93       	st	X, r24

	/* Set the prescaler based on the provided timer_clock */
	switch (Config_Ptr->timer_clock) {
    38f6:	e9 81       	ldd	r30, Y+1	; 0x01
    38f8:	fa 81       	ldd	r31, Y+2	; 0x02
    38fa:	85 81       	ldd	r24, Z+5	; 0x05
    38fc:	28 2f       	mov	r18, r24
    38fe:	30 e0       	ldi	r19, 0x00	; 0
    3900:	3c 83       	std	Y+4, r19	; 0x04
    3902:	2b 83       	std	Y+3, r18	; 0x03
    3904:	8b 81       	ldd	r24, Y+3	; 0x03
    3906:	9c 81       	ldd	r25, Y+4	; 0x04
    3908:	82 30       	cpi	r24, 0x02	; 2
    390a:	91 05       	cpc	r25, r1
    390c:	a9 f1       	breq	.+106    	; 0x3978 <Timer0_init+0xa0>
    390e:	2b 81       	ldd	r18, Y+3	; 0x03
    3910:	3c 81       	ldd	r19, Y+4	; 0x04
    3912:	23 30       	cpi	r18, 0x03	; 3
    3914:	31 05       	cpc	r19, r1
    3916:	54 f4       	brge	.+20     	; 0x392c <Timer0_init+0x54>
    3918:	8b 81       	ldd	r24, Y+3	; 0x03
    391a:	9c 81       	ldd	r25, Y+4	; 0x04
    391c:	00 97       	sbiw	r24, 0x00	; 0
    391e:	b1 f0       	breq	.+44     	; 0x394c <Timer0_init+0x74>
    3920:	2b 81       	ldd	r18, Y+3	; 0x03
    3922:	3c 81       	ldd	r19, Y+4	; 0x04
    3924:	21 30       	cpi	r18, 0x01	; 1
    3926:	31 05       	cpc	r19, r1
    3928:	09 f1       	breq	.+66     	; 0x396c <Timer0_init+0x94>
    392a:	47 c0       	rjmp	.+142    	; 0x39ba <Timer0_init+0xe2>
    392c:	8b 81       	ldd	r24, Y+3	; 0x03
    392e:	9c 81       	ldd	r25, Y+4	; 0x04
    3930:	84 30       	cpi	r24, 0x04	; 4
    3932:	91 05       	cpc	r25, r1
    3934:	91 f1       	breq	.+100    	; 0x399a <Timer0_init+0xc2>
    3936:	2b 81       	ldd	r18, Y+3	; 0x03
    3938:	3c 81       	ldd	r19, Y+4	; 0x04
    393a:	24 30       	cpi	r18, 0x04	; 4
    393c:	31 05       	cpc	r19, r1
    393e:	14 f1       	brlt	.+68     	; 0x3984 <Timer0_init+0xac>
    3940:	8b 81       	ldd	r24, Y+3	; 0x03
    3942:	9c 81       	ldd	r25, Y+4	; 0x04
    3944:	85 30       	cpi	r24, 0x05	; 5
    3946:	91 05       	cpc	r25, r1
    3948:	71 f1       	breq	.+92     	; 0x39a6 <Timer0_init+0xce>
    394a:	37 c0       	rjmp	.+110    	; 0x39ba <Timer0_init+0xe2>
	case NO_CLOCK:
		/* Stop the timer */
		TCCR0_REG.Bits.CS00_Bit = 0;
    394c:	e3 e5       	ldi	r30, 0x53	; 83
    394e:	f0 e0       	ldi	r31, 0x00	; 0
    3950:	80 81       	ld	r24, Z
    3952:	8e 7f       	andi	r24, 0xFE	; 254
    3954:	80 83       	st	Z, r24
		TCCR0_REG.Bits.CS01_Bit = 0;
    3956:	e3 e5       	ldi	r30, 0x53	; 83
    3958:	f0 e0       	ldi	r31, 0x00	; 0
    395a:	80 81       	ld	r24, Z
    395c:	8d 7f       	andi	r24, 0xFD	; 253
    395e:	80 83       	st	Z, r24
		TCCR0_REG.Bits.CS02_Bit = 0;
    3960:	e3 e5       	ldi	r30, 0x53	; 83
    3962:	f0 e0       	ldi	r31, 0x00	; 0
    3964:	80 81       	ld	r24, Z
    3966:	8b 7f       	andi	r24, 0xFB	; 251
    3968:	80 83       	st	Z, r24
    396a:	27 c0       	rjmp	.+78     	; 0x39ba <Timer0_init+0xe2>
		break;
	case PRESCALER_1:
		TCCR0_REG.Bits.CS00_Bit = 1;
    396c:	e3 e5       	ldi	r30, 0x53	; 83
    396e:	f0 e0       	ldi	r31, 0x00	; 0
    3970:	80 81       	ld	r24, Z
    3972:	81 60       	ori	r24, 0x01	; 1
    3974:	80 83       	st	Z, r24
    3976:	21 c0       	rjmp	.+66     	; 0x39ba <Timer0_init+0xe2>
		break;
	case PRESCALER_8:
		TCCR0_REG.Bits.CS01_Bit = 1;
    3978:	e3 e5       	ldi	r30, 0x53	; 83
    397a:	f0 e0       	ldi	r31, 0x00	; 0
    397c:	80 81       	ld	r24, Z
    397e:	82 60       	ori	r24, 0x02	; 2
    3980:	80 83       	st	Z, r24
    3982:	1b c0       	rjmp	.+54     	; 0x39ba <Timer0_init+0xe2>
		break;
	case PRESCALER_64:
		TCCR0_REG.Bits.CS00_Bit = 1;
    3984:	e3 e5       	ldi	r30, 0x53	; 83
    3986:	f0 e0       	ldi	r31, 0x00	; 0
    3988:	80 81       	ld	r24, Z
    398a:	81 60       	ori	r24, 0x01	; 1
    398c:	80 83       	st	Z, r24
		TCCR0_REG.Bits.CS01_Bit = 1;
    398e:	e3 e5       	ldi	r30, 0x53	; 83
    3990:	f0 e0       	ldi	r31, 0x00	; 0
    3992:	80 81       	ld	r24, Z
    3994:	82 60       	ori	r24, 0x02	; 2
    3996:	80 83       	st	Z, r24
    3998:	10 c0       	rjmp	.+32     	; 0x39ba <Timer0_init+0xe2>
		break;
	case PRESCALER_256:
		TCCR0_REG.Bits.CS02_Bit = 1;
    399a:	e3 e5       	ldi	r30, 0x53	; 83
    399c:	f0 e0       	ldi	r31, 0x00	; 0
    399e:	80 81       	ld	r24, Z
    39a0:	84 60       	ori	r24, 0x04	; 4
    39a2:	80 83       	st	Z, r24
    39a4:	0a c0       	rjmp	.+20     	; 0x39ba <Timer0_init+0xe2>
		break;
	case PRESCALER_1024:
		TCCR0_REG.Bits.CS02_Bit = 1;
    39a6:	e3 e5       	ldi	r30, 0x53	; 83
    39a8:	f0 e0       	ldi	r31, 0x00	; 0
    39aa:	80 81       	ld	r24, Z
    39ac:	84 60       	ori	r24, 0x04	; 4
    39ae:	80 83       	st	Z, r24
		TCCR0_REG.Bits.CS00_Bit = 1;
    39b0:	e3 e5       	ldi	r30, 0x53	; 83
    39b2:	f0 e0       	ldi	r31, 0x00	; 0
    39b4:	80 81       	ld	r24, Z
    39b6:	81 60       	ori	r24, 0x01	; 1
    39b8:	80 83       	st	Z, r24
		break;
	}

	if (Config_Ptr->timer_mode == NORMAL_MODE) {
    39ba:	e9 81       	ldd	r30, Y+1	; 0x01
    39bc:	fa 81       	ldd	r31, Y+2	; 0x02
    39be:	86 81       	ldd	r24, Z+6	; 0x06
    39c0:	88 23       	and	r24, r24
    39c2:	31 f4       	brne	.+12     	; 0x39d0 <Timer0_init+0xf8>
		/* Enable Timer0 overflow interrupt */
		TIMSK_REG.Bits.TOIE0_Bit = 1;
    39c4:	e9 e5       	ldi	r30, 0x59	; 89
    39c6:	f0 e0       	ldi	r31, 0x00	; 0
    39c8:	80 81       	ld	r24, Z
    39ca:	81 60       	ori	r24, 0x01	; 1
    39cc:	80 83       	st	Z, r24
    39ce:	11 c0       	rjmp	.+34     	; 0x39f2 <Timer0_init+0x11a>
	} else if (Config_Ptr->timer_mode == COMPARE_MODE) {
    39d0:	e9 81       	ldd	r30, Y+1	; 0x01
    39d2:	fa 81       	ldd	r31, Y+2	; 0x02
    39d4:	86 81       	ldd	r24, Z+6	; 0x06
    39d6:	81 30       	cpi	r24, 0x01	; 1
    39d8:	61 f4       	brne	.+24     	; 0x39f2 <Timer0_init+0x11a>
		/* Set compare match value */
		OCR0_REG.Byte = Config_Ptr->timer_compare_MatchValue;
    39da:	ac e5       	ldi	r26, 0x5C	; 92
    39dc:	b0 e0       	ldi	r27, 0x00	; 0
    39de:	e9 81       	ldd	r30, Y+1	; 0x01
    39e0:	fa 81       	ldd	r31, Y+2	; 0x02
    39e2:	82 81       	ldd	r24, Z+2	; 0x02
    39e4:	93 81       	ldd	r25, Z+3	; 0x03
    39e6:	8c 93       	st	X, r24

		/* Enable Timer0 compare interrupt */
		TIMSK_REG.Bits.OCIE0_Bit = 1;
    39e8:	e9 e5       	ldi	r30, 0x59	; 89
    39ea:	f0 e0       	ldi	r31, 0x00	; 0
    39ec:	80 81       	ld	r24, Z
    39ee:	82 60       	ori	r24, 0x02	; 2
    39f0:	80 83       	st	Z, r24
	}
}
    39f2:	0f 90       	pop	r0
    39f4:	0f 90       	pop	r0
    39f6:	0f 90       	pop	r0
    39f8:	0f 90       	pop	r0
    39fa:	cf 91       	pop	r28
    39fc:	df 91       	pop	r29
    39fe:	08 95       	ret

00003a00 <Timer0_deInit>:

// Timer0 de-initialization
static void Timer0_deInit(void) {
    3a00:	df 93       	push	r29
    3a02:	cf 93       	push	r28
    3a04:	cd b7       	in	r28, 0x3d	; 61
    3a06:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG.Byte = 0; /* Stop the timer */
    3a08:	e3 e5       	ldi	r30, 0x53	; 83
    3a0a:	f0 e0       	ldi	r31, 0x00	; 0
    3a0c:	10 82       	st	Z, r1
	 /* Clear the prescaler bits in TCCR0 to stop the timer */
	TCCR0_REG.Bits.CS00_Bit = 0; /* Clear Clock Select Bit 0 */
    3a0e:	e3 e5       	ldi	r30, 0x53	; 83
    3a10:	f0 e0       	ldi	r31, 0x00	; 0
    3a12:	80 81       	ld	r24, Z
    3a14:	8e 7f       	andi	r24, 0xFE	; 254
    3a16:	80 83       	st	Z, r24
	TCCR0_REG.Bits.CS01_Bit = 0; /* Clear Clock Select Bit 1 */
    3a18:	e3 e5       	ldi	r30, 0x53	; 83
    3a1a:	f0 e0       	ldi	r31, 0x00	; 0
    3a1c:	80 81       	ld	r24, Z
    3a1e:	8d 7f       	andi	r24, 0xFD	; 253
    3a20:	80 83       	st	Z, r24
	TCCR0_REG.Bits.CS02_Bit = 0; /* Clear Clock Select Bit 2 */
    3a22:	e3 e5       	ldi	r30, 0x53	; 83
    3a24:	f0 e0       	ldi	r31, 0x00	; 0
    3a26:	80 81       	ld	r24, Z
    3a28:	8b 7f       	andi	r24, 0xFB	; 251
    3a2a:	80 83       	st	Z, r24

	TIMSK_REG.Bits.TOIE0_Bit = 0; /* Disable Timer0 overflow interrupt */
    3a2c:	e9 e5       	ldi	r30, 0x59	; 89
    3a2e:	f0 e0       	ldi	r31, 0x00	; 0
    3a30:	80 81       	ld	r24, Z
    3a32:	8e 7f       	andi	r24, 0xFE	; 254
    3a34:	80 83       	st	Z, r24
	TIMSK_REG.Bits.OCIE0_Bit = 0; /* Disable Timer0 compare interrupt */
    3a36:	e9 e5       	ldi	r30, 0x59	; 89
    3a38:	f0 e0       	ldi	r31, 0x00	; 0
    3a3a:	80 81       	ld	r24, Z
    3a3c:	8d 7f       	andi	r24, 0xFD	; 253
    3a3e:	80 83       	st	Z, r24

	g_callBackPtr[0] = NULL_PTR;
    3a40:	10 92 5c 02 	sts	0x025C, r1
    3a44:	10 92 5b 02 	sts	0x025B, r1
}
    3a48:	cf 91       	pop	r28
    3a4a:	df 91       	pop	r29
    3a4c:	08 95       	ret

00003a4e <Timer1_init>:

/*******************************************************************************
 *                          Timer1 Functions                                   *
 *******************************************************************************/

static void Timer1_init(const Timer_ConfigType *Config_Ptr) {
    3a4e:	df 93       	push	r29
    3a50:	cf 93       	push	r28
    3a52:	00 d0       	rcall	.+0      	; 0x3a54 <Timer1_init+0x6>
    3a54:	cd b7       	in	r28, 0x3d	; 61
    3a56:	de b7       	in	r29, 0x3e	; 62
    3a58:	9a 83       	std	Y+2, r25	; 0x02
    3a5a:	89 83       	std	Y+1, r24	; 0x01
	 * FOC1A    = 1   Force Output Compare for Compare unit A (non-PWM mode)
	 * FOC1B    = 1   Force Output Compare for Compare unit B (non-PWM mode)
	 * WGM11:0        Waveform Generation Mode, selected in configuration
	 ***********************************************************************/

	TCCR1A_REG.Bits.FOC1A_Bit = 1;
    3a5c:	ef e4       	ldi	r30, 0x4F	; 79
    3a5e:	f0 e0       	ldi	r31, 0x00	; 0
    3a60:	80 81       	ld	r24, Z
    3a62:	88 60       	ori	r24, 0x08	; 8
    3a64:	80 83       	st	Z, r24
	TCCR1A_REG.Bits.FOC1B_Bit = 1;
    3a66:	ef e4       	ldi	r30, 0x4F	; 79
    3a68:	f0 e0       	ldi	r31, 0x00	; 0
    3a6a:	80 81       	ld	r24, Z
    3a6c:	84 60       	ori	r24, 0x04	; 4
    3a6e:	80 83       	st	Z, r24
	/*
	 * insert the required mode in WGM bits (WGM10 and WGM11) of TCCR1A Register
	 * and (WGM12 and WGM13) of TCCR1B Register
	 */

	if (Config_Ptr->timer_mode == NORMAL_MODE) {
    3a70:	e9 81       	ldd	r30, Y+1	; 0x01
    3a72:	fa 81       	ldd	r31, Y+2	; 0x02
    3a74:	86 81       	ldd	r24, Z+6	; 0x06
    3a76:	88 23       	and	r24, r24
    3a78:	a9 f4       	brne	.+42     	; 0x3aa4 <Timer1_init+0x56>
		TCCR1A_REG.Bits.WGM10_Bit = 0;
    3a7a:	ef e4       	ldi	r30, 0x4F	; 79
    3a7c:	f0 e0       	ldi	r31, 0x00	; 0
    3a7e:	80 81       	ld	r24, Z
    3a80:	8e 7f       	andi	r24, 0xFE	; 254
    3a82:	80 83       	st	Z, r24
		TCCR1A_REG.Bits.WGM11_Bit = 0;
    3a84:	ef e4       	ldi	r30, 0x4F	; 79
    3a86:	f0 e0       	ldi	r31, 0x00	; 0
    3a88:	80 81       	ld	r24, Z
    3a8a:	8d 7f       	andi	r24, 0xFD	; 253
    3a8c:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.WGM12_Bit = 0;
    3a8e:	ee e4       	ldi	r30, 0x4E	; 78
    3a90:	f0 e0       	ldi	r31, 0x00	; 0
    3a92:	80 81       	ld	r24, Z
    3a94:	87 7f       	andi	r24, 0xF7	; 247
    3a96:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.WGM13_Bit = 0;
    3a98:	ee e4       	ldi	r30, 0x4E	; 78
    3a9a:	f0 e0       	ldi	r31, 0x00	; 0
    3a9c:	80 81       	ld	r24, Z
    3a9e:	8f 7e       	andi	r24, 0xEF	; 239
    3aa0:	80 83       	st	Z, r24
    3aa2:	19 c0       	rjmp	.+50     	; 0x3ad6 <Timer1_init+0x88>
	} else if (Config_Ptr->timer_mode == COMPARE_MODE) {
    3aa4:	e9 81       	ldd	r30, Y+1	; 0x01
    3aa6:	fa 81       	ldd	r31, Y+2	; 0x02
    3aa8:	86 81       	ldd	r24, Z+6	; 0x06
    3aaa:	81 30       	cpi	r24, 0x01	; 1
    3aac:	a1 f4       	brne	.+40     	; 0x3ad6 <Timer1_init+0x88>
		TCCR1A_REG.Bits.WGM10_Bit = 0;
    3aae:	ef e4       	ldi	r30, 0x4F	; 79
    3ab0:	f0 e0       	ldi	r31, 0x00	; 0
    3ab2:	80 81       	ld	r24, Z
    3ab4:	8e 7f       	andi	r24, 0xFE	; 254
    3ab6:	80 83       	st	Z, r24
		TCCR1A_REG.Bits.WGM11_Bit = 0;
    3ab8:	ef e4       	ldi	r30, 0x4F	; 79
    3aba:	f0 e0       	ldi	r31, 0x00	; 0
    3abc:	80 81       	ld	r24, Z
    3abe:	8d 7f       	andi	r24, 0xFD	; 253
    3ac0:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.WGM12_Bit = 1;
    3ac2:	ee e4       	ldi	r30, 0x4E	; 78
    3ac4:	f0 e0       	ldi	r31, 0x00	; 0
    3ac6:	80 81       	ld	r24, Z
    3ac8:	88 60       	ori	r24, 0x08	; 8
    3aca:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.WGM13_Bit = 0;
    3acc:	ee e4       	ldi	r30, 0x4E	; 78
    3ace:	f0 e0       	ldi	r31, 0x00	; 0
    3ad0:	80 81       	ld	r24, Z
    3ad2:	8f 7e       	andi	r24, 0xEF	; 239
    3ad4:	80 83       	st	Z, r24
	 * WGM13:2        Waveform Generation Mode, selected in configuration
	 * CS12:0   = 0   Clock Select, selected in configuration
	 ***********************************************************************/

	/* Set the prescaler based on the provided timer_clock */
	TCCR1B_REG.Byte = (0xF8 & TCCR1B_REG.Byte) | (Config_Ptr->timer_clock);
    3ad6:	ae e4       	ldi	r26, 0x4E	; 78
    3ad8:	b0 e0       	ldi	r27, 0x00	; 0
    3ada:	ee e4       	ldi	r30, 0x4E	; 78
    3adc:	f0 e0       	ldi	r31, 0x00	; 0
    3ade:	80 81       	ld	r24, Z
    3ae0:	98 2f       	mov	r25, r24
    3ae2:	98 7f       	andi	r25, 0xF8	; 248
    3ae4:	e9 81       	ldd	r30, Y+1	; 0x01
    3ae6:	fa 81       	ldd	r31, Y+2	; 0x02
    3ae8:	85 81       	ldd	r24, Z+5	; 0x05
    3aea:	89 2b       	or	r24, r25
    3aec:	8c 93       	st	X, r24
			TCCR1B_REG.Bits.CS12_Bit = 1;
			break;
		}*/

	/* Set Initial value */
	TCNT1_REG.Word = Config_Ptr->timer_InitialValue;
    3aee:	ac e4       	ldi	r26, 0x4C	; 76
    3af0:	b0 e0       	ldi	r27, 0x00	; 0
    3af2:	e9 81       	ldd	r30, Y+1	; 0x01
    3af4:	fa 81       	ldd	r31, Y+2	; 0x02
    3af6:	80 81       	ld	r24, Z
    3af8:	91 81       	ldd	r25, Z+1	; 0x01
    3afa:	11 96       	adiw	r26, 0x01	; 1
    3afc:	9c 93       	st	X, r25
    3afe:	8e 93       	st	-X, r24

	/* Check For mode */
	if (Config_Ptr->timer_mode == NORMAL_MODE) {
    3b00:	e9 81       	ldd	r30, Y+1	; 0x01
    3b02:	fa 81       	ldd	r31, Y+2	; 0x02
    3b04:	86 81       	ldd	r24, Z+6	; 0x06
    3b06:	88 23       	and	r24, r24
    3b08:	31 f4       	brne	.+12     	; 0x3b16 <Timer1_init+0xc8>
		/* Enable Timer1 overflow interrupt */
		TIMSK1_REG.Bits.TOIE1_Bit = 1;
    3b0a:	e9 e5       	ldi	r30, 0x59	; 89
    3b0c:	f0 e0       	ldi	r31, 0x00	; 0
    3b0e:	80 81       	ld	r24, Z
    3b10:	84 60       	ori	r24, 0x04	; 4
    3b12:	80 83       	st	Z, r24
    3b14:	13 c0       	rjmp	.+38     	; 0x3b3c <Timer1_init+0xee>

	} else if (Config_Ptr->timer_mode == COMPARE_MODE) {
    3b16:	e9 81       	ldd	r30, Y+1	; 0x01
    3b18:	fa 81       	ldd	r31, Y+2	; 0x02
    3b1a:	86 81       	ldd	r24, Z+6	; 0x06
    3b1c:	81 30       	cpi	r24, 0x01	; 1
    3b1e:	71 f4       	brne	.+28     	; 0x3b3c <Timer1_init+0xee>
		/* Set compare match value */
		OCR1A_REG.Word = Config_Ptr->timer_compare_MatchValue;
    3b20:	aa e4       	ldi	r26, 0x4A	; 74
    3b22:	b0 e0       	ldi	r27, 0x00	; 0
    3b24:	e9 81       	ldd	r30, Y+1	; 0x01
    3b26:	fa 81       	ldd	r31, Y+2	; 0x02
    3b28:	82 81       	ldd	r24, Z+2	; 0x02
    3b2a:	93 81       	ldd	r25, Z+3	; 0x03
    3b2c:	11 96       	adiw	r26, 0x01	; 1
    3b2e:	9c 93       	st	X, r25
    3b30:	8e 93       	st	-X, r24

		/* Enable Timer1 compare interrupt */
		TIMSK1_REG.Bits.OCIE1A_Bit = 1;
    3b32:	e9 e5       	ldi	r30, 0x59	; 89
    3b34:	f0 e0       	ldi	r31, 0x00	; 0
    3b36:	80 81       	ld	r24, Z
    3b38:	80 61       	ori	r24, 0x10	; 16
    3b3a:	80 83       	st	Z, r24
	}
}
    3b3c:	0f 90       	pop	r0
    3b3e:	0f 90       	pop	r0
    3b40:	cf 91       	pop	r28
    3b42:	df 91       	pop	r29
    3b44:	08 95       	ret

00003b46 <Timer1_deInit>:

static void Timer1_deInit(void) {
    3b46:	df 93       	push	r29
    3b48:	cf 93       	push	r28
    3b4a:	cd b7       	in	r28, 0x3d	; 61
    3b4c:	de b7       	in	r29, 0x3e	; 62
	/* Reset TCCR1A and TCCR1B registers to their default values */
	TCCR1A_REG.Byte = 0;
    3b4e:	ef e4       	ldi	r30, 0x4F	; 79
    3b50:	f0 e0       	ldi	r31, 0x00	; 0
    3b52:	10 82       	st	Z, r1
	TCCR1B_REG.Byte = 0;
    3b54:	ee e4       	ldi	r30, 0x4E	; 78
    3b56:	f0 e0       	ldi	r31, 0x00	; 0
    3b58:	10 82       	st	Z, r1

	/* Clear the Timer1 counter register */
	TCNT1_REG.Word = 0;
    3b5a:	ec e4       	ldi	r30, 0x4C	; 76
    3b5c:	f0 e0       	ldi	r31, 0x00	; 0
    3b5e:	11 82       	std	Z+1, r1	; 0x01
    3b60:	10 82       	st	Z, r1

	/* Clear the Output Compare Register */
	OCR1A_REG.Word = 0;
    3b62:	ea e4       	ldi	r30, 0x4A	; 74
    3b64:	f0 e0       	ldi	r31, 0x00	; 0
    3b66:	11 82       	std	Z+1, r1	; 0x01
    3b68:	10 82       	st	Z, r1

	/* Disable Timer1 overflow interrupt */
	TIMSK1_REG.Bits.TOIE1_Bit = 0;
    3b6a:	e9 e5       	ldi	r30, 0x59	; 89
    3b6c:	f0 e0       	ldi	r31, 0x00	; 0
    3b6e:	80 81       	ld	r24, Z
    3b70:	8b 7f       	andi	r24, 0xFB	; 251
    3b72:	80 83       	st	Z, r24

	/* Disable Timer1 compare match interrupt */
	TIMSK1_REG.Bits.OCIE1A_Bit = 0;
    3b74:	e9 e5       	ldi	r30, 0x59	; 89
    3b76:	f0 e0       	ldi	r31, 0x00	; 0
    3b78:	80 81       	ld	r24, Z
    3b7a:	8f 7e       	andi	r24, 0xEF	; 239
    3b7c:	80 83       	st	Z, r24

	g_callBackPtr[1] = NULL_PTR;
    3b7e:	10 92 5e 02 	sts	0x025E, r1
    3b82:	10 92 5d 02 	sts	0x025D, r1
}
    3b86:	cf 91       	pop	r28
    3b88:	df 91       	pop	r29
    3b8a:	08 95       	ret

00003b8c <Timer2_init>:

/*******************************************************************************
 *                          Timer2 Functions                                   *
 *******************************************************************************/

static void Timer2_init(const Timer_ConfigType *Config_Ptr) {
    3b8c:	df 93       	push	r29
    3b8e:	cf 93       	push	r28
    3b90:	00 d0       	rcall	.+0      	; 0x3b92 <Timer2_init+0x6>
    3b92:	00 d0       	rcall	.+0      	; 0x3b94 <Timer2_init+0x8>
    3b94:	cd b7       	in	r28, 0x3d	; 61
    3b96:	de b7       	in	r29, 0x3e	; 62
    3b98:	9a 83       	std	Y+2, r25	; 0x02
    3b9a:	89 83       	std	Y+1, r24	; 0x01
	/* Set the initial value */
	TCNT2_REG.Byte = Config_Ptr->timer_InitialValue;
    3b9c:	a4 e4       	ldi	r26, 0x44	; 68
    3b9e:	b0 e0       	ldi	r27, 0x00	; 0
    3ba0:	e9 81       	ldd	r30, Y+1	; 0x01
    3ba2:	fa 81       	ldd	r31, Y+2	; 0x02
    3ba4:	80 81       	ld	r24, Z
    3ba6:	91 81       	ldd	r25, Z+1	; 0x01
    3ba8:	8c 93       	st	X, r24

	/* Force Output Compare */
	TCCR2_REG.Bits.FOC2_Bit = 1;
    3baa:	e5 e4       	ldi	r30, 0x45	; 69
    3bac:	f0 e0       	ldi	r31, 0x00	; 0
    3bae:	80 81       	ld	r24, Z
    3bb0:	80 68       	ori	r24, 0x80	; 128
    3bb2:	80 83       	st	Z, r24

	switch (Config_Ptr->timer_clock) {
    3bb4:	e9 81       	ldd	r30, Y+1	; 0x01
    3bb6:	fa 81       	ldd	r31, Y+2	; 0x02
    3bb8:	85 81       	ldd	r24, Z+5	; 0x05
    3bba:	28 2f       	mov	r18, r24
    3bbc:	30 e0       	ldi	r19, 0x00	; 0
    3bbe:	3c 83       	std	Y+4, r19	; 0x04
    3bc0:	2b 83       	std	Y+3, r18	; 0x03
    3bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    3bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    3bc6:	82 30       	cpi	r24, 0x02	; 2
    3bc8:	91 05       	cpc	r25, r1
    3bca:	a9 f1       	breq	.+106    	; 0x3c36 <Timer2_init+0xaa>
    3bcc:	2b 81       	ldd	r18, Y+3	; 0x03
    3bce:	3c 81       	ldd	r19, Y+4	; 0x04
    3bd0:	23 30       	cpi	r18, 0x03	; 3
    3bd2:	31 05       	cpc	r19, r1
    3bd4:	54 f4       	brge	.+20     	; 0x3bea <Timer2_init+0x5e>
    3bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    3bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    3bda:	00 97       	sbiw	r24, 0x00	; 0
    3bdc:	b1 f0       	breq	.+44     	; 0x3c0a <Timer2_init+0x7e>
    3bde:	2b 81       	ldd	r18, Y+3	; 0x03
    3be0:	3c 81       	ldd	r19, Y+4	; 0x04
    3be2:	21 30       	cpi	r18, 0x01	; 1
    3be4:	31 05       	cpc	r19, r1
    3be6:	09 f1       	breq	.+66     	; 0x3c2a <Timer2_init+0x9e>
    3be8:	4c c0       	rjmp	.+152    	; 0x3c82 <Timer2_init+0xf6>
    3bea:	8b 81       	ldd	r24, Y+3	; 0x03
    3bec:	9c 81       	ldd	r25, Y+4	; 0x04
    3bee:	84 30       	cpi	r24, 0x04	; 4
    3bf0:	91 05       	cpc	r25, r1
    3bf2:	69 f1       	breq	.+90     	; 0x3c4e <Timer2_init+0xc2>
    3bf4:	2b 81       	ldd	r18, Y+3	; 0x03
    3bf6:	3c 81       	ldd	r19, Y+4	; 0x04
    3bf8:	24 30       	cpi	r18, 0x04	; 4
    3bfa:	31 05       	cpc	r19, r1
    3bfc:	14 f1       	brlt	.+68     	; 0x3c42 <Timer2_init+0xb6>
    3bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    3c00:	9c 81       	ldd	r25, Y+4	; 0x04
    3c02:	85 30       	cpi	r24, 0x05	; 5
    3c04:	91 05       	cpc	r25, r1
    3c06:	71 f1       	breq	.+92     	; 0x3c64 <Timer2_init+0xd8>
    3c08:	3c c0       	rjmp	.+120    	; 0x3c82 <Timer2_init+0xf6>
	case NO_CLOCK:
		/* Stop the timer */
		TCCR2_REG.Bits.CS20_Bit = 0;
    3c0a:	e5 e4       	ldi	r30, 0x45	; 69
    3c0c:	f0 e0       	ldi	r31, 0x00	; 0
    3c0e:	80 81       	ld	r24, Z
    3c10:	8e 7f       	andi	r24, 0xFE	; 254
    3c12:	80 83       	st	Z, r24
		TCCR2_REG.Bits.CS21_Bit = 0;
    3c14:	e5 e4       	ldi	r30, 0x45	; 69
    3c16:	f0 e0       	ldi	r31, 0x00	; 0
    3c18:	80 81       	ld	r24, Z
    3c1a:	8d 7f       	andi	r24, 0xFD	; 253
    3c1c:	80 83       	st	Z, r24
		TCCR2_REG.Bits.CS22_Bit = 0;
    3c1e:	e5 e4       	ldi	r30, 0x45	; 69
    3c20:	f0 e0       	ldi	r31, 0x00	; 0
    3c22:	80 81       	ld	r24, Z
    3c24:	8b 7f       	andi	r24, 0xFB	; 251
    3c26:	80 83       	st	Z, r24
    3c28:	2c c0       	rjmp	.+88     	; 0x3c82 <Timer2_init+0xf6>
		break;
	case PRESCALER_1:
		TCCR2_REG.Bits.CS20_Bit = 1;
    3c2a:	e5 e4       	ldi	r30, 0x45	; 69
    3c2c:	f0 e0       	ldi	r31, 0x00	; 0
    3c2e:	80 81       	ld	r24, Z
    3c30:	81 60       	ori	r24, 0x01	; 1
    3c32:	80 83       	st	Z, r24
    3c34:	26 c0       	rjmp	.+76     	; 0x3c82 <Timer2_init+0xf6>
		break;
	case PRESCALER_8:
		TCCR2_REG.Bits.CS21_Bit = 1;
    3c36:	e5 e4       	ldi	r30, 0x45	; 69
    3c38:	f0 e0       	ldi	r31, 0x00	; 0
    3c3a:	80 81       	ld	r24, Z
    3c3c:	82 60       	ori	r24, 0x02	; 2
    3c3e:	80 83       	st	Z, r24
    3c40:	20 c0       	rjmp	.+64     	; 0x3c82 <Timer2_init+0xf6>
		break;
	case PRESCALER_64:
		TCCR2_REG.Bits.CS22_Bit = 1;
    3c42:	e5 e4       	ldi	r30, 0x45	; 69
    3c44:	f0 e0       	ldi	r31, 0x00	; 0
    3c46:	80 81       	ld	r24, Z
    3c48:	84 60       	ori	r24, 0x04	; 4
    3c4a:	80 83       	st	Z, r24
    3c4c:	1a c0       	rjmp	.+52     	; 0x3c82 <Timer2_init+0xf6>
		break;
	case PRESCALER_256:
		TCCR2_REG.Bits.CS21_Bit = 1;
    3c4e:	e5 e4       	ldi	r30, 0x45	; 69
    3c50:	f0 e0       	ldi	r31, 0x00	; 0
    3c52:	80 81       	ld	r24, Z
    3c54:	82 60       	ori	r24, 0x02	; 2
    3c56:	80 83       	st	Z, r24
		TCCR2_REG.Bits.CS22_Bit = 1;
    3c58:	e5 e4       	ldi	r30, 0x45	; 69
    3c5a:	f0 e0       	ldi	r31, 0x00	; 0
    3c5c:	80 81       	ld	r24, Z
    3c5e:	84 60       	ori	r24, 0x04	; 4
    3c60:	80 83       	st	Z, r24
    3c62:	0f c0       	rjmp	.+30     	; 0x3c82 <Timer2_init+0xf6>
		break;
	case PRESCALER_1024:
		TCCR2_REG.Bits.CS22_Bit = 1;
    3c64:	e5 e4       	ldi	r30, 0x45	; 69
    3c66:	f0 e0       	ldi	r31, 0x00	; 0
    3c68:	80 81       	ld	r24, Z
    3c6a:	84 60       	ori	r24, 0x04	; 4
    3c6c:	80 83       	st	Z, r24
		TCCR2_REG.Bits.CS21_Bit = 1;
    3c6e:	e5 e4       	ldi	r30, 0x45	; 69
    3c70:	f0 e0       	ldi	r31, 0x00	; 0
    3c72:	80 81       	ld	r24, Z
    3c74:	82 60       	ori	r24, 0x02	; 2
    3c76:	80 83       	st	Z, r24
		TCCR2_REG.Bits.CS20_Bit = 1;
    3c78:	e5 e4       	ldi	r30, 0x45	; 69
    3c7a:	f0 e0       	ldi	r31, 0x00	; 0
    3c7c:	80 81       	ld	r24, Z
    3c7e:	81 60       	ori	r24, 0x01	; 1
    3c80:	80 83       	st	Z, r24
		break;
	}
	if (Config_Ptr->timer_mode == NORMAL_MODE) {
    3c82:	e9 81       	ldd	r30, Y+1	; 0x01
    3c84:	fa 81       	ldd	r31, Y+2	; 0x02
    3c86:	86 81       	ldd	r24, Z+6	; 0x06
    3c88:	88 23       	and	r24, r24
    3c8a:	81 f4       	brne	.+32     	; 0x3cac <Timer2_init+0x120>
		/* Waveform Generation Mode For CTC */
		TCCR2_REG.Bits.WGM20_Bit = 0;
    3c8c:	e5 e4       	ldi	r30, 0x45	; 69
    3c8e:	f0 e0       	ldi	r31, 0x00	; 0
    3c90:	80 81       	ld	r24, Z
    3c92:	8f 7b       	andi	r24, 0xBF	; 191
    3c94:	80 83       	st	Z, r24
		TCCR2_REG.Bits.WGM21_Bit = 0;
    3c96:	e5 e4       	ldi	r30, 0x45	; 69
    3c98:	f0 e0       	ldi	r31, 0x00	; 0
    3c9a:	80 81       	ld	r24, Z
    3c9c:	87 7f       	andi	r24, 0xF7	; 247
    3c9e:	80 83       	st	Z, r24

		/* Enable Timer2 OverFlow interrupt */
		TIMSK2_REG.Bits.TOIE2_Bit = 1;
    3ca0:	e9 e5       	ldi	r30, 0x59	; 89
    3ca2:	f0 e0       	ldi	r31, 0x00	; 0
    3ca4:	80 81       	ld	r24, Z
    3ca6:	80 68       	ori	r24, 0x80	; 128
    3ca8:	80 83       	st	Z, r24
    3caa:	1b c0       	rjmp	.+54     	; 0x3ce2 <Timer2_init+0x156>

	} else if (Config_Ptr->timer_mode == COMPARE_MODE) {
    3cac:	e9 81       	ldd	r30, Y+1	; 0x01
    3cae:	fa 81       	ldd	r31, Y+2	; 0x02
    3cb0:	86 81       	ldd	r24, Z+6	; 0x06
    3cb2:	81 30       	cpi	r24, 0x01	; 1
    3cb4:	b1 f4       	brne	.+44     	; 0x3ce2 <Timer2_init+0x156>

		/* Waveform Generation Mode For CTC */

		TCCR2_REG.Bits.WGM20_Bit = 0;
    3cb6:	e5 e4       	ldi	r30, 0x45	; 69
    3cb8:	f0 e0       	ldi	r31, 0x00	; 0
    3cba:	80 81       	ld	r24, Z
    3cbc:	8f 7b       	andi	r24, 0xBF	; 191
    3cbe:	80 83       	st	Z, r24
		TCCR2_REG.Bits.WGM21_Bit = 1;
    3cc0:	e5 e4       	ldi	r30, 0x45	; 69
    3cc2:	f0 e0       	ldi	r31, 0x00	; 0
    3cc4:	80 81       	ld	r24, Z
    3cc6:	88 60       	ori	r24, 0x08	; 8
    3cc8:	80 83       	st	Z, r24

		/* Set compare match value */

		OCR2_REG.Byte = Config_Ptr->timer_compare_MatchValue;
    3cca:	a3 e4       	ldi	r26, 0x43	; 67
    3ccc:	b0 e0       	ldi	r27, 0x00	; 0
    3cce:	e9 81       	ldd	r30, Y+1	; 0x01
    3cd0:	fa 81       	ldd	r31, Y+2	; 0x02
    3cd2:	82 81       	ldd	r24, Z+2	; 0x02
    3cd4:	93 81       	ldd	r25, Z+3	; 0x03
    3cd6:	8c 93       	st	X, r24

		/* Enable Timer2 compare interrupt */

		TIMSK2_REG.Bits.OCIE2_Bit = 1;
    3cd8:	e9 e5       	ldi	r30, 0x59	; 89
    3cda:	f0 e0       	ldi	r31, 0x00	; 0
    3cdc:	80 81       	ld	r24, Z
    3cde:	80 64       	ori	r24, 0x40	; 64
    3ce0:	80 83       	st	Z, r24

	}
}
    3ce2:	0f 90       	pop	r0
    3ce4:	0f 90       	pop	r0
    3ce6:	0f 90       	pop	r0
    3ce8:	0f 90       	pop	r0
    3cea:	cf 91       	pop	r28
    3cec:	df 91       	pop	r29
    3cee:	08 95       	ret

00003cf0 <Timer2_deInit>:

static void Timer2_deInit(void) {
    3cf0:	df 93       	push	r29
    3cf2:	cf 93       	push	r28
    3cf4:	cd b7       	in	r28, 0x3d	; 61
    3cf6:	de b7       	in	r29, 0x3e	; 62
	/* Reset TCCR2 register to its default value */
	TCCR2_REG.Byte = 0;
    3cf8:	e5 e4       	ldi	r30, 0x45	; 69
    3cfa:	f0 e0       	ldi	r31, 0x00	; 0
    3cfc:	10 82       	st	Z, r1

	/* Clear the Timer2 counter register */
	TCNT2_REG.Byte = 0;
    3cfe:	e4 e4       	ldi	r30, 0x44	; 68
    3d00:	f0 e0       	ldi	r31, 0x00	; 0
    3d02:	10 82       	st	Z, r1

	/* Clear the Output Compare Register */
	OCR2_REG.Byte = 0;
    3d04:	e3 e4       	ldi	r30, 0x43	; 67
    3d06:	f0 e0       	ldi	r31, 0x00	; 0
    3d08:	10 82       	st	Z, r1

	/* Disable Timer2 overflow interrupt */
	TIMSK2_REG.Bits.TOIE2_Bit = 0;
    3d0a:	e9 e5       	ldi	r30, 0x59	; 89
    3d0c:	f0 e0       	ldi	r31, 0x00	; 0
    3d0e:	80 81       	ld	r24, Z
    3d10:	8f 77       	andi	r24, 0x7F	; 127
    3d12:	80 83       	st	Z, r24

	/* Disable Timer2 compare match interrupt */
	TIMSK2_REG.Bits.OCIE2_Bit = 0;
    3d14:	e9 e5       	ldi	r30, 0x59	; 89
    3d16:	f0 e0       	ldi	r31, 0x00	; 0
    3d18:	80 81       	ld	r24, Z
    3d1a:	8f 7b       	andi	r24, 0xBF	; 191
    3d1c:	80 83       	st	Z, r24

	g_callBackPtr[2] = NULL_PTR;
    3d1e:	10 92 60 02 	sts	0x0260, r1
    3d22:	10 92 5f 02 	sts	0x025F, r1
}
    3d26:	cf 91       	pop	r28
    3d28:	df 91       	pop	r29
    3d2a:	08 95       	ret

00003d2c <Timer0_init_PWM>:
#include "Timer0_PWM.h"
#include "common_macros.h"
#include "std_types.h"
#include <avr/io.h>

void Timer0_init_PWM() {
    3d2c:	df 93       	push	r29
    3d2e:	cf 93       	push	r28
    3d30:	cd b7       	in	r28, 0x3d	; 61
    3d32:	de b7       	in	r29, 0x3e	; 62

	/* Initialize Timer0 counter to 0 */
	TCNT0 = 0;
    3d34:	e2 e5       	ldi	r30, 0x52	; 82
    3d36:	f0 e0       	ldi	r31, 0x00	; 0
    3d38:	10 82       	st	Z, r1

	/* Set PB3/OC0 as output pin -> pin where the PWM signal is generated from MC */
	DDRB |= (1 << PWM_OUTPUT_PIN);
    3d3a:	a7 e3       	ldi	r26, 0x37	; 55
    3d3c:	b0 e0       	ldi	r27, 0x00	; 0
    3d3e:	e7 e3       	ldi	r30, 0x37	; 55
    3d40:	f0 e0       	ldi	r31, 0x00	; 0
    3d42:	80 81       	ld	r24, Z
    3d44:	88 60       	ori	r24, 0x08	; 8
    3d46:	8c 93       	st	X, r24

	/* Configure Timer0 for Fast PWM mode and set prescaler to 1024 */

	/* Set WGM00, WGM01 bits for Fast PWM mode */
	TCCR0 |= (1 << WGM00) | (1 << WGM01);
    3d48:	a3 e5       	ldi	r26, 0x53	; 83
    3d4a:	b0 e0       	ldi	r27, 0x00	; 0
    3d4c:	e3 e5       	ldi	r30, 0x53	; 83
    3d4e:	f0 e0       	ldi	r31, 0x00	; 0
    3d50:	80 81       	ld	r24, Z
    3d52:	88 64       	ori	r24, 0x48	; 72
    3d54:	8c 93       	st	X, r24

	/* Clear OC0 on Compare Match (non-inverted mode) */
	TCCR0 |= (1 << COM01);
    3d56:	a3 e5       	ldi	r26, 0x53	; 83
    3d58:	b0 e0       	ldi	r27, 0x00	; 0
    3d5a:	e3 e5       	ldi	r30, 0x53	; 83
    3d5c:	f0 e0       	ldi	r31, 0x00	; 0
    3d5e:	80 81       	ld	r24, Z
    3d60:	80 62       	ori	r24, 0x20	; 32
    3d62:	8c 93       	st	X, r24

	/* Set CS00, CS02 bits for prescaler = 1024 */
	TCCR0 |= (1 << CS00) | (1 << CS02);
    3d64:	a3 e5       	ldi	r26, 0x53	; 83
    3d66:	b0 e0       	ldi	r27, 0x00	; 0
    3d68:	e3 e5       	ldi	r30, 0x53	; 83
    3d6a:	f0 e0       	ldi	r31, 0x00	; 0
    3d6c:	80 81       	ld	r24, Z
    3d6e:	85 60       	ori	r24, 0x05	; 5
    3d70:	8c 93       	st	X, r24
}
    3d72:	cf 91       	pop	r28
    3d74:	df 91       	pop	r29
    3d76:	08 95       	ret

00003d78 <PWM_Set_Duty_Cycle>:
void PWM_Set_Duty_Cycle(uint8 duty_cycle) {
    3d78:	df 93       	push	r29
    3d7a:	cf 93       	push	r28
    3d7c:	0f 92       	push	r0
    3d7e:	cd b7       	in	r28, 0x3d	; 61
    3d80:	de b7       	in	r29, 0x3e	; 62
    3d82:	89 83       	std	Y+1, r24	; 0x01

	/*Set the Output Compare Register with duty cycle*/

	/** Set the duty cycle */

	if (duty_cycle > 100) {
    3d84:	89 81       	ldd	r24, Y+1	; 0x01
    3d86:	85 36       	cpi	r24, 0x65	; 101
    3d88:	10 f0       	brcs	.+4      	; 0x3d8e <PWM_Set_Duty_Cycle+0x16>
		duty_cycle = 100; /*Cap the duty cycle to 100%*/
    3d8a:	84 e6       	ldi	r24, 0x64	; 100
    3d8c:	89 83       	std	Y+1, r24	; 0x01
	}

	OCR0 = (uint8)(((uint16) duty_cycle * 255) / 100); /*Convert percentage to OCR value (0-255)*/
    3d8e:	ec e5       	ldi	r30, 0x5C	; 92
    3d90:	f0 e0       	ldi	r31, 0x00	; 0
    3d92:	89 81       	ldd	r24, Y+1	; 0x01
    3d94:	48 2f       	mov	r20, r24
    3d96:	50 e0       	ldi	r21, 0x00	; 0
    3d98:	ca 01       	movw	r24, r20
    3d9a:	9c 01       	movw	r18, r24
    3d9c:	22 0f       	add	r18, r18
    3d9e:	33 1f       	adc	r19, r19
    3da0:	c9 01       	movw	r24, r18
    3da2:	96 95       	lsr	r25
    3da4:	98 2f       	mov	r25, r24
    3da6:	88 27       	eor	r24, r24
    3da8:	97 95       	ror	r25
    3daa:	87 95       	ror	r24
    3dac:	82 1b       	sub	r24, r18
    3dae:	93 0b       	sbc	r25, r19
    3db0:	84 0f       	add	r24, r20
    3db2:	95 1f       	adc	r25, r21
    3db4:	24 e6       	ldi	r18, 0x64	; 100
    3db6:	30 e0       	ldi	r19, 0x00	; 0
    3db8:	b9 01       	movw	r22, r18
    3dba:	0e 94 8f 21 	call	0x431e	; 0x431e <__udivmodhi4>
    3dbe:	cb 01       	movw	r24, r22
    3dc0:	80 83       	st	Z, r24
}
    3dc2:	0f 90       	pop	r0
    3dc4:	cf 91       	pop	r28
    3dc6:	df 91       	pop	r29
    3dc8:	08 95       	ret

00003dca <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    3dca:	df 93       	push	r29
    3dcc:	cf 93       	push	r28
    3dce:	00 d0       	rcall	.+0      	; 0x3dd0 <EEPROM_writeByte+0x6>
    3dd0:	00 d0       	rcall	.+0      	; 0x3dd2 <EEPROM_writeByte+0x8>
    3dd2:	cd b7       	in	r28, 0x3d	; 61
    3dd4:	de b7       	in	r29, 0x3e	; 62
    3dd6:	9a 83       	std	Y+2, r25	; 0x02
    3dd8:	89 83       	std	Y+1, r24	; 0x01
    3dda:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    3ddc:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    3de0:	0e 94 56 20 	call	0x40ac	; 0x40ac <TWI_getStatus>
    3de4:	88 30       	cpi	r24, 0x08	; 8
    3de6:	11 f0       	breq	.+4      	; 0x3dec <EEPROM_writeByte+0x22>
        return ERROR;
    3de8:	1c 82       	std	Y+4, r1	; 0x04
    3dea:	28 c0       	rjmp	.+80     	; 0x3e3c <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    3dec:	89 81       	ldd	r24, Y+1	; 0x01
    3dee:	9a 81       	ldd	r25, Y+2	; 0x02
    3df0:	80 70       	andi	r24, 0x00	; 0
    3df2:	97 70       	andi	r25, 0x07	; 7
    3df4:	88 0f       	add	r24, r24
    3df6:	89 2f       	mov	r24, r25
    3df8:	88 1f       	adc	r24, r24
    3dfa:	99 0b       	sbc	r25, r25
    3dfc:	91 95       	neg	r25
    3dfe:	80 6a       	ori	r24, 0xA0	; 160
    3e00:	0e 94 16 20 	call	0x402c	; 0x402c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    3e04:	0e 94 56 20 	call	0x40ac	; 0x40ac <TWI_getStatus>
    3e08:	88 31       	cpi	r24, 0x18	; 24
    3e0a:	11 f0       	breq	.+4      	; 0x3e10 <EEPROM_writeByte+0x46>
        return ERROR; 
    3e0c:	1c 82       	std	Y+4, r1	; 0x04
    3e0e:	16 c0       	rjmp	.+44     	; 0x3e3c <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    3e10:	89 81       	ldd	r24, Y+1	; 0x01
    3e12:	0e 94 16 20 	call	0x402c	; 0x402c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    3e16:	0e 94 56 20 	call	0x40ac	; 0x40ac <TWI_getStatus>
    3e1a:	88 32       	cpi	r24, 0x28	; 40
    3e1c:	11 f0       	breq	.+4      	; 0x3e22 <EEPROM_writeByte+0x58>
        return ERROR;
    3e1e:	1c 82       	std	Y+4, r1	; 0x04
    3e20:	0d c0       	rjmp	.+26     	; 0x3e3c <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    3e22:	8b 81       	ldd	r24, Y+3	; 0x03
    3e24:	0e 94 16 20 	call	0x402c	; 0x402c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    3e28:	0e 94 56 20 	call	0x40ac	; 0x40ac <TWI_getStatus>
    3e2c:	88 32       	cpi	r24, 0x28	; 40
    3e2e:	11 f0       	breq	.+4      	; 0x3e34 <EEPROM_writeByte+0x6a>
        return ERROR;
    3e30:	1c 82       	std	Y+4, r1	; 0x04
    3e32:	04 c0       	rjmp	.+8      	; 0x3e3c <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    3e34:	0e 94 0b 20 	call	0x4016	; 0x4016 <TWI_stop>
	
    return SUCCESS;
    3e38:	81 e0       	ldi	r24, 0x01	; 1
    3e3a:	8c 83       	std	Y+4, r24	; 0x04
    3e3c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3e3e:	0f 90       	pop	r0
    3e40:	0f 90       	pop	r0
    3e42:	0f 90       	pop	r0
    3e44:	0f 90       	pop	r0
    3e46:	cf 91       	pop	r28
    3e48:	df 91       	pop	r29
    3e4a:	08 95       	ret

00003e4c <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    3e4c:	df 93       	push	r29
    3e4e:	cf 93       	push	r28
    3e50:	00 d0       	rcall	.+0      	; 0x3e52 <EEPROM_readByte+0x6>
    3e52:	00 d0       	rcall	.+0      	; 0x3e54 <EEPROM_readByte+0x8>
    3e54:	0f 92       	push	r0
    3e56:	cd b7       	in	r28, 0x3d	; 61
    3e58:	de b7       	in	r29, 0x3e	; 62
    3e5a:	9a 83       	std	Y+2, r25	; 0x02
    3e5c:	89 83       	std	Y+1, r24	; 0x01
    3e5e:	7c 83       	std	Y+4, r23	; 0x04
    3e60:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    3e62:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    3e66:	0e 94 56 20 	call	0x40ac	; 0x40ac <TWI_getStatus>
    3e6a:	88 30       	cpi	r24, 0x08	; 8
    3e6c:	11 f0       	breq	.+4      	; 0x3e72 <EEPROM_readByte+0x26>
        return ERROR;
    3e6e:	1d 82       	std	Y+5, r1	; 0x05
    3e70:	44 c0       	rjmp	.+136    	; 0x3efa <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    3e72:	89 81       	ldd	r24, Y+1	; 0x01
    3e74:	9a 81       	ldd	r25, Y+2	; 0x02
    3e76:	80 70       	andi	r24, 0x00	; 0
    3e78:	97 70       	andi	r25, 0x07	; 7
    3e7a:	88 0f       	add	r24, r24
    3e7c:	89 2f       	mov	r24, r25
    3e7e:	88 1f       	adc	r24, r24
    3e80:	99 0b       	sbc	r25, r25
    3e82:	91 95       	neg	r25
    3e84:	80 6a       	ori	r24, 0xA0	; 160
    3e86:	0e 94 16 20 	call	0x402c	; 0x402c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    3e8a:	0e 94 56 20 	call	0x40ac	; 0x40ac <TWI_getStatus>
    3e8e:	88 31       	cpi	r24, 0x18	; 24
    3e90:	11 f0       	breq	.+4      	; 0x3e96 <EEPROM_readByte+0x4a>
        return ERROR;
    3e92:	1d 82       	std	Y+5, r1	; 0x05
    3e94:	32 c0       	rjmp	.+100    	; 0x3efa <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    3e96:	89 81       	ldd	r24, Y+1	; 0x01
    3e98:	0e 94 16 20 	call	0x402c	; 0x402c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    3e9c:	0e 94 56 20 	call	0x40ac	; 0x40ac <TWI_getStatus>
    3ea0:	88 32       	cpi	r24, 0x28	; 40
    3ea2:	11 f0       	breq	.+4      	; 0x3ea8 <EEPROM_readByte+0x5c>
        return ERROR;
    3ea4:	1d 82       	std	Y+5, r1	; 0x05
    3ea6:	29 c0       	rjmp	.+82     	; 0x3efa <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    3ea8:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    3eac:	0e 94 56 20 	call	0x40ac	; 0x40ac <TWI_getStatus>
    3eb0:	80 31       	cpi	r24, 0x10	; 16
    3eb2:	11 f0       	breq	.+4      	; 0x3eb8 <EEPROM_readByte+0x6c>
        return ERROR;
    3eb4:	1d 82       	std	Y+5, r1	; 0x05
    3eb6:	21 c0       	rjmp	.+66     	; 0x3efa <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    3eb8:	89 81       	ldd	r24, Y+1	; 0x01
    3eba:	9a 81       	ldd	r25, Y+2	; 0x02
    3ebc:	80 70       	andi	r24, 0x00	; 0
    3ebe:	97 70       	andi	r25, 0x07	; 7
    3ec0:	88 0f       	add	r24, r24
    3ec2:	89 2f       	mov	r24, r25
    3ec4:	88 1f       	adc	r24, r24
    3ec6:	99 0b       	sbc	r25, r25
    3ec8:	91 95       	neg	r25
    3eca:	81 6a       	ori	r24, 0xA1	; 161
    3ecc:	0e 94 16 20 	call	0x402c	; 0x402c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    3ed0:	0e 94 56 20 	call	0x40ac	; 0x40ac <TWI_getStatus>
    3ed4:	80 34       	cpi	r24, 0x40	; 64
    3ed6:	11 f0       	breq	.+4      	; 0x3edc <EEPROM_readByte+0x90>
        return ERROR;
    3ed8:	1d 82       	std	Y+5, r1	; 0x05
    3eda:	0f c0       	rjmp	.+30     	; 0x3efa <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    3edc:	0e 94 42 20 	call	0x4084	; 0x4084 <TWI_readByteWithNACK>
    3ee0:	eb 81       	ldd	r30, Y+3	; 0x03
    3ee2:	fc 81       	ldd	r31, Y+4	; 0x04
    3ee4:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    3ee6:	0e 94 56 20 	call	0x40ac	; 0x40ac <TWI_getStatus>
    3eea:	88 35       	cpi	r24, 0x58	; 88
    3eec:	11 f0       	breq	.+4      	; 0x3ef2 <EEPROM_readByte+0xa6>
        return ERROR;
    3eee:	1d 82       	std	Y+5, r1	; 0x05
    3ef0:	04 c0       	rjmp	.+8      	; 0x3efa <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    3ef2:	0e 94 0b 20 	call	0x4016	; 0x4016 <TWI_stop>

    return SUCCESS;
    3ef6:	81 e0       	ldi	r24, 0x01	; 1
    3ef8:	8d 83       	std	Y+5, r24	; 0x05
    3efa:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3efc:	0f 90       	pop	r0
    3efe:	0f 90       	pop	r0
    3f00:	0f 90       	pop	r0
    3f02:	0f 90       	pop	r0
    3f04:	0f 90       	pop	r0
    3f06:	cf 91       	pop	r28
    3f08:	df 91       	pop	r29
    3f0a:	08 95       	ret

00003f0c <TWI_init>:
 * 	1. Set the required address.
 * 	2. Set the required Prescaler.
 * 	3. Set the required Prescaler bit_rate.
 * 	4. Enable TWI.
 */
void TWI_init(const TWI_ConfigType *Config_Ptr) {
    3f0c:	df 93       	push	r29
    3f0e:	cf 93       	push	r28
    3f10:	00 d0       	rcall	.+0      	; 0x3f12 <TWI_init+0x6>
    3f12:	00 d0       	rcall	.+0      	; 0x3f14 <TWI_init+0x8>
    3f14:	cd b7       	in	r28, 0x3d	; 61
    3f16:	de b7       	in	r29, 0x3e	; 62
    3f18:	9a 83       	std	Y+2, r25	; 0x02
    3f1a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Bit Rate: 400.000 kbps and F_CPU=8Mhz
	 * Insert the prescaler in (TWPS0 and TWPS1) Bits in TWSR register.
	 */
	switch (Config_Ptr->Prescaler) {
    3f1c:	e9 81       	ldd	r30, Y+1	; 0x01
    3f1e:	fa 81       	ldd	r31, Y+2	; 0x02
    3f20:	81 81       	ldd	r24, Z+1	; 0x01
    3f22:	28 2f       	mov	r18, r24
    3f24:	30 e0       	ldi	r19, 0x00	; 0
    3f26:	3c 83       	std	Y+4, r19	; 0x04
    3f28:	2b 83       	std	Y+3, r18	; 0x03
    3f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f2c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f2e:	81 30       	cpi	r24, 0x01	; 1
    3f30:	91 05       	cpc	r25, r1
    3f32:	21 f1       	breq	.+72     	; 0x3f7c <TWI_init+0x70>
    3f34:	2b 81       	ldd	r18, Y+3	; 0x03
    3f36:	3c 81       	ldd	r19, Y+4	; 0x04
    3f38:	22 30       	cpi	r18, 0x02	; 2
    3f3a:	31 05       	cpc	r19, r1
    3f3c:	2c f4       	brge	.+10     	; 0x3f48 <TWI_init+0x3c>
    3f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f40:	9c 81       	ldd	r25, Y+4	; 0x04
    3f42:	00 97       	sbiw	r24, 0x00	; 0
    3f44:	61 f0       	breq	.+24     	; 0x3f5e <TWI_init+0x52>
    3f46:	43 c0       	rjmp	.+134    	; 0x3fce <TWI_init+0xc2>
    3f48:	2b 81       	ldd	r18, Y+3	; 0x03
    3f4a:	3c 81       	ldd	r19, Y+4	; 0x04
    3f4c:	22 30       	cpi	r18, 0x02	; 2
    3f4e:	31 05       	cpc	r19, r1
    3f50:	19 f1       	breq	.+70     	; 0x3f98 <TWI_init+0x8c>
    3f52:	8b 81       	ldd	r24, Y+3	; 0x03
    3f54:	9c 81       	ldd	r25, Y+4	; 0x04
    3f56:	83 30       	cpi	r24, 0x03	; 3
    3f58:	91 05       	cpc	r25, r1
    3f5a:	61 f1       	breq	.+88     	; 0x3fb4 <TWI_init+0xa8>
    3f5c:	38 c0       	rjmp	.+112    	; 0x3fce <TWI_init+0xc2>
	case TWI_PRESCALER_1:
		TWBR_REG.Byte = 0x02;
    3f5e:	e0 e2       	ldi	r30, 0x20	; 32
    3f60:	f0 e0       	ldi	r31, 0x00	; 0
    3f62:	82 e0       	ldi	r24, 0x02	; 2
    3f64:	80 83       	st	Z, r24
		TWSR_REG.Bits.TWPS0_Bit = 0;
    3f66:	e1 e2       	ldi	r30, 0x21	; 33
    3f68:	f0 e0       	ldi	r31, 0x00	; 0
    3f6a:	80 81       	ld	r24, Z
    3f6c:	8e 7f       	andi	r24, 0xFE	; 254
    3f6e:	80 83       	st	Z, r24
		TWSR_REG.Bits.TWPS1_Bit = 0;
    3f70:	e1 e2       	ldi	r30, 0x21	; 33
    3f72:	f0 e0       	ldi	r31, 0x00	; 0
    3f74:	80 81       	ld	r24, Z
    3f76:	8d 7f       	andi	r24, 0xFD	; 253
    3f78:	80 83       	st	Z, r24
    3f7a:	29 c0       	rjmp	.+82     	; 0x3fce <TWI_init+0xc2>
		break;
	case TWI_PRESCALER_4:
		TWBR_REG.Byte = 0x00;
    3f7c:	e0 e2       	ldi	r30, 0x20	; 32
    3f7e:	f0 e0       	ldi	r31, 0x00	; 0
    3f80:	10 82       	st	Z, r1
		TWSR_REG.Bits.TWPS0_Bit = 1;
    3f82:	e1 e2       	ldi	r30, 0x21	; 33
    3f84:	f0 e0       	ldi	r31, 0x00	; 0
    3f86:	80 81       	ld	r24, Z
    3f88:	81 60       	ori	r24, 0x01	; 1
    3f8a:	80 83       	st	Z, r24
		TWSR_REG.Bits.TWPS1_Bit = 0;
    3f8c:	e1 e2       	ldi	r30, 0x21	; 33
    3f8e:	f0 e0       	ldi	r31, 0x00	; 0
    3f90:	80 81       	ld	r24, Z
    3f92:	8d 7f       	andi	r24, 0xFD	; 253
    3f94:	80 83       	st	Z, r24
    3f96:	1b c0       	rjmp	.+54     	; 0x3fce <TWI_init+0xc2>
		break;
	case TWI_PRESCALER_16:
		TWBR_REG.Byte = 0x00;
    3f98:	e0 e2       	ldi	r30, 0x20	; 32
    3f9a:	f0 e0       	ldi	r31, 0x00	; 0
    3f9c:	10 82       	st	Z, r1
		TWSR_REG.Bits.TWPS0_Bit = 0;
    3f9e:	e1 e2       	ldi	r30, 0x21	; 33
    3fa0:	f0 e0       	ldi	r31, 0x00	; 0
    3fa2:	80 81       	ld	r24, Z
    3fa4:	8e 7f       	andi	r24, 0xFE	; 254
    3fa6:	80 83       	st	Z, r24
		TWSR_REG.Bits.TWPS1_Bit = 1;
    3fa8:	e1 e2       	ldi	r30, 0x21	; 33
    3faa:	f0 e0       	ldi	r31, 0x00	; 0
    3fac:	80 81       	ld	r24, Z
    3fae:	82 60       	ori	r24, 0x02	; 2
    3fb0:	80 83       	st	Z, r24
    3fb2:	0d c0       	rjmp	.+26     	; 0x3fce <TWI_init+0xc2>
		break;
	case TWI_PRESCALER_64:
		TWBR_REG.Byte = 0x00;
    3fb4:	e0 e2       	ldi	r30, 0x20	; 32
    3fb6:	f0 e0       	ldi	r31, 0x00	; 0
    3fb8:	10 82       	st	Z, r1
		TWSR_REG.Bits.TWPS0_Bit = 1;
    3fba:	e1 e2       	ldi	r30, 0x21	; 33
    3fbc:	f0 e0       	ldi	r31, 0x00	; 0
    3fbe:	80 81       	ld	r24, Z
    3fc0:	81 60       	ori	r24, 0x01	; 1
    3fc2:	80 83       	st	Z, r24
		TWSR_REG.Bits.TWPS1_Bit = 1;
    3fc4:	e1 e2       	ldi	r30, 0x21	; 33
    3fc6:	f0 e0       	ldi	r31, 0x00	; 0
    3fc8:	80 81       	ld	r24, Z
    3fca:	82 60       	ori	r24, 0x02	; 2
    3fcc:	80 83       	st	Z, r24
		break;
	}

	/* Insert the required address in TWAR salve address register */
	TWAR_REG.Byte = ((Config_Ptr->Address) << 1);
    3fce:	a2 e2       	ldi	r26, 0x22	; 34
    3fd0:	b0 e0       	ldi	r27, 0x00	; 0
    3fd2:	e9 81       	ldd	r30, Y+1	; 0x01
    3fd4:	fa 81       	ldd	r31, Y+2	; 0x02
    3fd6:	80 81       	ld	r24, Z
    3fd8:	88 0f       	add	r24, r24
    3fda:	8c 93       	st	X, r24

	/* Enable TWI */
	TWCR_REG.Bits.TWEN_Bit = 1;
    3fdc:	e6 e5       	ldi	r30, 0x56	; 86
    3fde:	f0 e0       	ldi	r31, 0x00	; 0
    3fe0:	80 81       	ld	r24, Z
    3fe2:	84 60       	ori	r24, 0x04	; 4
    3fe4:	80 83       	st	Z, r24
}
    3fe6:	0f 90       	pop	r0
    3fe8:	0f 90       	pop	r0
    3fea:	0f 90       	pop	r0
    3fec:	0f 90       	pop	r0
    3fee:	cf 91       	pop	r28
    3ff0:	df 91       	pop	r29
    3ff2:	08 95       	ret

00003ff4 <TWI_start>:

/*
 * Description : Function to send start bit to the frame.
 */
void TWI_start(void) {
    3ff4:	df 93       	push	r29
    3ff6:	cf 93       	push	r28
    3ff8:	cd b7       	in	r28, 0x3d	; 61
    3ffa:	de b7       	in	r29, 0x3e	; 62
	 * TWSTO  = 0 We don't need to generate stop condition in generate start condition mode
	 * TWSTA  = 1 generating start condition
	 * TWEA   = 0 We don't need to generate acknowledge pulse in generate start condition mode
	 * TWINT  = 1 Clear the TWINT flag before reading the data
	 ***********************************************************************/
	TWCR_REG.Byte = 0xA4;
    3ffc:	e6 e5       	ldi	r30, 0x56	; 86
    3ffe:	f0 e0       	ldi	r31, 0x00	; 0
    4000:	84 ea       	ldi	r24, 0xA4	; 164
    4002:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while (TWCR_REG.Bits.TWINT_Bit == 0);
    4004:	e6 e5       	ldi	r30, 0x56	; 86
    4006:	f0 e0       	ldi	r31, 0x00	; 0
    4008:	80 81       	ld	r24, Z
    400a:	80 78       	andi	r24, 0x80	; 128
    400c:	88 23       	and	r24, r24
    400e:	d1 f3       	breq	.-12     	; 0x4004 <TWI_start+0x10>
}
    4010:	cf 91       	pop	r28
    4012:	df 91       	pop	r29
    4014:	08 95       	ret

00004016 <TWI_stop>:

/*
 * Description : Function to send stop bit to the frame.
 */
void TWI_stop(void) {
    4016:	df 93       	push	r29
    4018:	cf 93       	push	r28
    401a:	cd b7       	in	r28, 0x3d	; 61
    401c:	de b7       	in	r29, 0x3e	; 62
	 * TWSTO  = 1 generating stop condition
	 * TWSTA  = 0 We don't need to generate start condition in generate stop condition mode
	 * TWEA   = 0 We don't need to generate acknowledge pulse in generate stop condition mode
	 * TWINT  = 1 Clear the TWINT flag before reading the data
	 ***********************************************************************/
	TWCR_REG.Byte = 0x94;
    401e:	e6 e5       	ldi	r30, 0x56	; 86
    4020:	f0 e0       	ldi	r31, 0x00	; 0
    4022:	84 e9       	ldi	r24, 0x94	; 148
    4024:	80 83       	st	Z, r24
}
    4026:	cf 91       	pop	r28
    4028:	df 91       	pop	r29
    402a:	08 95       	ret

0000402c <TWI_writeByte>:

/*
 * Description : Function to write a data on TWI data Register and send it.
 */
void TWI_writeByte(uint8 data) {
    402c:	df 93       	push	r29
    402e:	cf 93       	push	r28
    4030:	0f 92       	push	r0
    4032:	cd b7       	in	r28, 0x3d	; 61
    4034:	de b7       	in	r29, 0x3e	; 62
    4036:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR_REG.Byte = data;
    4038:	e3 e2       	ldi	r30, 0x23	; 35
    403a:	f0 e0       	ldi	r31, 0x00	; 0
    403c:	89 81       	ldd	r24, Y+1	; 0x01
    403e:	80 83       	st	Z, r24
	 * TWSTO  = 0 We don't need to generate stop condition in send data mode
	 * TWSTA  = 0 We don't need to generate start condition in send data mode
	 * TWEA   = 0 We don't need to generate acknowledge pulse in send data mode
	 * TWINT  = 1 Clear the TWINT flag before reading the data
	 ***********************************************************************/
	TWCR_REG.Byte = 0x84;
    4040:	e6 e5       	ldi	r30, 0x56	; 86
    4042:	f0 e0       	ldi	r31, 0x00	; 0
    4044:	84 e8       	ldi	r24, 0x84	; 132
    4046:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while (TWCR_REG.Bits.TWINT_Bit == 0);
    4048:	e6 e5       	ldi	r30, 0x56	; 86
    404a:	f0 e0       	ldi	r31, 0x00	; 0
    404c:	80 81       	ld	r24, Z
    404e:	80 78       	andi	r24, 0x80	; 128
    4050:	88 23       	and	r24, r24
    4052:	d1 f3       	breq	.-12     	; 0x4048 <TWI_writeByte+0x1c>
}
    4054:	0f 90       	pop	r0
    4056:	cf 91       	pop	r28
    4058:	df 91       	pop	r29
    405a:	08 95       	ret

0000405c <TWI_readByteWithACK>:

/*
 * Description : Function to read a data and send ACK after reading.
 */
uint8 TWI_readByteWithACK(void) {
    405c:	df 93       	push	r29
    405e:	cf 93       	push	r28
    4060:	cd b7       	in	r28, 0x3d	; 61
    4062:	de b7       	in	r29, 0x3e	; 62
	 * TWSTO  = 0 We don't need to generate stop condition in receive mode
	 * TWSTA  = 0 We don't need to generate start condition in receive mode
	 * TWEA   = 1 generating acknowledge pulse
	 * TWINT  = 1 Clear the TWINT flag before reading the data
	 ***********************************************************************/
	TWCR_REG.Byte = 0XC4;
    4064:	e6 e5       	ldi	r30, 0x56	; 86
    4066:	f0 e0       	ldi	r31, 0x00	; 0
    4068:	84 ec       	ldi	r24, 0xC4	; 196
    406a:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (TWCR_REG.Bits.TWINT_Bit == 0);
    406c:	e6 e5       	ldi	r30, 0x56	; 86
    406e:	f0 e0       	ldi	r31, 0x00	; 0
    4070:	80 81       	ld	r24, Z
    4072:	80 78       	andi	r24, 0x80	; 128
    4074:	88 23       	and	r24, r24
    4076:	d1 f3       	breq	.-12     	; 0x406c <TWI_readByteWithACK+0x10>
	/* Read Data */
	return (TWDR_REG.Byte);
    4078:	e3 e2       	ldi	r30, 0x23	; 35
    407a:	f0 e0       	ldi	r31, 0x00	; 0
    407c:	80 81       	ld	r24, Z
}
    407e:	cf 91       	pop	r28
    4080:	df 91       	pop	r29
    4082:	08 95       	ret

00004084 <TWI_readByteWithNACK>:

/*
 * Description : Function to read a data and send NACK after reading.
 */
uint8 TWI_readByteWithNACK(void) {
    4084:	df 93       	push	r29
    4086:	cf 93       	push	r28
    4088:	cd b7       	in	r28, 0x3d	; 61
    408a:	de b7       	in	r29, 0x3e	; 62
	 * TWSTO  = 0 We don't need to generate stop condition in receive mode
	 * TWSTA  = 0 We don't need to generate start condition in receive mode
	 * TWEA   = 0 We don't need to generate acknowledge pulse as we are in receive mode with NACK
	 * TWINT  = 1 Clear the TWINT flag before reading the data
	 ***********************************************************************/
	TWCR_REG.Byte = 0x84;
    408c:	e6 e5       	ldi	r30, 0x56	; 86
    408e:	f0 e0       	ldi	r31, 0x00	; 0
    4090:	84 e8       	ldi	r24, 0x84	; 132
    4092:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (TWCR_REG.Bits.TWINT_Bit == 0);
    4094:	e6 e5       	ldi	r30, 0x56	; 86
    4096:	f0 e0       	ldi	r31, 0x00	; 0
    4098:	80 81       	ld	r24, Z
    409a:	80 78       	andi	r24, 0x80	; 128
    409c:	88 23       	and	r24, r24
    409e:	d1 f3       	breq	.-12     	; 0x4094 <TWI_readByteWithNACK+0x10>
	/* Read Data */
	return (TWDR_REG.Byte);
    40a0:	e3 e2       	ldi	r30, 0x23	; 35
    40a2:	f0 e0       	ldi	r31, 0x00	; 0
    40a4:	80 81       	ld	r24, Z
}
    40a6:	cf 91       	pop	r28
    40a8:	df 91       	pop	r29
    40aa:	08 95       	ret

000040ac <TWI_getStatus>:

/*
 * Description : Function to get the TWSR register value(status).
 */
uint8 TWI_getStatus(void) {
    40ac:	df 93       	push	r29
    40ae:	cf 93       	push	r28
    40b0:	0f 92       	push	r0
    40b2:	cd b7       	in	r28, 0x3d	; 61
    40b4:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = (TWSR_REG.Byte) & 0xF8;
    40b6:	e1 e2       	ldi	r30, 0x21	; 33
    40b8:	f0 e0       	ldi	r31, 0x00	; 0
    40ba:	80 81       	ld	r24, Z
    40bc:	88 7f       	andi	r24, 0xF8	; 248
    40be:	89 83       	std	Y+1, r24	; 0x01
	return status;
    40c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    40c2:	0f 90       	pop	r0
    40c4:	cf 91       	pop	r28
    40c6:	df 91       	pop	r29
    40c8:	08 95       	ret

000040ca <UART_init>:
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_Ptr) {
    40ca:	df 93       	push	r29
    40cc:	cf 93       	push	r28
    40ce:	00 d0       	rcall	.+0      	; 0x40d0 <UART_init+0x6>
    40d0:	00 d0       	rcall	.+0      	; 0x40d2 <UART_init+0x8>
    40d2:	cd b7       	in	r28, 0x3d	; 61
    40d4:	de b7       	in	r29, 0x3e	; 62
    40d6:	9c 83       	std	Y+4, r25	; 0x04
    40d8:	8b 83       	std	Y+3, r24	; 0x03

	uint16 ubrr_value = 0;
    40da:	1a 82       	std	Y+2, r1	; 0x02
    40dc:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA_REG.Bits.U2X_Bit = 1;
    40de:	eb e2       	ldi	r30, 0x2B	; 43
    40e0:	f0 e0       	ldi	r31, 0x00	; 0
    40e2:	80 81       	ld	r24, Z
    40e4:	82 60       	ori	r24, 0x02	; 2
    40e6:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB_REG.Bits.TXEN_Bit = 1;
    40e8:	ea e2       	ldi	r30, 0x2A	; 42
    40ea:	f0 e0       	ldi	r31, 0x00	; 0
    40ec:	80 81       	ld	r24, Z
    40ee:	88 60       	ori	r24, 0x08	; 8
    40f0:	80 83       	st	Z, r24
	UCSRB_REG.Bits.RXEN_Bit = 1;
    40f2:	ea e2       	ldi	r30, 0x2A	; 42
    40f4:	f0 e0       	ldi	r31, 0x00	; 0
    40f6:	80 81       	ld	r24, Z
    40f8:	80 61       	ori	r24, 0x10	; 16
    40fa:	80 83       	st	Z, r24

	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC_REG.Bits.URSEL_Bit = 1;
    40fc:	e0 e4       	ldi	r30, 0x40	; 64
    40fe:	f0 e0       	ldi	r31, 0x00	; 0
    4100:	80 81       	ld	r24, Z
    4102:	80 68       	ori	r24, 0x80	; 128
    4104:	80 83       	st	Z, r24
	UCSRC_REG.Bits.UCPOL_Bit = 0;
    4106:	e0 e4       	ldi	r30, 0x40	; 64
    4108:	f0 e0       	ldi	r31, 0x00	; 0
    410a:	80 81       	ld	r24, Z
    410c:	8e 7f       	andi	r24, 0xFE	; 254
    410e:	80 83       	st	Z, r24

	/*
	 * insert the required mode in UMSEL bit of UCSRC Register
	 */
	UCSRC_REG.Bits.UMSEL_Bit = Config_Ptr->Mode;
    4110:	a0 e4       	ldi	r26, 0x40	; 64
    4112:	b0 e0       	ldi	r27, 0x00	; 0
    4114:	eb 81       	ldd	r30, Y+3	; 0x03
    4116:	fc 81       	ldd	r31, Y+4	; 0x04
    4118:	80 81       	ld	r24, Z
    411a:	81 70       	andi	r24, 0x01	; 1
    411c:	81 70       	andi	r24, 0x01	; 1
    411e:	98 2f       	mov	r25, r24
    4120:	92 95       	swap	r25
    4122:	99 0f       	add	r25, r25
    4124:	99 0f       	add	r25, r25
    4126:	90 7c       	andi	r25, 0xC0	; 192
    4128:	8c 91       	ld	r24, X
    412a:	8f 7b       	andi	r24, 0xBF	; 191
    412c:	89 2b       	or	r24, r25
    412e:	8c 93       	st	X, r24

	/*
	 * insert the required parity mode in UPM1 bit (UPM0 and UPM1) of UCSRC Register
	 */
	UCSRC_REG.Byte = (UCSRC_REG.Byte & 0xCF) | ((Config_Ptr->Parity) << 4);
    4130:	a0 e4       	ldi	r26, 0x40	; 64
    4132:	b0 e0       	ldi	r27, 0x00	; 0
    4134:	e0 e4       	ldi	r30, 0x40	; 64
    4136:	f0 e0       	ldi	r31, 0x00	; 0
    4138:	80 81       	ld	r24, Z
    413a:	28 2f       	mov	r18, r24
    413c:	2f 7c       	andi	r18, 0xCF	; 207
    413e:	eb 81       	ldd	r30, Y+3	; 0x03
    4140:	fc 81       	ldd	r31, Y+4	; 0x04
    4142:	82 81       	ldd	r24, Z+2	; 0x02
    4144:	88 2f       	mov	r24, r24
    4146:	90 e0       	ldi	r25, 0x00	; 0
    4148:	82 95       	swap	r24
    414a:	92 95       	swap	r25
    414c:	90 7f       	andi	r25, 0xF0	; 240
    414e:	98 27       	eor	r25, r24
    4150:	80 7f       	andi	r24, 0xF0	; 240
    4152:	98 27       	eor	r25, r24
    4154:	82 2b       	or	r24, r18
    4156:	8c 93       	st	X, r24

	/*
	 * insert the required stop bit in USBS bit of UCSRC Register
	 */
	UCSRC_REG.Bits.USBS_Bit = Config_Ptr->Stop_Bit;
    4158:	a0 e4       	ldi	r26, 0x40	; 64
    415a:	b0 e0       	ldi	r27, 0x00	; 0
    415c:	eb 81       	ldd	r30, Y+3	; 0x03
    415e:	fc 81       	ldd	r31, Y+4	; 0x04
    4160:	83 81       	ldd	r24, Z+3	; 0x03
    4162:	81 70       	andi	r24, 0x01	; 1
    4164:	81 70       	andi	r24, 0x01	; 1
    4166:	98 2f       	mov	r25, r24
    4168:	99 0f       	add	r25, r25
    416a:	99 0f       	add	r25, r25
    416c:	99 0f       	add	r25, r25
    416e:	8c 91       	ld	r24, X
    4170:	87 7f       	andi	r24, 0xF7	; 247
    4172:	89 2b       	or	r24, r25
    4174:	8c 93       	st	X, r24

	/*
	 * insert the required character size in UCSZ bits(UCSZ0, UCSZ1 and UCSZ2) of UCSRC and UCSRB Register
	 */
	UCSRC_REG.Byte = (UCSRC_REG.Byte & 0xF9)
    4176:	a0 e4       	ldi	r26, 0x40	; 64
    4178:	b0 e0       	ldi	r27, 0x00	; 0
    417a:	e0 e4       	ldi	r30, 0x40	; 64
    417c:	f0 e0       	ldi	r31, 0x00	; 0
    417e:	80 81       	ld	r24, Z
    4180:	28 2f       	mov	r18, r24
    4182:	29 7f       	andi	r18, 0xF9	; 249
    4184:	eb 81       	ldd	r30, Y+3	; 0x03
    4186:	fc 81       	ldd	r31, Y+4	; 0x04
    4188:	81 81       	ldd	r24, Z+1	; 0x01
    418a:	88 2f       	mov	r24, r24
    418c:	90 e0       	ldi	r25, 0x00	; 0
    418e:	88 0f       	add	r24, r24
    4190:	99 1f       	adc	r25, r25
    4192:	86 70       	andi	r24, 0x06	; 6
    4194:	82 2b       	or	r24, r18
    4196:	8c 93       	st	X, r24
			| (((Config_Ptr->Bit_Size) << 1) & 0x06);

	/* Calculate the UBRR register value */
	ubrr_value = (uint16) (((F_CPU / ((Config_Ptr->Baud_Rate) * 8UL))) - 1);
    4198:	eb 81       	ldd	r30, Y+3	; 0x03
    419a:	fc 81       	ldd	r31, Y+4	; 0x04
    419c:	84 81       	ldd	r24, Z+4	; 0x04
    419e:	95 81       	ldd	r25, Z+5	; 0x05
    41a0:	a6 81       	ldd	r26, Z+6	; 0x06
    41a2:	b7 81       	ldd	r27, Z+7	; 0x07
    41a4:	88 0f       	add	r24, r24
    41a6:	99 1f       	adc	r25, r25
    41a8:	aa 1f       	adc	r26, r26
    41aa:	bb 1f       	adc	r27, r27
    41ac:	88 0f       	add	r24, r24
    41ae:	99 1f       	adc	r25, r25
    41b0:	aa 1f       	adc	r26, r26
    41b2:	bb 1f       	adc	r27, r27
    41b4:	88 0f       	add	r24, r24
    41b6:	99 1f       	adc	r25, r25
    41b8:	aa 1f       	adc	r26, r26
    41ba:	bb 1f       	adc	r27, r27
    41bc:	9c 01       	movw	r18, r24
    41be:	ad 01       	movw	r20, r26
    41c0:	80 e0       	ldi	r24, 0x00	; 0
    41c2:	92 e1       	ldi	r25, 0x12	; 18
    41c4:	aa e7       	ldi	r26, 0x7A	; 122
    41c6:	b0 e0       	ldi	r27, 0x00	; 0
    41c8:	bc 01       	movw	r22, r24
    41ca:	cd 01       	movw	r24, r26
    41cc:	0e 94 a3 21 	call	0x4346	; 0x4346 <__udivmodsi4>
    41d0:	da 01       	movw	r26, r20
    41d2:	c9 01       	movw	r24, r18
    41d4:	01 97       	sbiw	r24, 0x01	; 1
    41d6:	9a 83       	std	Y+2, r25	; 0x02
    41d8:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH_REG = ubrr_value >> 8;
    41da:	e0 e4       	ldi	r30, 0x40	; 64
    41dc:	f0 e0       	ldi	r31, 0x00	; 0
    41de:	89 81       	ldd	r24, Y+1	; 0x01
    41e0:	9a 81       	ldd	r25, Y+2	; 0x02
    41e2:	89 2f       	mov	r24, r25
    41e4:	99 27       	eor	r25, r25
    41e6:	80 83       	st	Z, r24
	UBRRL_REG = ubrr_value;
    41e8:	e9 e2       	ldi	r30, 0x29	; 41
    41ea:	f0 e0       	ldi	r31, 0x00	; 0
    41ec:	89 81       	ldd	r24, Y+1	; 0x01
    41ee:	80 83       	st	Z, r24
}
    41f0:	0f 90       	pop	r0
    41f2:	0f 90       	pop	r0
    41f4:	0f 90       	pop	r0
    41f6:	0f 90       	pop	r0
    41f8:	cf 91       	pop	r28
    41fa:	df 91       	pop	r29
    41fc:	08 95       	ret

000041fe <UART_sendByte>:

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data) {
    41fe:	df 93       	push	r29
    4200:	cf 93       	push	r28
    4202:	0f 92       	push	r0
    4204:	cd b7       	in	r28, 0x3d	; 61
    4206:	de b7       	in	r29, 0x3e	; 62
    4208:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (UCSRA_REG.Bits.UDRE_Bit == 0) {
    420a:	eb e2       	ldi	r30, 0x2B	; 43
    420c:	f0 e0       	ldi	r31, 0x00	; 0
    420e:	80 81       	ld	r24, Z
    4210:	80 72       	andi	r24, 0x20	; 32
    4212:	88 23       	and	r24, r24
    4214:	d1 f3       	breq	.-12     	; 0x420a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clears the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR_REG = data;
    4216:	ec e2       	ldi	r30, 0x2C	; 44
    4218:	f0 e0       	ldi	r31, 0x00	; 0
    421a:	89 81       	ldd	r24, Y+1	; 0x01
    421c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	 UDR_REG = data;
	 while(BIT_IS_CLEAR(UCSRA_REG.Bits.TXC_Bit, 0)){} // Wait until the transmission is complete TXC = 1
	 SET_BIT(UCSRA_REG.Bits.TXC_Bit, 0); // Clear the TXC flag
	 *******************************************************************/
}
    421e:	0f 90       	pop	r0
    4220:	cf 91       	pop	r28
    4222:	df 91       	pop	r29
    4224:	08 95       	ret

00004226 <UART_recieveByte>:

/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void) {
    4226:	df 93       	push	r29
    4228:	cf 93       	push	r28
    422a:	cd b7       	in	r28, 0x3d	; 61
    422c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (UCSRA_REG.Bits.RXC_Bit == 0) {
    422e:	eb e2       	ldi	r30, 0x2B	; 43
    4230:	f0 e0       	ldi	r31, 0x00	; 0
    4232:	80 81       	ld	r24, Z
    4234:	80 78       	andi	r24, 0x80	; 128
    4236:	88 23       	and	r24, r24
    4238:	d1 f3       	breq	.-12     	; 0x422e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR_REG;
    423a:	ec e2       	ldi	r30, 0x2C	; 44
    423c:	f0 e0       	ldi	r31, 0x00	; 0
    423e:	80 81       	ld	r24, Z
}
    4240:	cf 91       	pop	r28
    4242:	df 91       	pop	r29
    4244:	08 95       	ret

00004246 <UART_sendString>:

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str) {
    4246:	df 93       	push	r29
    4248:	cf 93       	push	r28
    424a:	00 d0       	rcall	.+0      	; 0x424c <UART_sendString+0x6>
    424c:	0f 92       	push	r0
    424e:	cd b7       	in	r28, 0x3d	; 61
    4250:	de b7       	in	r29, 0x3e	; 62
    4252:	9b 83       	std	Y+3, r25	; 0x03
    4254:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    4256:	19 82       	std	Y+1, r1	; 0x01
    4258:	0e c0       	rjmp	.+28     	; 0x4276 <UART_sendString+0x30>

	/* Send the whole string */
	while (Str[i] != '\0') {
		UART_sendByte(Str[i]);
    425a:	89 81       	ldd	r24, Y+1	; 0x01
    425c:	28 2f       	mov	r18, r24
    425e:	30 e0       	ldi	r19, 0x00	; 0
    4260:	8a 81       	ldd	r24, Y+2	; 0x02
    4262:	9b 81       	ldd	r25, Y+3	; 0x03
    4264:	fc 01       	movw	r30, r24
    4266:	e2 0f       	add	r30, r18
    4268:	f3 1f       	adc	r31, r19
    426a:	80 81       	ld	r24, Z
    426c:	0e 94 ff 20 	call	0x41fe	; 0x41fe <UART_sendByte>
		i++;
    4270:	89 81       	ldd	r24, Y+1	; 0x01
    4272:	8f 5f       	subi	r24, 0xFF	; 255
    4274:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const uint8 *Str) {
	uint8 i = 0;

	/* Send the whole string */
	while (Str[i] != '\0') {
    4276:	89 81       	ldd	r24, Y+1	; 0x01
    4278:	28 2f       	mov	r18, r24
    427a:	30 e0       	ldi	r19, 0x00	; 0
    427c:	8a 81       	ldd	r24, Y+2	; 0x02
    427e:	9b 81       	ldd	r25, Y+3	; 0x03
    4280:	fc 01       	movw	r30, r24
    4282:	e2 0f       	add	r30, r18
    4284:	f3 1f       	adc	r31, r19
    4286:	80 81       	ld	r24, Z
    4288:	88 23       	and	r24, r24
    428a:	39 f7       	brne	.-50     	; 0x425a <UART_sendString+0x14>
	 {
	 UART_sendByte(*Str);
	 Str++;
	 }
	 *******************************************************************/
}
    428c:	0f 90       	pop	r0
    428e:	0f 90       	pop	r0
    4290:	0f 90       	pop	r0
    4292:	cf 91       	pop	r28
    4294:	df 91       	pop	r29
    4296:	08 95       	ret

00004298 <UART_receiveString>:

/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str) {
    4298:	0f 93       	push	r16
    429a:	1f 93       	push	r17
    429c:	df 93       	push	r29
    429e:	cf 93       	push	r28
    42a0:	00 d0       	rcall	.+0      	; 0x42a2 <UART_receiveString+0xa>
    42a2:	0f 92       	push	r0
    42a4:	cd b7       	in	r28, 0x3d	; 61
    42a6:	de b7       	in	r29, 0x3e	; 62
    42a8:	9b 83       	std	Y+3, r25	; 0x03
    42aa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    42ac:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    42ae:	89 81       	ldd	r24, Y+1	; 0x01
    42b0:	28 2f       	mov	r18, r24
    42b2:	30 e0       	ldi	r19, 0x00	; 0
    42b4:	8a 81       	ldd	r24, Y+2	; 0x02
    42b6:	9b 81       	ldd	r25, Y+3	; 0x03
    42b8:	8c 01       	movw	r16, r24
    42ba:	02 0f       	add	r16, r18
    42bc:	13 1f       	adc	r17, r19
    42be:	0e 94 13 21 	call	0x4226	; 0x4226 <UART_recieveByte>
    42c2:	f8 01       	movw	r30, r16
    42c4:	80 83       	st	Z, r24
    42c6:	0f c0       	rjmp	.+30     	; 0x42e6 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while (Str[i] != '#') {
		i++;
    42c8:	89 81       	ldd	r24, Y+1	; 0x01
    42ca:	8f 5f       	subi	r24, 0xFF	; 255
    42cc:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    42ce:	89 81       	ldd	r24, Y+1	; 0x01
    42d0:	28 2f       	mov	r18, r24
    42d2:	30 e0       	ldi	r19, 0x00	; 0
    42d4:	8a 81       	ldd	r24, Y+2	; 0x02
    42d6:	9b 81       	ldd	r25, Y+3	; 0x03
    42d8:	8c 01       	movw	r16, r24
    42da:	02 0f       	add	r16, r18
    42dc:	13 1f       	adc	r17, r19
    42de:	0e 94 13 21 	call	0x4226	; 0x4226 <UART_recieveByte>
    42e2:	f8 01       	movw	r30, r16
    42e4:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while (Str[i] != '#') {
    42e6:	89 81       	ldd	r24, Y+1	; 0x01
    42e8:	28 2f       	mov	r18, r24
    42ea:	30 e0       	ldi	r19, 0x00	; 0
    42ec:	8a 81       	ldd	r24, Y+2	; 0x02
    42ee:	9b 81       	ldd	r25, Y+3	; 0x03
    42f0:	fc 01       	movw	r30, r24
    42f2:	e2 0f       	add	r30, r18
    42f4:	f3 1f       	adc	r31, r19
    42f6:	80 81       	ld	r24, Z
    42f8:	83 32       	cpi	r24, 0x23	; 35
    42fa:	31 f7       	brne	.-52     	; 0x42c8 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    42fc:	89 81       	ldd	r24, Y+1	; 0x01
    42fe:	28 2f       	mov	r18, r24
    4300:	30 e0       	ldi	r19, 0x00	; 0
    4302:	8a 81       	ldd	r24, Y+2	; 0x02
    4304:	9b 81       	ldd	r25, Y+3	; 0x03
    4306:	fc 01       	movw	r30, r24
    4308:	e2 0f       	add	r30, r18
    430a:	f3 1f       	adc	r31, r19
    430c:	10 82       	st	Z, r1
}
    430e:	0f 90       	pop	r0
    4310:	0f 90       	pop	r0
    4312:	0f 90       	pop	r0
    4314:	cf 91       	pop	r28
    4316:	df 91       	pop	r29
    4318:	1f 91       	pop	r17
    431a:	0f 91       	pop	r16
    431c:	08 95       	ret

0000431e <__udivmodhi4>:
    431e:	aa 1b       	sub	r26, r26
    4320:	bb 1b       	sub	r27, r27
    4322:	51 e1       	ldi	r21, 0x11	; 17
    4324:	07 c0       	rjmp	.+14     	; 0x4334 <__udivmodhi4_ep>

00004326 <__udivmodhi4_loop>:
    4326:	aa 1f       	adc	r26, r26
    4328:	bb 1f       	adc	r27, r27
    432a:	a6 17       	cp	r26, r22
    432c:	b7 07       	cpc	r27, r23
    432e:	10 f0       	brcs	.+4      	; 0x4334 <__udivmodhi4_ep>
    4330:	a6 1b       	sub	r26, r22
    4332:	b7 0b       	sbc	r27, r23

00004334 <__udivmodhi4_ep>:
    4334:	88 1f       	adc	r24, r24
    4336:	99 1f       	adc	r25, r25
    4338:	5a 95       	dec	r21
    433a:	a9 f7       	brne	.-22     	; 0x4326 <__udivmodhi4_loop>
    433c:	80 95       	com	r24
    433e:	90 95       	com	r25
    4340:	bc 01       	movw	r22, r24
    4342:	cd 01       	movw	r24, r26
    4344:	08 95       	ret

00004346 <__udivmodsi4>:
    4346:	a1 e2       	ldi	r26, 0x21	; 33
    4348:	1a 2e       	mov	r1, r26
    434a:	aa 1b       	sub	r26, r26
    434c:	bb 1b       	sub	r27, r27
    434e:	fd 01       	movw	r30, r26
    4350:	0d c0       	rjmp	.+26     	; 0x436c <__udivmodsi4_ep>

00004352 <__udivmodsi4_loop>:
    4352:	aa 1f       	adc	r26, r26
    4354:	bb 1f       	adc	r27, r27
    4356:	ee 1f       	adc	r30, r30
    4358:	ff 1f       	adc	r31, r31
    435a:	a2 17       	cp	r26, r18
    435c:	b3 07       	cpc	r27, r19
    435e:	e4 07       	cpc	r30, r20
    4360:	f5 07       	cpc	r31, r21
    4362:	20 f0       	brcs	.+8      	; 0x436c <__udivmodsi4_ep>
    4364:	a2 1b       	sub	r26, r18
    4366:	b3 0b       	sbc	r27, r19
    4368:	e4 0b       	sbc	r30, r20
    436a:	f5 0b       	sbc	r31, r21

0000436c <__udivmodsi4_ep>:
    436c:	66 1f       	adc	r22, r22
    436e:	77 1f       	adc	r23, r23
    4370:	88 1f       	adc	r24, r24
    4372:	99 1f       	adc	r25, r25
    4374:	1a 94       	dec	r1
    4376:	69 f7       	brne	.-38     	; 0x4352 <__udivmodsi4_loop>
    4378:	60 95       	com	r22
    437a:	70 95       	com	r23
    437c:	80 95       	com	r24
    437e:	90 95       	com	r25
    4380:	9b 01       	movw	r18, r22
    4382:	ac 01       	movw	r20, r24
    4384:	bd 01       	movw	r22, r26
    4386:	cf 01       	movw	r24, r30
    4388:	08 95       	ret

0000438a <__prologue_saves__>:
    438a:	2f 92       	push	r2
    438c:	3f 92       	push	r3
    438e:	4f 92       	push	r4
    4390:	5f 92       	push	r5
    4392:	6f 92       	push	r6
    4394:	7f 92       	push	r7
    4396:	8f 92       	push	r8
    4398:	9f 92       	push	r9
    439a:	af 92       	push	r10
    439c:	bf 92       	push	r11
    439e:	cf 92       	push	r12
    43a0:	df 92       	push	r13
    43a2:	ef 92       	push	r14
    43a4:	ff 92       	push	r15
    43a6:	0f 93       	push	r16
    43a8:	1f 93       	push	r17
    43aa:	cf 93       	push	r28
    43ac:	df 93       	push	r29
    43ae:	cd b7       	in	r28, 0x3d	; 61
    43b0:	de b7       	in	r29, 0x3e	; 62
    43b2:	ca 1b       	sub	r28, r26
    43b4:	db 0b       	sbc	r29, r27
    43b6:	0f b6       	in	r0, 0x3f	; 63
    43b8:	f8 94       	cli
    43ba:	de bf       	out	0x3e, r29	; 62
    43bc:	0f be       	out	0x3f, r0	; 63
    43be:	cd bf       	out	0x3d, r28	; 61
    43c0:	09 94       	ijmp

000043c2 <__epilogue_restores__>:
    43c2:	2a 88       	ldd	r2, Y+18	; 0x12
    43c4:	39 88       	ldd	r3, Y+17	; 0x11
    43c6:	48 88       	ldd	r4, Y+16	; 0x10
    43c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    43ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    43cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    43ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    43d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    43d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    43d4:	b9 84       	ldd	r11, Y+9	; 0x09
    43d6:	c8 84       	ldd	r12, Y+8	; 0x08
    43d8:	df 80       	ldd	r13, Y+7	; 0x07
    43da:	ee 80       	ldd	r14, Y+6	; 0x06
    43dc:	fd 80       	ldd	r15, Y+5	; 0x05
    43de:	0c 81       	ldd	r16, Y+4	; 0x04
    43e0:	1b 81       	ldd	r17, Y+3	; 0x03
    43e2:	aa 81       	ldd	r26, Y+2	; 0x02
    43e4:	b9 81       	ldd	r27, Y+1	; 0x01
    43e6:	ce 0f       	add	r28, r30
    43e8:	d1 1d       	adc	r29, r1
    43ea:	0f b6       	in	r0, 0x3f	; 63
    43ec:	f8 94       	cli
    43ee:	de bf       	out	0x3e, r29	; 62
    43f0:	0f be       	out	0x3f, r0	; 63
    43f2:	cd bf       	out	0x3d, r28	; 61
    43f4:	ed 01       	movw	r28, r26
    43f6:	08 95       	ret

000043f8 <itoa>:
    43f8:	fb 01       	movw	r30, r22
    43fa:	9f 01       	movw	r18, r30
    43fc:	e8 94       	clt
    43fe:	42 30       	cpi	r20, 0x02	; 2
    4400:	c4 f0       	brlt	.+48     	; 0x4432 <itoa+0x3a>
    4402:	45 32       	cpi	r20, 0x25	; 37
    4404:	b4 f4       	brge	.+44     	; 0x4432 <itoa+0x3a>
    4406:	4a 30       	cpi	r20, 0x0A	; 10
    4408:	29 f4       	brne	.+10     	; 0x4414 <itoa+0x1c>
    440a:	97 fb       	bst	r25, 7
    440c:	1e f4       	brtc	.+6      	; 0x4414 <itoa+0x1c>
    440e:	90 95       	com	r25
    4410:	81 95       	neg	r24
    4412:	9f 4f       	sbci	r25, 0xFF	; 255
    4414:	64 2f       	mov	r22, r20
    4416:	77 27       	eor	r23, r23
    4418:	0e 94 8f 21 	call	0x431e	; 0x431e <__udivmodhi4>
    441c:	80 5d       	subi	r24, 0xD0	; 208
    441e:	8a 33       	cpi	r24, 0x3A	; 58
    4420:	0c f0       	brlt	.+2      	; 0x4424 <itoa+0x2c>
    4422:	89 5d       	subi	r24, 0xD9	; 217
    4424:	81 93       	st	Z+, r24
    4426:	cb 01       	movw	r24, r22
    4428:	00 97       	sbiw	r24, 0x00	; 0
    442a:	a1 f7       	brne	.-24     	; 0x4414 <itoa+0x1c>
    442c:	16 f4       	brtc	.+4      	; 0x4432 <itoa+0x3a>
    442e:	5d e2       	ldi	r21, 0x2D	; 45
    4430:	51 93       	st	Z+, r21
    4432:	10 82       	st	Z, r1
    4434:	c9 01       	movw	r24, r18
    4436:	0c 94 1d 22 	jmp	0x443a	; 0x443a <strrev>

0000443a <strrev>:
    443a:	dc 01       	movw	r26, r24
    443c:	fc 01       	movw	r30, r24
    443e:	67 2f       	mov	r22, r23
    4440:	71 91       	ld	r23, Z+
    4442:	77 23       	and	r23, r23
    4444:	e1 f7       	brne	.-8      	; 0x443e <strrev+0x4>
    4446:	32 97       	sbiw	r30, 0x02	; 2
    4448:	04 c0       	rjmp	.+8      	; 0x4452 <strrev+0x18>
    444a:	7c 91       	ld	r23, X
    444c:	6d 93       	st	X+, r22
    444e:	70 83       	st	Z, r23
    4450:	62 91       	ld	r22, -Z
    4452:	ae 17       	cp	r26, r30
    4454:	bf 07       	cpc	r27, r31
    4456:	c8 f3       	brcs	.-14     	; 0x444a <strrev+0x10>
    4458:	08 95       	ret

0000445a <_exit>:
    445a:	f8 94       	cli

0000445c <__stop_program>:
    445c:	ff cf       	rjmp	.-2      	; 0x445c <__stop_program>
