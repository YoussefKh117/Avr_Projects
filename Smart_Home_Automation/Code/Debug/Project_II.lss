
Project_II.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002682  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000144  00800060  00002682  000026f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000026c4  00000000  00000000  0000283c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000fe5  00000000  00000000  00004f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00005ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00006277  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  00008682  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  00009a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000abe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000ada0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000b096  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ba04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 c4 11 	call	0x2388	; 0x2388 <main>
      7a:	0c 94 3f 13 	jmp	0x267e	; 0x267e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 d7 12 	jmp	0x25ae	; 0x25ae <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ab e9       	ldi	r26, 0x9B	; 155
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 f3 12 	jmp	0x25e6	; 0x25e6 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 d7 12 	jmp	0x25ae	; 0x25ae <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8b e9       	ldi	r24, 0x9B	; 155
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 f3 12 	jmp	0x25e6	; 0x25e6 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 df 12 	jmp	0x25be	; 0x25be <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6b e9       	ldi	r22, 0x9B	; 155
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 fb 12 	jmp	0x25f6	; 0x25f6 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 03 13 	jmp	0x2606	; 0x2606 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 df 12 	jmp	0x25be	; 0x25be <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 fb 12 	jmp	0x25f6	; 0x25f6 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	ed 55       	subi	r30, 0x5D	; 93
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <ADC_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(void) {
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 01 to choose AVCC = 5v as reference voltage
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = (1 << REFS0) | (1 << REFS1);
     e26:	e7 e2       	ldi	r30, 0x27	; 39
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 ec       	ldi	r24, 0xC0	; 192
     e2c:	80 83       	st	Z, r24
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 = 111 to choose ADC_Clock = F_CPU/128 = 16Mhz/128 = 125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     e2e:	e6 e2       	ldi	r30, 0x26	; 38
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	87 e8       	ldi	r24, 0x87	; 135
     e34:	80 83       	st	Z, r24
}
     e36:	cf 91       	pop	r28
     e38:	df 91       	pop	r29
     e3a:	08 95       	ret

00000e3c <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num) {
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	0f 92       	push	r0
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	87 70       	andi	r24, 0x07	; 7
     e4c:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     e4e:	a7 e2       	ldi	r26, 0x27	; 39
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e7 e2       	ldi	r30, 0x27	; 39
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	80 7e       	andi	r24, 0xE0	; 224
     e5a:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
     e5c:	a7 e2       	ldi	r26, 0x27	; 39
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e7 e2       	ldi	r30, 0x27	; 39
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	90 81       	ld	r25, Z
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	89 2b       	or	r24, r25
     e6a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADSC); /* Start conversion write '1' to ADSC */
     e6c:	a6 e2       	ldi	r26, 0x26	; 38
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e6 e2       	ldi	r30, 0x26	; 38
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	80 64       	ori	r24, 0x40	; 64
     e78:	8c 93       	st	X, r24
	while (BIT_IS_CLEAR(ADCSRA, ADIF))
     e7a:	e6 e2       	ldi	r30, 0x26	; 38
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	88 2f       	mov	r24, r24
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	80 71       	andi	r24, 0x10	; 16
     e86:	90 70       	andi	r25, 0x00	; 0
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	b9 f3       	breq	.-18     	; 0xe7a <ADC_readChannel+0x3e>
		; /* Wait for conversion to complete, ADIF becomes '1' */
	SET_BIT(ADCSRA, ADIF); /* Clear ADIF by write '1' to it :) */
     e8c:	a6 e2       	ldi	r26, 0x26	; 38
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e6 e2       	ldi	r30, 0x26	; 38
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	80 61       	ori	r24, 0x10	; 16
     e98:	8c 93       	st	X, r24
	return ADC; /* Read the digital value from the data register */
     e9a:	e4 e2       	ldi	r30, 0x24	; 36
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	91 81       	ldd	r25, Z+1	; 0x01
}
     ea2:	0f 90       	pop	r0
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <Buzzer_init>:

/*
 * Function: Buzzer_init
 * Description: Initializes the buzzer pin direction and turns off the buzzer.
 */
void Buzzer_init(void) {
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
    // Set the buzzer pin direction to output
    GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
     eb2:	83 e0       	ldi	r24, 0x03	; 3
     eb4:	63 e0       	ldi	r22, 0x03	; 3
     eb6:	41 e0       	ldi	r20, 0x01	; 1
     eb8:	0e 94 f7 07 	call	0xfee	; 0xfee <GPIO_setupPinDirection>

    // Turn off the buzzer initially
    GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
     ebc:	83 e0       	ldi	r24, 0x03	; 3
     ebe:	63 e0       	ldi	r22, 0x03	; 3
     ec0:	40 e0       	ldi	r20, 0x00	; 0
     ec2:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
}
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	08 95       	ret

00000ecc <Buzzer_on>:
/*
 * Function: Buzzer_on
 * Description: Activates the buzzer.
 */

void Buzzer_on(void) {
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
    // Set the buzzer pin to high to activate the buzzer
    GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
     ed4:	83 e0       	ldi	r24, 0x03	; 3
     ed6:	63 e0       	ldi	r22, 0x03	; 3
     ed8:	41 e0       	ldi	r20, 0x01	; 1
     eda:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
}
     ede:	cf 91       	pop	r28
     ee0:	df 91       	pop	r29
     ee2:	08 95       	ret

00000ee4 <Buzzer_off>:
/*
 * Function: Buzzer_off
 * Description: Deactivates the buzzer.
 */

void Buzzer_off(void) {
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
    // Set the buzzer pin to low to deactivate the buzzer
    GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
     eec:	83 e0       	ldi	r24, 0x03	; 3
     eee:	63 e0       	ldi	r22, 0x03	; 3
     ef0:	40 e0       	ldi	r20, 0x00	; 0
     ef2:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
}
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <DC_Motor_Init>:

#include "DC_Motor.h"
#include "common_macros.h"
#include "Timer0_PWM.h"
#include "GPIO.h"
void DC_Motor_Init() {
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
	/* Set first two pins as output */
	GPIO_setupPinDirection(DC_MOTOR_PORT, IN1, PIN_OUTPUT);
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	41 e0       	ldi	r20, 0x01	; 1
     f0a:	0e 94 f7 07 	call	0xfee	; 0xfee <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT, IN2, PIN_OUTPUT);
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	61 e0       	ldi	r22, 0x01	; 1
     f12:	41 e0       	ldi	r20, 0x01	; 1
     f14:	0e 94 f7 07 	call	0xfee	; 0xfee <GPIO_setupPinDirection>

	/* Set IN1,IN2 to low (motor off) at beggining */
	GPIO_writePin(DC_MOTOR_PORT, IN1, LOGIC_LOW);
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	40 e0       	ldi	r20, 0x00	; 0
     f1e:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT, IN2, LOGIC_LOW);
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	61 e0       	ldi	r22, 0x01	; 1
     f26:	40 e0       	ldi	r20, 0x00	; 0
     f28:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
}
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <DC_Motor_Rotate>:
void DC_Motor_Rotate(DcMotor_State state, uint8 speed) {
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	00 d0       	rcall	.+0      	; 0xf38 <DC_Motor_Rotate+0x6>
     f38:	00 d0       	rcall	.+0      	; 0xf3a <DC_Motor_Rotate+0x8>
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
     f3e:	89 83       	std	Y+1, r24	; 0x01
     f40:	6a 83       	std	Y+2, r22	; 0x02

	/** Ensure speed is between 0 and 100 */
	if (speed > 100) {
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	85 36       	cpi	r24, 0x65	; 101
     f46:	10 f0       	brcs	.+4      	; 0xf4c <DC_Motor_Rotate+0x1a>
		speed = 100; /** Cap the speed to 100% */
     f48:	84 e6       	ldi	r24, 0x64	; 100
     f4a:	8a 83       	std	Y+2, r24	; 0x02
	}

	/*Set speed for the motor*/
	PWM_Set_Duty_Cycle(speed);
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	0e 94 9b 11 	call	0x2336	; 0x2336 <PWM_Set_Duty_Cycle>

	/** Set motor control pins based on the desired rotation direction */
	switch (state) {
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	3c 83       	std	Y+4, r19	; 0x04
     f5a:	2b 83       	std	Y+3, r18	; 0x03
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	9c 81       	ldd	r25, Y+4	; 0x04
     f60:	81 30       	cpi	r24, 0x01	; 1
     f62:	91 05       	cpc	r25, r1
     f64:	31 f0       	breq	.+12     	; 0xf72 <DC_Motor_Rotate+0x40>
     f66:	2b 81       	ldd	r18, Y+3	; 0x03
     f68:	3c 81       	ldd	r19, Y+4	; 0x04
     f6a:	22 30       	cpi	r18, 0x02	; 2
     f6c:	31 05       	cpc	r19, r1
     f6e:	61 f0       	breq	.+24     	; 0xf88 <DC_Motor_Rotate+0x56>
     f70:	16 c0       	rjmp	.+44     	; 0xf9e <DC_Motor_Rotate+0x6c>
	case ClockWise:
		GPIO_writePin(DC_MOTOR_PORT, IN1, LOGIC_HIGH); /** Set IN1 high for clockwise */
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	60 e0       	ldi	r22, 0x00	; 0
     f76:	41 e0       	ldi	r20, 0x01	; 1
     f78:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT, IN2, LOGIC_LOW); /** Set IN2 low */
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	61 e0       	ldi	r22, 0x01	; 1
     f80:	40 e0       	ldi	r20, 0x00	; 0
     f82:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
     f86:	15 c0       	rjmp	.+42     	; 0xfb2 <DC_Motor_Rotate+0x80>
		break;

	case Anti_ClockWise:
		GPIO_writePin(DC_MOTOR_PORT, IN1, LOGIC_LOW); /** Set IN1 low for anti-clockwise */
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	40 e0       	ldi	r20, 0x00	; 0
     f8e:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT, IN2, LOGIC_HIGH); /** Set IN2 high */
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	61 e0       	ldi	r22, 0x01	; 1
     f96:	41 e0       	ldi	r20, 0x01	; 1
     f98:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
     f9c:	0a c0       	rjmp	.+20     	; 0xfb2 <DC_Motor_Rotate+0x80>
		break;

	case Stop:
	default:
		GPIO_writePin(DC_MOTOR_PORT, IN1, LOGIC_LOW); /** Set IN1 low to stop */
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT, IN2, LOGIC_LOW); /** Set IN2 low to stop */
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	61 e0       	ldi	r22, 0x01	; 1
     fac:	40 e0       	ldi	r20, 0x00	; 0
     fae:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
		break;
	}

}
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <FlameSensor_init>:

/*
 * Function: FlameSensor_init
 * Description: Initializes the flame sensor pin direction.
 */
void FlameSensor_init(void) {
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
    // Set the flame sensor pin direction to input
    GPIO_setupPinDirection(FLAME_SENSOR_PORT, FLAME_SENSOR_PIN, PIN_INPUT);
     fc8:	83 e0       	ldi	r24, 0x03	; 3
     fca:	62 e0       	ldi	r22, 0x02	; 2
     fcc:	40 e0       	ldi	r20, 0x00	; 0
     fce:	0e 94 f7 07 	call	0xfee	; 0xfee <GPIO_setupPinDirection>
}
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	08 95       	ret

00000fd8 <FlameSensor_getValue>:
/*
 * Function: FlameSensor_getValue
 * Description: Reads the value from the flame sensor and returns it.
 * Returns: 1 if fire is detected, 0 otherwise.
 */
uint8 FlameSensor_getValue(void) {
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
    // Read the value from the flame sensor pin
    // Return 1 if the sensor detects fire, otherwise return 0
    return GPIO_readPin(FLAME_SENSOR_PORT, FLAME_SENSOR_PIN);
     fe0:	83 e0       	ldi	r24, 0x03	; 3
     fe2:	62 e0       	ldi	r22, 0x02	; 2
     fe4:	0e 94 cd 09 	call	0x139a	; 0x139a <GPIO_readPin>
}
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	08 95       	ret

00000fee <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <GPIO_setupPinDirection+0x6>
     ff4:	00 d0       	rcall	.+0      	; 0xff6 <GPIO_setupPinDirection+0x8>
     ff6:	0f 92       	push	r0
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	89 83       	std	Y+1, r24	; 0x01
     ffe:	6a 83       	std	Y+2, r22	; 0x02
    1000:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	88 30       	cpi	r24, 0x08	; 8
    1006:	08 f0       	brcs	.+2      	; 0x100a <GPIO_setupPinDirection+0x1c>
    1008:	d5 c0       	rjmp	.+426    	; 0x11b4 <GPIO_setupPinDirection+0x1c6>
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	84 30       	cpi	r24, 0x04	; 4
    100e:	08 f0       	brcs	.+2      	; 0x1012 <GPIO_setupPinDirection+0x24>
    1010:	d1 c0       	rjmp	.+418    	; 0x11b4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1012:	89 81       	ldd	r24, Y+1	; 0x01
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	3d 83       	std	Y+5, r19	; 0x05
    101a:	2c 83       	std	Y+4, r18	; 0x04
    101c:	8c 81       	ldd	r24, Y+4	; 0x04
    101e:	9d 81       	ldd	r25, Y+5	; 0x05
    1020:	81 30       	cpi	r24, 0x01	; 1
    1022:	91 05       	cpc	r25, r1
    1024:	09 f4       	brne	.+2      	; 0x1028 <GPIO_setupPinDirection+0x3a>
    1026:	43 c0       	rjmp	.+134    	; 0x10ae <GPIO_setupPinDirection+0xc0>
    1028:	2c 81       	ldd	r18, Y+4	; 0x04
    102a:	3d 81       	ldd	r19, Y+5	; 0x05
    102c:	22 30       	cpi	r18, 0x02	; 2
    102e:	31 05       	cpc	r19, r1
    1030:	2c f4       	brge	.+10     	; 0x103c <GPIO_setupPinDirection+0x4e>
    1032:	8c 81       	ldd	r24, Y+4	; 0x04
    1034:	9d 81       	ldd	r25, Y+5	; 0x05
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	71 f0       	breq	.+28     	; 0x1056 <GPIO_setupPinDirection+0x68>
    103a:	bc c0       	rjmp	.+376    	; 0x11b4 <GPIO_setupPinDirection+0x1c6>
    103c:	2c 81       	ldd	r18, Y+4	; 0x04
    103e:	3d 81       	ldd	r19, Y+5	; 0x05
    1040:	22 30       	cpi	r18, 0x02	; 2
    1042:	31 05       	cpc	r19, r1
    1044:	09 f4       	brne	.+2      	; 0x1048 <GPIO_setupPinDirection+0x5a>
    1046:	5f c0       	rjmp	.+190    	; 0x1106 <GPIO_setupPinDirection+0x118>
    1048:	8c 81       	ldd	r24, Y+4	; 0x04
    104a:	9d 81       	ldd	r25, Y+5	; 0x05
    104c:	83 30       	cpi	r24, 0x03	; 3
    104e:	91 05       	cpc	r25, r1
    1050:	09 f4       	brne	.+2      	; 0x1054 <GPIO_setupPinDirection+0x66>
    1052:	85 c0       	rjmp	.+266    	; 0x115e <GPIO_setupPinDirection+0x170>
    1054:	af c0       	rjmp	.+350    	; 0x11b4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	81 30       	cpi	r24, 0x01	; 1
    105a:	a1 f4       	brne	.+40     	; 0x1084 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    105c:	aa e3       	ldi	r26, 0x3A	; 58
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	ea e3       	ldi	r30, 0x3A	; 58
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	48 2f       	mov	r20, r24
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 2e       	mov	r0, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <GPIO_setupPinDirection+0x8c>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	0a 94       	dec	r0
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <GPIO_setupPinDirection+0x88>
    107e:	84 2b       	or	r24, r20
    1080:	8c 93       	st	X, r24
    1082:	98 c0       	rjmp	.+304    	; 0x11b4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1084:	aa e3       	ldi	r26, 0x3A	; 58
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	ea e3       	ldi	r30, 0x3A	; 58
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	48 2f       	mov	r20, r24
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	02 2e       	mov	r0, r18
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <GPIO_setupPinDirection+0xb4>
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	0a 94       	dec	r0
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <GPIO_setupPinDirection+0xb0>
    10a6:	80 95       	com	r24
    10a8:	84 23       	and	r24, r20
    10aa:	8c 93       	st	X, r24
    10ac:	83 c0       	rjmp	.+262    	; 0x11b4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	81 30       	cpi	r24, 0x01	; 1
    10b2:	a1 f4       	brne	.+40     	; 0x10dc <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    10b4:	a7 e3       	ldi	r26, 0x37	; 55
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e7 e3       	ldi	r30, 0x37	; 55
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	48 2f       	mov	r20, r24
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	02 2e       	mov	r0, r18
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <GPIO_setupPinDirection+0xe4>
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	0a 94       	dec	r0
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <GPIO_setupPinDirection+0xe0>
    10d6:	84 2b       	or	r24, r20
    10d8:	8c 93       	st	X, r24
    10da:	6c c0       	rjmp	.+216    	; 0x11b4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    10dc:	a7 e3       	ldi	r26, 0x37	; 55
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e7 e3       	ldi	r30, 0x37	; 55
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	48 2f       	mov	r20, r24
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	02 2e       	mov	r0, r18
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <GPIO_setupPinDirection+0x10c>
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	0a 94       	dec	r0
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <GPIO_setupPinDirection+0x108>
    10fe:	80 95       	com	r24
    1100:	84 23       	and	r24, r20
    1102:	8c 93       	st	X, r24
    1104:	57 c0       	rjmp	.+174    	; 0x11b4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	a1 f4       	brne	.+40     	; 0x1134 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    110c:	a4 e3       	ldi	r26, 0x34	; 52
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e4 e3       	ldi	r30, 0x34	; 52
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <GPIO_setupPinDirection+0x13c>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <GPIO_setupPinDirection+0x138>
    112e:	84 2b       	or	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	40 c0       	rjmp	.+128    	; 0x11b4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1134:	a4 e3       	ldi	r26, 0x34	; 52
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e4 e3       	ldi	r30, 0x34	; 52
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 2e       	mov	r0, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <GPIO_setupPinDirection+0x164>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <GPIO_setupPinDirection+0x160>
    1156:	80 95       	com	r24
    1158:	84 23       	and	r24, r20
    115a:	8c 93       	st	X, r24
    115c:	2b c0       	rjmp	.+86     	; 0x11b4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	81 30       	cpi	r24, 0x01	; 1
    1162:	a1 f4       	brne	.+40     	; 0x118c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1164:	a1 e3       	ldi	r26, 0x31	; 49
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e1 e3       	ldi	r30, 0x31	; 49
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	48 2f       	mov	r20, r24
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 2e       	mov	r0, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <GPIO_setupPinDirection+0x194>
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	0a 94       	dec	r0
    1184:	e2 f7       	brpl	.-8      	; 0x117e <GPIO_setupPinDirection+0x190>
    1186:	84 2b       	or	r24, r20
    1188:	8c 93       	st	X, r24
    118a:	14 c0       	rjmp	.+40     	; 0x11b4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    118c:	a1 e3       	ldi	r26, 0x31	; 49
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e1 e3       	ldi	r30, 0x31	; 49
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	48 2f       	mov	r20, r24
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	02 2e       	mov	r0, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <GPIO_setupPinDirection+0x1bc>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	0a 94       	dec	r0
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <GPIO_setupPinDirection+0x1b8>
    11ae:	80 95       	com	r24
    11b0:	84 23       	and	r24, r20
    11b2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <GPIO_writePin+0x6>
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <GPIO_writePin+0x8>
    11cc:	0f 92       	push	r0
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    11d2:	89 83       	std	Y+1, r24	; 0x01
    11d4:	6a 83       	std	Y+2, r22	; 0x02
    11d6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	88 30       	cpi	r24, 0x08	; 8
    11dc:	08 f0       	brcs	.+2      	; 0x11e0 <GPIO_writePin+0x1c>
    11de:	d5 c0       	rjmp	.+426    	; 0x138a <GPIO_writePin+0x1c6>
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	84 30       	cpi	r24, 0x04	; 4
    11e4:	08 f0       	brcs	.+2      	; 0x11e8 <GPIO_writePin+0x24>
    11e6:	d1 c0       	rjmp	.+418    	; 0x138a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	3d 83       	std	Y+5, r19	; 0x05
    11f0:	2c 83       	std	Y+4, r18	; 0x04
    11f2:	8c 81       	ldd	r24, Y+4	; 0x04
    11f4:	9d 81       	ldd	r25, Y+5	; 0x05
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	91 05       	cpc	r25, r1
    11fa:	09 f4       	brne	.+2      	; 0x11fe <GPIO_writePin+0x3a>
    11fc:	43 c0       	rjmp	.+134    	; 0x1284 <GPIO_writePin+0xc0>
    11fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1200:	3d 81       	ldd	r19, Y+5	; 0x05
    1202:	22 30       	cpi	r18, 0x02	; 2
    1204:	31 05       	cpc	r19, r1
    1206:	2c f4       	brge	.+10     	; 0x1212 <GPIO_writePin+0x4e>
    1208:	8c 81       	ldd	r24, Y+4	; 0x04
    120a:	9d 81       	ldd	r25, Y+5	; 0x05
    120c:	00 97       	sbiw	r24, 0x00	; 0
    120e:	71 f0       	breq	.+28     	; 0x122c <GPIO_writePin+0x68>
    1210:	bc c0       	rjmp	.+376    	; 0x138a <GPIO_writePin+0x1c6>
    1212:	2c 81       	ldd	r18, Y+4	; 0x04
    1214:	3d 81       	ldd	r19, Y+5	; 0x05
    1216:	22 30       	cpi	r18, 0x02	; 2
    1218:	31 05       	cpc	r19, r1
    121a:	09 f4       	brne	.+2      	; 0x121e <GPIO_writePin+0x5a>
    121c:	5f c0       	rjmp	.+190    	; 0x12dc <GPIO_writePin+0x118>
    121e:	8c 81       	ldd	r24, Y+4	; 0x04
    1220:	9d 81       	ldd	r25, Y+5	; 0x05
    1222:	83 30       	cpi	r24, 0x03	; 3
    1224:	91 05       	cpc	r25, r1
    1226:	09 f4       	brne	.+2      	; 0x122a <GPIO_writePin+0x66>
    1228:	85 c0       	rjmp	.+266    	; 0x1334 <GPIO_writePin+0x170>
    122a:	af c0       	rjmp	.+350    	; 0x138a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	81 30       	cpi	r24, 0x01	; 1
    1230:	a1 f4       	brne	.+40     	; 0x125a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1232:	ab e3       	ldi	r26, 0x3B	; 59
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	eb e3       	ldi	r30, 0x3B	; 59
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	48 2f       	mov	r20, r24
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	02 2e       	mov	r0, r18
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <GPIO_writePin+0x8c>
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	0a 94       	dec	r0
    1252:	e2 f7       	brpl	.-8      	; 0x124c <GPIO_writePin+0x88>
    1254:	84 2b       	or	r24, r20
    1256:	8c 93       	st	X, r24
    1258:	98 c0       	rjmp	.+304    	; 0x138a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    125a:	ab e3       	ldi	r26, 0x3B	; 59
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	eb e3       	ldi	r30, 0x3B	; 59
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	48 2f       	mov	r20, r24
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	02 2e       	mov	r0, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <GPIO_writePin+0xb4>
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	0a 94       	dec	r0
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <GPIO_writePin+0xb0>
    127c:	80 95       	com	r24
    127e:	84 23       	and	r24, r20
    1280:	8c 93       	st	X, r24
    1282:	83 c0       	rjmp	.+262    	; 0x138a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	a1 f4       	brne	.+40     	; 0x12b2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    128a:	a8 e3       	ldi	r26, 0x38	; 56
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e8 e3       	ldi	r30, 0x38	; 56
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	48 2f       	mov	r20, r24
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	02 2e       	mov	r0, r18
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <GPIO_writePin+0xe4>
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	0a 94       	dec	r0
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <GPIO_writePin+0xe0>
    12ac:	84 2b       	or	r24, r20
    12ae:	8c 93       	st	X, r24
    12b0:	6c c0       	rjmp	.+216    	; 0x138a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    12b2:	a8 e3       	ldi	r26, 0x38	; 56
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e8 e3       	ldi	r30, 0x38	; 56
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	48 2f       	mov	r20, r24
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	02 2e       	mov	r0, r18
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <GPIO_writePin+0x10c>
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	0a 94       	dec	r0
    12d2:	e2 f7       	brpl	.-8      	; 0x12cc <GPIO_writePin+0x108>
    12d4:	80 95       	com	r24
    12d6:	84 23       	and	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	57 c0       	rjmp	.+174    	; 0x138a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	81 30       	cpi	r24, 0x01	; 1
    12e0:	a1 f4       	brne	.+40     	; 0x130a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    12e2:	a5 e3       	ldi	r26, 0x35	; 53
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e5 e3       	ldi	r30, 0x35	; 53
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	48 2f       	mov	r20, r24
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	02 2e       	mov	r0, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <GPIO_writePin+0x13c>
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	0a 94       	dec	r0
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <GPIO_writePin+0x138>
    1304:	84 2b       	or	r24, r20
    1306:	8c 93       	st	X, r24
    1308:	40 c0       	rjmp	.+128    	; 0x138a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    130a:	a5 e3       	ldi	r26, 0x35	; 53
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	e5 e3       	ldi	r30, 0x35	; 53
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	48 2f       	mov	r20, r24
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	02 2e       	mov	r0, r18
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <GPIO_writePin+0x164>
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	0a 94       	dec	r0
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <GPIO_writePin+0x160>
    132c:	80 95       	com	r24
    132e:	84 23       	and	r24, r20
    1330:	8c 93       	st	X, r24
    1332:	2b c0       	rjmp	.+86     	; 0x138a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	a1 f4       	brne	.+40     	; 0x1362 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    133a:	a2 e3       	ldi	r26, 0x32	; 50
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e2 e3       	ldi	r30, 0x32	; 50
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	48 2f       	mov	r20, r24
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 2e       	mov	r0, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <GPIO_writePin+0x194>
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <GPIO_writePin+0x190>
    135c:	84 2b       	or	r24, r20
    135e:	8c 93       	st	X, r24
    1360:	14 c0       	rjmp	.+40     	; 0x138a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1362:	a2 e3       	ldi	r26, 0x32	; 50
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e2 e3       	ldi	r30, 0x32	; 50
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	48 2f       	mov	r20, r24
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 2e       	mov	r0, r18
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <GPIO_writePin+0x1bc>
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	0a 94       	dec	r0
    1382:	e2 f7       	brpl	.-8      	; 0x137c <GPIO_writePin+0x1b8>
    1384:	80 95       	com	r24
    1386:	84 23       	and	r24, r20
    1388:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <GPIO_readPin+0x6>
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <GPIO_readPin+0x8>
    13a2:	0f 92       	push	r0
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	8a 83       	std	Y+2, r24	; 0x02
    13aa:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    13ac:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	88 30       	cpi	r24, 0x08	; 8
    13b2:	08 f0       	brcs	.+2      	; 0x13b6 <GPIO_readPin+0x1c>
    13b4:	84 c0       	rjmp	.+264    	; 0x14be <GPIO_readPin+0x124>
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	84 30       	cpi	r24, 0x04	; 4
    13ba:	08 f0       	brcs	.+2      	; 0x13be <GPIO_readPin+0x24>
    13bc:	80 c0       	rjmp	.+256    	; 0x14be <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	3d 83       	std	Y+5, r19	; 0x05
    13c6:	2c 83       	std	Y+4, r18	; 0x04
    13c8:	4c 81       	ldd	r20, Y+4	; 0x04
    13ca:	5d 81       	ldd	r21, Y+5	; 0x05
    13cc:	41 30       	cpi	r20, 0x01	; 1
    13ce:	51 05       	cpc	r21, r1
    13d0:	79 f1       	breq	.+94     	; 0x1430 <GPIO_readPin+0x96>
    13d2:	8c 81       	ldd	r24, Y+4	; 0x04
    13d4:	9d 81       	ldd	r25, Y+5	; 0x05
    13d6:	82 30       	cpi	r24, 0x02	; 2
    13d8:	91 05       	cpc	r25, r1
    13da:	34 f4       	brge	.+12     	; 0x13e8 <GPIO_readPin+0x4e>
    13dc:	2c 81       	ldd	r18, Y+4	; 0x04
    13de:	3d 81       	ldd	r19, Y+5	; 0x05
    13e0:	21 15       	cp	r18, r1
    13e2:	31 05       	cpc	r19, r1
    13e4:	69 f0       	breq	.+26     	; 0x1400 <GPIO_readPin+0x66>
    13e6:	6b c0       	rjmp	.+214    	; 0x14be <GPIO_readPin+0x124>
    13e8:	4c 81       	ldd	r20, Y+4	; 0x04
    13ea:	5d 81       	ldd	r21, Y+5	; 0x05
    13ec:	42 30       	cpi	r20, 0x02	; 2
    13ee:	51 05       	cpc	r21, r1
    13f0:	b9 f1       	breq	.+110    	; 0x1460 <GPIO_readPin+0xc6>
    13f2:	8c 81       	ldd	r24, Y+4	; 0x04
    13f4:	9d 81       	ldd	r25, Y+5	; 0x05
    13f6:	83 30       	cpi	r24, 0x03	; 3
    13f8:	91 05       	cpc	r25, r1
    13fa:	09 f4       	brne	.+2      	; 0x13fe <GPIO_readPin+0x64>
    13fc:	49 c0       	rjmp	.+146    	; 0x1490 <GPIO_readPin+0xf6>
    13fe:	5f c0       	rjmp	.+190    	; 0x14be <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1400:	e9 e3       	ldi	r30, 0x39	; 57
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	88 2f       	mov	r24, r24
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	a9 01       	movw	r20, r18
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <GPIO_readPin+0x7e>
    1414:	55 95       	asr	r21
    1416:	47 95       	ror	r20
    1418:	8a 95       	dec	r24
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <GPIO_readPin+0x7a>
    141c:	ca 01       	movw	r24, r20
    141e:	81 70       	andi	r24, 0x01	; 1
    1420:	90 70       	andi	r25, 0x00	; 0
    1422:	88 23       	and	r24, r24
    1424:	19 f0       	breq	.+6      	; 0x142c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	89 83       	std	Y+1, r24	; 0x01
    142a:	49 c0       	rjmp	.+146    	; 0x14be <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    142c:	19 82       	std	Y+1, r1	; 0x01
    142e:	47 c0       	rjmp	.+142    	; 0x14be <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1430:	e6 e3       	ldi	r30, 0x36	; 54
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	88 2f       	mov	r24, r24
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	a9 01       	movw	r20, r18
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <GPIO_readPin+0xae>
    1444:	55 95       	asr	r21
    1446:	47 95       	ror	r20
    1448:	8a 95       	dec	r24
    144a:	e2 f7       	brpl	.-8      	; 0x1444 <GPIO_readPin+0xaa>
    144c:	ca 01       	movw	r24, r20
    144e:	81 70       	andi	r24, 0x01	; 1
    1450:	90 70       	andi	r25, 0x00	; 0
    1452:	88 23       	and	r24, r24
    1454:	19 f0       	breq	.+6      	; 0x145c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	89 83       	std	Y+1, r24	; 0x01
    145a:	31 c0       	rjmp	.+98     	; 0x14be <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    145c:	19 82       	std	Y+1, r1	; 0x01
    145e:	2f c0       	rjmp	.+94     	; 0x14be <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1460:	e3 e3       	ldi	r30, 0x33	; 51
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	88 2f       	mov	r24, r24
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	a9 01       	movw	r20, r18
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <GPIO_readPin+0xde>
    1474:	55 95       	asr	r21
    1476:	47 95       	ror	r20
    1478:	8a 95       	dec	r24
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <GPIO_readPin+0xda>
    147c:	ca 01       	movw	r24, r20
    147e:	81 70       	andi	r24, 0x01	; 1
    1480:	90 70       	andi	r25, 0x00	; 0
    1482:	88 23       	and	r24, r24
    1484:	19 f0       	breq	.+6      	; 0x148c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	89 83       	std	Y+1, r24	; 0x01
    148a:	19 c0       	rjmp	.+50     	; 0x14be <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    148c:	19 82       	std	Y+1, r1	; 0x01
    148e:	17 c0       	rjmp	.+46     	; 0x14be <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1490:	e0 e3       	ldi	r30, 0x30	; 48
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	88 2f       	mov	r24, r24
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	a9 01       	movw	r20, r18
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <GPIO_readPin+0x10e>
    14a4:	55 95       	asr	r21
    14a6:	47 95       	ror	r20
    14a8:	8a 95       	dec	r24
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <GPIO_readPin+0x10a>
    14ac:	ca 01       	movw	r24, r20
    14ae:	81 70       	andi	r24, 0x01	; 1
    14b0:	90 70       	andi	r25, 0x00	; 0
    14b2:	88 23       	and	r24, r24
    14b4:	19 f0       	breq	.+6      	; 0x14bc <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	89 83       	std	Y+1, r24	; 0x01
    14ba:	01 c0       	rjmp	.+2      	; 0x14be <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14bc:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    14be:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	cf 91       	pop	r28
    14cc:	df 91       	pop	r29
    14ce:	08 95       	ret

000014d0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    14d0:	df 93       	push	r29
    14d2:	cf 93       	push	r28
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <GPIO_setupPortDirection+0x6>
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <GPIO_setupPortDirection+0x8>
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	84 30       	cpi	r24, 0x04	; 4
    14e4:	90 f5       	brcc	.+100    	; 0x154a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	3c 83       	std	Y+4, r19	; 0x04
    14ee:	2b 83       	std	Y+3, r18	; 0x03
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	9c 81       	ldd	r25, Y+4	; 0x04
    14f4:	81 30       	cpi	r24, 0x01	; 1
    14f6:	91 05       	cpc	r25, r1
    14f8:	d1 f0       	breq	.+52     	; 0x152e <GPIO_setupPortDirection+0x5e>
    14fa:	2b 81       	ldd	r18, Y+3	; 0x03
    14fc:	3c 81       	ldd	r19, Y+4	; 0x04
    14fe:	22 30       	cpi	r18, 0x02	; 2
    1500:	31 05       	cpc	r19, r1
    1502:	2c f4       	brge	.+10     	; 0x150e <GPIO_setupPortDirection+0x3e>
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	9c 81       	ldd	r25, Y+4	; 0x04
    1508:	00 97       	sbiw	r24, 0x00	; 0
    150a:	61 f0       	breq	.+24     	; 0x1524 <GPIO_setupPortDirection+0x54>
    150c:	1e c0       	rjmp	.+60     	; 0x154a <GPIO_setupPortDirection+0x7a>
    150e:	2b 81       	ldd	r18, Y+3	; 0x03
    1510:	3c 81       	ldd	r19, Y+4	; 0x04
    1512:	22 30       	cpi	r18, 0x02	; 2
    1514:	31 05       	cpc	r19, r1
    1516:	81 f0       	breq	.+32     	; 0x1538 <GPIO_setupPortDirection+0x68>
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	9c 81       	ldd	r25, Y+4	; 0x04
    151c:	83 30       	cpi	r24, 0x03	; 3
    151e:	91 05       	cpc	r25, r1
    1520:	81 f0       	breq	.+32     	; 0x1542 <GPIO_setupPortDirection+0x72>
    1522:	13 c0       	rjmp	.+38     	; 0x154a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1524:	ea e3       	ldi	r30, 0x3A	; 58
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	80 83       	st	Z, r24
    152c:	0e c0       	rjmp	.+28     	; 0x154a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    152e:	e7 e3       	ldi	r30, 0x37	; 55
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	80 83       	st	Z, r24
    1536:	09 c0       	rjmp	.+18     	; 0x154a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1538:	e4 e3       	ldi	r30, 0x34	; 52
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	80 83       	st	Z, r24
    1540:	04 c0       	rjmp	.+8      	; 0x154a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1542:	e1 e3       	ldi	r30, 0x31	; 49
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	80 83       	st	Z, r24
			break;
		}
	}
}
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	cf 91       	pop	r28
    1554:	df 91       	pop	r29
    1556:	08 95       	ret

00001558 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	00 d0       	rcall	.+0      	; 0x155e <GPIO_writePort+0x6>
    155e:	00 d0       	rcall	.+0      	; 0x1560 <GPIO_writePort+0x8>
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	89 83       	std	Y+1, r24	; 0x01
    1566:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	84 30       	cpi	r24, 0x04	; 4
    156c:	90 f5       	brcc	.+100    	; 0x15d2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	3c 83       	std	Y+4, r19	; 0x04
    1576:	2b 83       	std	Y+3, r18	; 0x03
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	81 30       	cpi	r24, 0x01	; 1
    157e:	91 05       	cpc	r25, r1
    1580:	d1 f0       	breq	.+52     	; 0x15b6 <GPIO_writePort+0x5e>
    1582:	2b 81       	ldd	r18, Y+3	; 0x03
    1584:	3c 81       	ldd	r19, Y+4	; 0x04
    1586:	22 30       	cpi	r18, 0x02	; 2
    1588:	31 05       	cpc	r19, r1
    158a:	2c f4       	brge	.+10     	; 0x1596 <GPIO_writePort+0x3e>
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	9c 81       	ldd	r25, Y+4	; 0x04
    1590:	00 97       	sbiw	r24, 0x00	; 0
    1592:	61 f0       	breq	.+24     	; 0x15ac <GPIO_writePort+0x54>
    1594:	1e c0       	rjmp	.+60     	; 0x15d2 <GPIO_writePort+0x7a>
    1596:	2b 81       	ldd	r18, Y+3	; 0x03
    1598:	3c 81       	ldd	r19, Y+4	; 0x04
    159a:	22 30       	cpi	r18, 0x02	; 2
    159c:	31 05       	cpc	r19, r1
    159e:	81 f0       	breq	.+32     	; 0x15c0 <GPIO_writePort+0x68>
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	9c 81       	ldd	r25, Y+4	; 0x04
    15a4:	83 30       	cpi	r24, 0x03	; 3
    15a6:	91 05       	cpc	r25, r1
    15a8:	81 f0       	breq	.+32     	; 0x15ca <GPIO_writePort+0x72>
    15aa:	13 c0       	rjmp	.+38     	; 0x15d2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    15ac:	eb e3       	ldi	r30, 0x3B	; 59
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	80 83       	st	Z, r24
    15b4:	0e c0       	rjmp	.+28     	; 0x15d2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    15b6:	e8 e3       	ldi	r30, 0x38	; 56
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	80 83       	st	Z, r24
    15be:	09 c0       	rjmp	.+18     	; 0x15d2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    15c0:	e5 e3       	ldi	r30, 0x35	; 53
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	80 83       	st	Z, r24
    15c8:	04 c0       	rjmp	.+8      	; 0x15d2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    15ca:	e2 e3       	ldi	r30, 0x32	; 50
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	80 83       	st	Z, r24
			break;
		}
	}
}
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <GPIO_readPort+0x6>
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <GPIO_readPort+0x8>
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    15ee:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	84 30       	cpi	r24, 0x04	; 4
    15f4:	90 f5       	brcc	.+100    	; 0x165a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	3c 83       	std	Y+4, r19	; 0x04
    15fe:	2b 83       	std	Y+3, r18	; 0x03
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	9c 81       	ldd	r25, Y+4	; 0x04
    1604:	81 30       	cpi	r24, 0x01	; 1
    1606:	91 05       	cpc	r25, r1
    1608:	d1 f0       	breq	.+52     	; 0x163e <GPIO_readPort+0x5e>
    160a:	2b 81       	ldd	r18, Y+3	; 0x03
    160c:	3c 81       	ldd	r19, Y+4	; 0x04
    160e:	22 30       	cpi	r18, 0x02	; 2
    1610:	31 05       	cpc	r19, r1
    1612:	2c f4       	brge	.+10     	; 0x161e <GPIO_readPort+0x3e>
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	9c 81       	ldd	r25, Y+4	; 0x04
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	61 f0       	breq	.+24     	; 0x1634 <GPIO_readPort+0x54>
    161c:	1e c0       	rjmp	.+60     	; 0x165a <GPIO_readPort+0x7a>
    161e:	2b 81       	ldd	r18, Y+3	; 0x03
    1620:	3c 81       	ldd	r19, Y+4	; 0x04
    1622:	22 30       	cpi	r18, 0x02	; 2
    1624:	31 05       	cpc	r19, r1
    1626:	81 f0       	breq	.+32     	; 0x1648 <GPIO_readPort+0x68>
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	9c 81       	ldd	r25, Y+4	; 0x04
    162c:	83 30       	cpi	r24, 0x03	; 3
    162e:	91 05       	cpc	r25, r1
    1630:	81 f0       	breq	.+32     	; 0x1652 <GPIO_readPort+0x72>
    1632:	13 c0       	rjmp	.+38     	; 0x165a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1634:	e9 e3       	ldi	r30, 0x39	; 57
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	89 83       	std	Y+1, r24	; 0x01
    163c:	0e c0       	rjmp	.+28     	; 0x165a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    163e:	e6 e3       	ldi	r30, 0x36	; 54
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	89 83       	std	Y+1, r24	; 0x01
    1646:	09 c0       	rjmp	.+18     	; 0x165a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1648:	e3 e3       	ldi	r30, 0x33	; 51
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	89 83       	std	Y+1, r24	; 0x01
    1650:	04 c0       	rjmp	.+8      	; 0x165a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1652:	e0 e3       	ldi	r30, 0x30	; 48
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    165a:	89 81       	ldd	r24, Y+1	; 0x01
}
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	08 95       	ret

0000166a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	2e 97       	sbiw	r28, 0x0e	; 14
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    167e:	83 e0       	ldi	r24, 0x03	; 3
    1680:	60 e0       	ldi	r22, 0x00	; 0
    1682:	41 e0       	ldi	r20, 0x01	; 1
    1684:	0e 94 f7 07 	call	0xfee	; 0xfee <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1688:	83 e0       	ldi	r24, 0x03	; 3
    168a:	61 e0       	ldi	r22, 0x01	; 1
    168c:	41 e0       	ldi	r20, 0x01	; 1
    168e:	0e 94 f7 07 	call	0xfee	; 0xfee <GPIO_setupPinDirection>
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	a0 ea       	ldi	r26, 0xA0	; 160
    1698:	b1 e4       	ldi	r27, 0x41	; 65
    169a:	8b 87       	std	Y+11, r24	; 0x0b
    169c:	9c 87       	std	Y+12, r25	; 0x0c
    169e:	ad 87       	std	Y+13, r26	; 0x0d
    16a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	4a e7       	ldi	r20, 0x7A	; 122
    16b0:	55 e4       	ldi	r21, 0x45	; 69
    16b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	8f 83       	std	Y+7, r24	; 0x07
    16bc:	98 87       	std	Y+8, r25	; 0x08
    16be:	a9 87       	std	Y+9, r26	; 0x09
    16c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16c2:	6f 81       	ldd	r22, Y+7	; 0x07
    16c4:	78 85       	ldd	r23, Y+8	; 0x08
    16c6:	89 85       	ldd	r24, Y+9	; 0x09
    16c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	40 e8       	ldi	r20, 0x80	; 128
    16d0:	5f e3       	ldi	r21, 0x3F	; 63
    16d2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16d6:	88 23       	and	r24, r24
    16d8:	2c f4       	brge	.+10     	; 0x16e4 <LCD_init+0x7a>
		__ticks = 1;
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	9e 83       	std	Y+6, r25	; 0x06
    16e0:	8d 83       	std	Y+5, r24	; 0x05
    16e2:	3f c0       	rjmp	.+126    	; 0x1762 <LCD_init+0xf8>
	else if (__tmp > 65535)
    16e4:	6f 81       	ldd	r22, Y+7	; 0x07
    16e6:	78 85       	ldd	r23, Y+8	; 0x08
    16e8:	89 85       	ldd	r24, Y+9	; 0x09
    16ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	3f ef       	ldi	r19, 0xFF	; 255
    16f0:	4f e7       	ldi	r20, 0x7F	; 127
    16f2:	57 e4       	ldi	r21, 0x47	; 71
    16f4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16f8:	18 16       	cp	r1, r24
    16fa:	4c f5       	brge	.+82     	; 0x174e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    16fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1700:	8d 85       	ldd	r24, Y+13	; 0x0d
    1702:	9e 85       	ldd	r25, Y+14	; 0x0e
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	40 e2       	ldi	r20, 0x20	; 32
    170a:	51 e4       	ldi	r21, 0x41	; 65
    170c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	bc 01       	movw	r22, r24
    1716:	cd 01       	movw	r24, r26
    1718:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	9e 83       	std	Y+6, r25	; 0x06
    1722:	8d 83       	std	Y+5, r24	; 0x05
    1724:	0f c0       	rjmp	.+30     	; 0x1744 <LCD_init+0xda>
    1726:	80 e9       	ldi	r24, 0x90	; 144
    1728:	91 e0       	ldi	r25, 0x01	; 1
    172a:	9c 83       	std	Y+4, r25	; 0x04
    172c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	9c 81       	ldd	r25, Y+4	; 0x04
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	f1 f7       	brne	.-4      	; 0x1732 <LCD_init+0xc8>
    1736:	9c 83       	std	Y+4, r25	; 0x04
    1738:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    173a:	8d 81       	ldd	r24, Y+5	; 0x05
    173c:	9e 81       	ldd	r25, Y+6	; 0x06
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	9e 83       	std	Y+6, r25	; 0x06
    1742:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1744:	8d 81       	ldd	r24, Y+5	; 0x05
    1746:	9e 81       	ldd	r25, Y+6	; 0x06
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	69 f7       	brne	.-38     	; 0x1726 <LCD_init+0xbc>
    174c:	14 c0       	rjmp	.+40     	; 0x1776 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    174e:	6f 81       	ldd	r22, Y+7	; 0x07
    1750:	78 85       	ldd	r23, Y+8	; 0x08
    1752:	89 85       	ldd	r24, Y+9	; 0x09
    1754:	9a 85       	ldd	r25, Y+10	; 0x0a
    1756:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	9e 83       	std	Y+6, r25	; 0x06
    1760:	8d 83       	std	Y+5, r24	; 0x05
    1762:	8d 81       	ldd	r24, Y+5	; 0x05
    1764:	9e 81       	ldd	r25, Y+6	; 0x06
    1766:	9a 83       	std	Y+2, r25	; 0x02
    1768:	89 83       	std	Y+1, r24	; 0x01
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	9a 81       	ldd	r25, Y+2	; 0x02
    176e:	01 97       	sbiw	r24, 0x01	; 1
    1770:	f1 f7       	brne	.-4      	; 0x176e <LCD_init+0x104>
    1772:	9a 83       	std	Y+2, r25	; 0x02
    1774:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1776:	82 e0       	ldi	r24, 0x02	; 2
    1778:	6f ef       	ldi	r22, 0xFF	; 255
    177a:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    177e:	88 e3       	ldi	r24, 0x38	; 56
    1780:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1784:	8c e0       	ldi	r24, 0x0C	; 12
    1786:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <LCD_sendCommand>
}
    1790:	2e 96       	adiw	r28, 0x0e	; 14
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	cd bf       	out	0x3d, r28	; 61
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	e9 97       	sbiw	r28, 0x39	; 57
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	f8 94       	cli
    17b0:	de bf       	out	0x3e, r29	; 62
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	cd bf       	out	0x3d, r28	; 61
    17b6:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    17b8:	83 e0       	ldi	r24, 0x03	; 3
    17ba:	60 e0       	ldi	r22, 0x00	; 0
    17bc:	40 e0       	ldi	r20, 0x00	; 0
    17be:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	a0 e8       	ldi	r26, 0x80	; 128
    17c8:	bf e3       	ldi	r27, 0x3F	; 63
    17ca:	8d ab       	std	Y+53, r24	; 0x35
    17cc:	9e ab       	std	Y+54, r25	; 0x36
    17ce:	af ab       	std	Y+55, r26	; 0x37
    17d0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d2:	6d a9       	ldd	r22, Y+53	; 0x35
    17d4:	7e a9       	ldd	r23, Y+54	; 0x36
    17d6:	8f a9       	ldd	r24, Y+55	; 0x37
    17d8:	98 ad       	ldd	r25, Y+56	; 0x38
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	4a e7       	ldi	r20, 0x7A	; 122
    17e0:	55 e4       	ldi	r21, 0x45	; 69
    17e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	89 ab       	std	Y+49, r24	; 0x31
    17ec:	9a ab       	std	Y+50, r25	; 0x32
    17ee:	ab ab       	std	Y+51, r26	; 0x33
    17f0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17f2:	69 a9       	ldd	r22, Y+49	; 0x31
    17f4:	7a a9       	ldd	r23, Y+50	; 0x32
    17f6:	8b a9       	ldd	r24, Y+51	; 0x33
    17f8:	9c a9       	ldd	r25, Y+52	; 0x34
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	40 e8       	ldi	r20, 0x80	; 128
    1800:	5f e3       	ldi	r21, 0x3F	; 63
    1802:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1806:	88 23       	and	r24, r24
    1808:	2c f4       	brge	.+10     	; 0x1814 <LCD_sendCommand+0x72>
		__ticks = 1;
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	98 ab       	std	Y+48, r25	; 0x30
    1810:	8f a7       	std	Y+47, r24	; 0x2f
    1812:	3f c0       	rjmp	.+126    	; 0x1892 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1814:	69 a9       	ldd	r22, Y+49	; 0x31
    1816:	7a a9       	ldd	r23, Y+50	; 0x32
    1818:	8b a9       	ldd	r24, Y+51	; 0x33
    181a:	9c a9       	ldd	r25, Y+52	; 0x34
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	3f ef       	ldi	r19, 0xFF	; 255
    1820:	4f e7       	ldi	r20, 0x7F	; 127
    1822:	57 e4       	ldi	r21, 0x47	; 71
    1824:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1828:	18 16       	cp	r1, r24
    182a:	4c f5       	brge	.+82     	; 0x187e <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    182c:	6d a9       	ldd	r22, Y+53	; 0x35
    182e:	7e a9       	ldd	r23, Y+54	; 0x36
    1830:	8f a9       	ldd	r24, Y+55	; 0x37
    1832:	98 ad       	ldd	r25, Y+56	; 0x38
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	40 e2       	ldi	r20, 0x20	; 32
    183a:	51 e4       	ldi	r21, 0x41	; 65
    183c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	bc 01       	movw	r22, r24
    1846:	cd 01       	movw	r24, r26
    1848:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	98 ab       	std	Y+48, r25	; 0x30
    1852:	8f a7       	std	Y+47, r24	; 0x2f
    1854:	0f c0       	rjmp	.+30     	; 0x1874 <LCD_sendCommand+0xd2>
    1856:	80 e9       	ldi	r24, 0x90	; 144
    1858:	91 e0       	ldi	r25, 0x01	; 1
    185a:	9e a7       	std	Y+46, r25	; 0x2e
    185c:	8d a7       	std	Y+45, r24	; 0x2d
    185e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1860:	9e a5       	ldd	r25, Y+46	; 0x2e
    1862:	01 97       	sbiw	r24, 0x01	; 1
    1864:	f1 f7       	brne	.-4      	; 0x1862 <LCD_sendCommand+0xc0>
    1866:	9e a7       	std	Y+46, r25	; 0x2e
    1868:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    186a:	8f a5       	ldd	r24, Y+47	; 0x2f
    186c:	98 a9       	ldd	r25, Y+48	; 0x30
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	98 ab       	std	Y+48, r25	; 0x30
    1872:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1874:	8f a5       	ldd	r24, Y+47	; 0x2f
    1876:	98 a9       	ldd	r25, Y+48	; 0x30
    1878:	00 97       	sbiw	r24, 0x00	; 0
    187a:	69 f7       	brne	.-38     	; 0x1856 <LCD_sendCommand+0xb4>
    187c:	14 c0       	rjmp	.+40     	; 0x18a6 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    187e:	69 a9       	ldd	r22, Y+49	; 0x31
    1880:	7a a9       	ldd	r23, Y+50	; 0x32
    1882:	8b a9       	ldd	r24, Y+51	; 0x33
    1884:	9c a9       	ldd	r25, Y+52	; 0x34
    1886:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	98 ab       	std	Y+48, r25	; 0x30
    1890:	8f a7       	std	Y+47, r24	; 0x2f
    1892:	8f a5       	ldd	r24, Y+47	; 0x2f
    1894:	98 a9       	ldd	r25, Y+48	; 0x30
    1896:	9c a7       	std	Y+44, r25	; 0x2c
    1898:	8b a7       	std	Y+43, r24	; 0x2b
    189a:	8b a5       	ldd	r24, Y+43	; 0x2b
    189c:	9c a5       	ldd	r25, Y+44	; 0x2c
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	f1 f7       	brne	.-4      	; 0x189e <LCD_sendCommand+0xfc>
    18a2:	9c a7       	std	Y+44, r25	; 0x2c
    18a4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    18a6:	83 e0       	ldi	r24, 0x03	; 3
    18a8:	61 e0       	ldi	r22, 0x01	; 1
    18aa:	41 e0       	ldi	r20, 0x01	; 1
    18ac:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	a0 e8       	ldi	r26, 0x80	; 128
    18b6:	bf e3       	ldi	r27, 0x3F	; 63
    18b8:	8f a3       	std	Y+39, r24	; 0x27
    18ba:	98 a7       	std	Y+40, r25	; 0x28
    18bc:	a9 a7       	std	Y+41, r26	; 0x29
    18be:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c0:	6f a1       	ldd	r22, Y+39	; 0x27
    18c2:	78 a5       	ldd	r23, Y+40	; 0x28
    18c4:	89 a5       	ldd	r24, Y+41	; 0x29
    18c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	4a e7       	ldi	r20, 0x7A	; 122
    18ce:	55 e4       	ldi	r21, 0x45	; 69
    18d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	8b a3       	std	Y+35, r24	; 0x23
    18da:	9c a3       	std	Y+36, r25	; 0x24
    18dc:	ad a3       	std	Y+37, r26	; 0x25
    18de:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18e0:	6b a1       	ldd	r22, Y+35	; 0x23
    18e2:	7c a1       	ldd	r23, Y+36	; 0x24
    18e4:	8d a1       	ldd	r24, Y+37	; 0x25
    18e6:	9e a1       	ldd	r25, Y+38	; 0x26
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	40 e8       	ldi	r20, 0x80	; 128
    18ee:	5f e3       	ldi	r21, 0x3F	; 63
    18f0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18f4:	88 23       	and	r24, r24
    18f6:	2c f4       	brge	.+10     	; 0x1902 <LCD_sendCommand+0x160>
		__ticks = 1;
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	9a a3       	std	Y+34, r25	; 0x22
    18fe:	89 a3       	std	Y+33, r24	; 0x21
    1900:	3f c0       	rjmp	.+126    	; 0x1980 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1902:	6b a1       	ldd	r22, Y+35	; 0x23
    1904:	7c a1       	ldd	r23, Y+36	; 0x24
    1906:	8d a1       	ldd	r24, Y+37	; 0x25
    1908:	9e a1       	ldd	r25, Y+38	; 0x26
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	3f ef       	ldi	r19, 0xFF	; 255
    190e:	4f e7       	ldi	r20, 0x7F	; 127
    1910:	57 e4       	ldi	r21, 0x47	; 71
    1912:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1916:	18 16       	cp	r1, r24
    1918:	4c f5       	brge	.+82     	; 0x196c <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    191a:	6f a1       	ldd	r22, Y+39	; 0x27
    191c:	78 a5       	ldd	r23, Y+40	; 0x28
    191e:	89 a5       	ldd	r24, Y+41	; 0x29
    1920:	9a a5       	ldd	r25, Y+42	; 0x2a
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e2       	ldi	r20, 0x20	; 32
    1928:	51 e4       	ldi	r21, 0x41	; 65
    192a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	bc 01       	movw	r22, r24
    1934:	cd 01       	movw	r24, r26
    1936:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	9a a3       	std	Y+34, r25	; 0x22
    1940:	89 a3       	std	Y+33, r24	; 0x21
    1942:	0f c0       	rjmp	.+30     	; 0x1962 <LCD_sendCommand+0x1c0>
    1944:	80 e9       	ldi	r24, 0x90	; 144
    1946:	91 e0       	ldi	r25, 0x01	; 1
    1948:	98 a3       	std	Y+32, r25	; 0x20
    194a:	8f 8f       	std	Y+31, r24	; 0x1f
    194c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    194e:	98 a1       	ldd	r25, Y+32	; 0x20
    1950:	01 97       	sbiw	r24, 0x01	; 1
    1952:	f1 f7       	brne	.-4      	; 0x1950 <LCD_sendCommand+0x1ae>
    1954:	98 a3       	std	Y+32, r25	; 0x20
    1956:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1958:	89 a1       	ldd	r24, Y+33	; 0x21
    195a:	9a a1       	ldd	r25, Y+34	; 0x22
    195c:	01 97       	sbiw	r24, 0x01	; 1
    195e:	9a a3       	std	Y+34, r25	; 0x22
    1960:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1962:	89 a1       	ldd	r24, Y+33	; 0x21
    1964:	9a a1       	ldd	r25, Y+34	; 0x22
    1966:	00 97       	sbiw	r24, 0x00	; 0
    1968:	69 f7       	brne	.-38     	; 0x1944 <LCD_sendCommand+0x1a2>
    196a:	14 c0       	rjmp	.+40     	; 0x1994 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    196c:	6b a1       	ldd	r22, Y+35	; 0x23
    196e:	7c a1       	ldd	r23, Y+36	; 0x24
    1970:	8d a1       	ldd	r24, Y+37	; 0x25
    1972:	9e a1       	ldd	r25, Y+38	; 0x26
    1974:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	9a a3       	std	Y+34, r25	; 0x22
    197e:	89 a3       	std	Y+33, r24	; 0x21
    1980:	89 a1       	ldd	r24, Y+33	; 0x21
    1982:	9a a1       	ldd	r25, Y+34	; 0x22
    1984:	9e 8f       	std	Y+30, r25	; 0x1e
    1986:	8d 8f       	std	Y+29, r24	; 0x1d
    1988:	8d 8d       	ldd	r24, Y+29	; 0x1d
    198a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    198c:	01 97       	sbiw	r24, 0x01	; 1
    198e:	f1 f7       	brne	.-4      	; 0x198c <LCD_sendCommand+0x1ea>
    1990:	9e 8f       	std	Y+30, r25	; 0x1e
    1992:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1994:	82 e0       	ldi	r24, 0x02	; 2
    1996:	69 ad       	ldd	r22, Y+57	; 0x39
    1998:	0e 94 ac 0a 	call	0x1558	; 0x1558 <GPIO_writePort>
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	a0 e8       	ldi	r26, 0x80	; 128
    19a2:	bf e3       	ldi	r27, 0x3F	; 63
    19a4:	89 8f       	std	Y+25, r24	; 0x19
    19a6:	9a 8f       	std	Y+26, r25	; 0x1a
    19a8:	ab 8f       	std	Y+27, r26	; 0x1b
    19aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ac:	69 8d       	ldd	r22, Y+25	; 0x19
    19ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	4a e7       	ldi	r20, 0x7A	; 122
    19ba:	55 e4       	ldi	r21, 0x45	; 69
    19bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	8d 8b       	std	Y+21, r24	; 0x15
    19c6:	9e 8b       	std	Y+22, r25	; 0x16
    19c8:	af 8b       	std	Y+23, r26	; 0x17
    19ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19cc:	6d 89       	ldd	r22, Y+21	; 0x15
    19ce:	7e 89       	ldd	r23, Y+22	; 0x16
    19d0:	8f 89       	ldd	r24, Y+23	; 0x17
    19d2:	98 8d       	ldd	r25, Y+24	; 0x18
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	40 e8       	ldi	r20, 0x80	; 128
    19da:	5f e3       	ldi	r21, 0x3F	; 63
    19dc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19e0:	88 23       	and	r24, r24
    19e2:	2c f4       	brge	.+10     	; 0x19ee <LCD_sendCommand+0x24c>
		__ticks = 1;
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	9c 8b       	std	Y+20, r25	; 0x14
    19ea:	8b 8b       	std	Y+19, r24	; 0x13
    19ec:	3f c0       	rjmp	.+126    	; 0x1a6c <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    19ee:	6d 89       	ldd	r22, Y+21	; 0x15
    19f0:	7e 89       	ldd	r23, Y+22	; 0x16
    19f2:	8f 89       	ldd	r24, Y+23	; 0x17
    19f4:	98 8d       	ldd	r25, Y+24	; 0x18
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	3f ef       	ldi	r19, 0xFF	; 255
    19fa:	4f e7       	ldi	r20, 0x7F	; 127
    19fc:	57 e4       	ldi	r21, 0x47	; 71
    19fe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a02:	18 16       	cp	r1, r24
    1a04:	4c f5       	brge	.+82     	; 0x1a58 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a06:	69 8d       	ldd	r22, Y+25	; 0x19
    1a08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	40 e2       	ldi	r20, 0x20	; 32
    1a14:	51 e4       	ldi	r21, 0x41	; 65
    1a16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	bc 01       	movw	r22, r24
    1a20:	cd 01       	movw	r24, r26
    1a22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	9c 8b       	std	Y+20, r25	; 0x14
    1a2c:	8b 8b       	std	Y+19, r24	; 0x13
    1a2e:	0f c0       	rjmp	.+30     	; 0x1a4e <LCD_sendCommand+0x2ac>
    1a30:	80 e9       	ldi	r24, 0x90	; 144
    1a32:	91 e0       	ldi	r25, 0x01	; 1
    1a34:	9a 8b       	std	Y+18, r25	; 0x12
    1a36:	89 8b       	std	Y+17, r24	; 0x11
    1a38:	89 89       	ldd	r24, Y+17	; 0x11
    1a3a:	9a 89       	ldd	r25, Y+18	; 0x12
    1a3c:	01 97       	sbiw	r24, 0x01	; 1
    1a3e:	f1 f7       	brne	.-4      	; 0x1a3c <LCD_sendCommand+0x29a>
    1a40:	9a 8b       	std	Y+18, r25	; 0x12
    1a42:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a44:	8b 89       	ldd	r24, Y+19	; 0x13
    1a46:	9c 89       	ldd	r25, Y+20	; 0x14
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	9c 8b       	std	Y+20, r25	; 0x14
    1a4c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a50:	9c 89       	ldd	r25, Y+20	; 0x14
    1a52:	00 97       	sbiw	r24, 0x00	; 0
    1a54:	69 f7       	brne	.-38     	; 0x1a30 <LCD_sendCommand+0x28e>
    1a56:	14 c0       	rjmp	.+40     	; 0x1a80 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a58:	6d 89       	ldd	r22, Y+21	; 0x15
    1a5a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a5c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a5e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	9c 8b       	std	Y+20, r25	; 0x14
    1a6a:	8b 8b       	std	Y+19, r24	; 0x13
    1a6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a70:	98 8b       	std	Y+16, r25	; 0x10
    1a72:	8f 87       	std	Y+15, r24	; 0x0f
    1a74:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a76:	98 89       	ldd	r25, Y+16	; 0x10
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	f1 f7       	brne	.-4      	; 0x1a78 <LCD_sendCommand+0x2d6>
    1a7c:	98 8b       	std	Y+16, r25	; 0x10
    1a7e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1a80:	83 e0       	ldi	r24, 0x03	; 3
    1a82:	61 e0       	ldi	r22, 0x01	; 1
    1a84:	40 e0       	ldi	r20, 0x00	; 0
    1a86:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	a0 e8       	ldi	r26, 0x80	; 128
    1a90:	bf e3       	ldi	r27, 0x3F	; 63
    1a92:	8b 87       	std	Y+11, r24	; 0x0b
    1a94:	9c 87       	std	Y+12, r25	; 0x0c
    1a96:	ad 87       	std	Y+13, r26	; 0x0d
    1a98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	4a e7       	ldi	r20, 0x7A	; 122
    1aa8:	55 e4       	ldi	r21, 0x45	; 69
    1aaa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	8f 83       	std	Y+7, r24	; 0x07
    1ab4:	98 87       	std	Y+8, r25	; 0x08
    1ab6:	a9 87       	std	Y+9, r26	; 0x09
    1ab8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aba:	6f 81       	ldd	r22, Y+7	; 0x07
    1abc:	78 85       	ldd	r23, Y+8	; 0x08
    1abe:	89 85       	ldd	r24, Y+9	; 0x09
    1ac0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	40 e8       	ldi	r20, 0x80	; 128
    1ac8:	5f e3       	ldi	r21, 0x3F	; 63
    1aca:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ace:	88 23       	and	r24, r24
    1ad0:	2c f4       	brge	.+10     	; 0x1adc <LCD_sendCommand+0x33a>
		__ticks = 1;
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	9e 83       	std	Y+6, r25	; 0x06
    1ad8:	8d 83       	std	Y+5, r24	; 0x05
    1ada:	3f c0       	rjmp	.+126    	; 0x1b5a <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1adc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ade:	78 85       	ldd	r23, Y+8	; 0x08
    1ae0:	89 85       	ldd	r24, Y+9	; 0x09
    1ae2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	3f ef       	ldi	r19, 0xFF	; 255
    1ae8:	4f e7       	ldi	r20, 0x7F	; 127
    1aea:	57 e4       	ldi	r21, 0x47	; 71
    1aec:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1af0:	18 16       	cp	r1, r24
    1af2:	4c f5       	brge	.+82     	; 0x1b46 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1af6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1af8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1afa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	40 e2       	ldi	r20, 0x20	; 32
    1b02:	51 e4       	ldi	r21, 0x41	; 65
    1b04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	bc 01       	movw	r22, r24
    1b0e:	cd 01       	movw	r24, r26
    1b10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	9e 83       	std	Y+6, r25	; 0x06
    1b1a:	8d 83       	std	Y+5, r24	; 0x05
    1b1c:	0f c0       	rjmp	.+30     	; 0x1b3c <LCD_sendCommand+0x39a>
    1b1e:	80 e9       	ldi	r24, 0x90	; 144
    1b20:	91 e0       	ldi	r25, 0x01	; 1
    1b22:	9c 83       	std	Y+4, r25	; 0x04
    1b24:	8b 83       	std	Y+3, r24	; 0x03
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	f1 f7       	brne	.-4      	; 0x1b2a <LCD_sendCommand+0x388>
    1b2e:	9c 83       	std	Y+4, r25	; 0x04
    1b30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b32:	8d 81       	ldd	r24, Y+5	; 0x05
    1b34:	9e 81       	ldd	r25, Y+6	; 0x06
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	9e 83       	std	Y+6, r25	; 0x06
    1b3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	69 f7       	brne	.-38     	; 0x1b1e <LCD_sendCommand+0x37c>
    1b44:	14 c0       	rjmp	.+40     	; 0x1b6e <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b46:	6f 81       	ldd	r22, Y+7	; 0x07
    1b48:	78 85       	ldd	r23, Y+8	; 0x08
    1b4a:	89 85       	ldd	r24, Y+9	; 0x09
    1b4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	9e 83       	std	Y+6, r25	; 0x06
    1b58:	8d 83       	std	Y+5, r24	; 0x05
    1b5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5e:	9a 83       	std	Y+2, r25	; 0x02
    1b60:	89 83       	std	Y+1, r24	; 0x01
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	9a 81       	ldd	r25, Y+2	; 0x02
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	f1 f7       	brne	.-4      	; 0x1b66 <LCD_sendCommand+0x3c4>
    1b6a:	9a 83       	std	Y+2, r25	; 0x02
    1b6c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1b6e:	e9 96       	adiw	r28, 0x39	; 57
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	de bf       	out	0x3e, r29	; 62
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	cd bf       	out	0x3d, r28	; 61
    1b7a:	cf 91       	pop	r28
    1b7c:	df 91       	pop	r29
    1b7e:	08 95       	ret

00001b80 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    1b88:	e9 97       	sbiw	r28, 0x39	; 57
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	f8 94       	cli
    1b8e:	de bf       	out	0x3e, r29	; 62
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	cd bf       	out	0x3d, r28	; 61
    1b94:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1b96:	83 e0       	ldi	r24, 0x03	; 3
    1b98:	60 e0       	ldi	r22, 0x00	; 0
    1b9a:	41 e0       	ldi	r20, 0x01	; 1
    1b9c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	a0 e8       	ldi	r26, 0x80	; 128
    1ba6:	bf e3       	ldi	r27, 0x3F	; 63
    1ba8:	8d ab       	std	Y+53, r24	; 0x35
    1baa:	9e ab       	std	Y+54, r25	; 0x36
    1bac:	af ab       	std	Y+55, r26	; 0x37
    1bae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb0:	6d a9       	ldd	r22, Y+53	; 0x35
    1bb2:	7e a9       	ldd	r23, Y+54	; 0x36
    1bb4:	8f a9       	ldd	r24, Y+55	; 0x37
    1bb6:	98 ad       	ldd	r25, Y+56	; 0x38
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	4a e7       	ldi	r20, 0x7A	; 122
    1bbe:	55 e4       	ldi	r21, 0x45	; 69
    1bc0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	89 ab       	std	Y+49, r24	; 0x31
    1bca:	9a ab       	std	Y+50, r25	; 0x32
    1bcc:	ab ab       	std	Y+51, r26	; 0x33
    1bce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bd0:	69 a9       	ldd	r22, Y+49	; 0x31
    1bd2:	7a a9       	ldd	r23, Y+50	; 0x32
    1bd4:	8b a9       	ldd	r24, Y+51	; 0x33
    1bd6:	9c a9       	ldd	r25, Y+52	; 0x34
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e8       	ldi	r20, 0x80	; 128
    1bde:	5f e3       	ldi	r21, 0x3F	; 63
    1be0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1be4:	88 23       	and	r24, r24
    1be6:	2c f4       	brge	.+10     	; 0x1bf2 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	98 ab       	std	Y+48, r25	; 0x30
    1bee:	8f a7       	std	Y+47, r24	; 0x2f
    1bf0:	3f c0       	rjmp	.+126    	; 0x1c70 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1bf2:	69 a9       	ldd	r22, Y+49	; 0x31
    1bf4:	7a a9       	ldd	r23, Y+50	; 0x32
    1bf6:	8b a9       	ldd	r24, Y+51	; 0x33
    1bf8:	9c a9       	ldd	r25, Y+52	; 0x34
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	3f ef       	ldi	r19, 0xFF	; 255
    1bfe:	4f e7       	ldi	r20, 0x7F	; 127
    1c00:	57 e4       	ldi	r21, 0x47	; 71
    1c02:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c06:	18 16       	cp	r1, r24
    1c08:	4c f5       	brge	.+82     	; 0x1c5c <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c0a:	6d a9       	ldd	r22, Y+53	; 0x35
    1c0c:	7e a9       	ldd	r23, Y+54	; 0x36
    1c0e:	8f a9       	ldd	r24, Y+55	; 0x37
    1c10:	98 ad       	ldd	r25, Y+56	; 0x38
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e2       	ldi	r20, 0x20	; 32
    1c18:	51 e4       	ldi	r21, 0x41	; 65
    1c1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	bc 01       	movw	r22, r24
    1c24:	cd 01       	movw	r24, r26
    1c26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	98 ab       	std	Y+48, r25	; 0x30
    1c30:	8f a7       	std	Y+47, r24	; 0x2f
    1c32:	0f c0       	rjmp	.+30     	; 0x1c52 <LCD_displayCharacter+0xd2>
    1c34:	80 e9       	ldi	r24, 0x90	; 144
    1c36:	91 e0       	ldi	r25, 0x01	; 1
    1c38:	9e a7       	std	Y+46, r25	; 0x2e
    1c3a:	8d a7       	std	Y+45, r24	; 0x2d
    1c3c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c3e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	f1 f7       	brne	.-4      	; 0x1c40 <LCD_displayCharacter+0xc0>
    1c44:	9e a7       	std	Y+46, r25	; 0x2e
    1c46:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c48:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c4a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	98 ab       	std	Y+48, r25	; 0x30
    1c50:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c52:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c54:	98 a9       	ldd	r25, Y+48	; 0x30
    1c56:	00 97       	sbiw	r24, 0x00	; 0
    1c58:	69 f7       	brne	.-38     	; 0x1c34 <LCD_displayCharacter+0xb4>
    1c5a:	14 c0       	rjmp	.+40     	; 0x1c84 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c5c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c5e:	7a a9       	ldd	r23, Y+50	; 0x32
    1c60:	8b a9       	ldd	r24, Y+51	; 0x33
    1c62:	9c a9       	ldd	r25, Y+52	; 0x34
    1c64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	98 ab       	std	Y+48, r25	; 0x30
    1c6e:	8f a7       	std	Y+47, r24	; 0x2f
    1c70:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c72:	98 a9       	ldd	r25, Y+48	; 0x30
    1c74:	9c a7       	std	Y+44, r25	; 0x2c
    1c76:	8b a7       	std	Y+43, r24	; 0x2b
    1c78:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c7a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	f1 f7       	brne	.-4      	; 0x1c7c <LCD_displayCharacter+0xfc>
    1c80:	9c a7       	std	Y+44, r25	; 0x2c
    1c82:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1c84:	83 e0       	ldi	r24, 0x03	; 3
    1c86:	61 e0       	ldi	r22, 0x01	; 1
    1c88:	41 e0       	ldi	r20, 0x01	; 1
    1c8a:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	a0 e8       	ldi	r26, 0x80	; 128
    1c94:	bf e3       	ldi	r27, 0x3F	; 63
    1c96:	8f a3       	std	Y+39, r24	; 0x27
    1c98:	98 a7       	std	Y+40, r25	; 0x28
    1c9a:	a9 a7       	std	Y+41, r26	; 0x29
    1c9c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9e:	6f a1       	ldd	r22, Y+39	; 0x27
    1ca0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ca2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ca4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	4a e7       	ldi	r20, 0x7A	; 122
    1cac:	55 e4       	ldi	r21, 0x45	; 69
    1cae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	8b a3       	std	Y+35, r24	; 0x23
    1cb8:	9c a3       	std	Y+36, r25	; 0x24
    1cba:	ad a3       	std	Y+37, r26	; 0x25
    1cbc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cbe:	6b a1       	ldd	r22, Y+35	; 0x23
    1cc0:	7c a1       	ldd	r23, Y+36	; 0x24
    1cc2:	8d a1       	ldd	r24, Y+37	; 0x25
    1cc4:	9e a1       	ldd	r25, Y+38	; 0x26
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	40 e8       	ldi	r20, 0x80	; 128
    1ccc:	5f e3       	ldi	r21, 0x3F	; 63
    1cce:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1cd2:	88 23       	and	r24, r24
    1cd4:	2c f4       	brge	.+10     	; 0x1ce0 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	9a a3       	std	Y+34, r25	; 0x22
    1cdc:	89 a3       	std	Y+33, r24	; 0x21
    1cde:	3f c0       	rjmp	.+126    	; 0x1d5e <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1ce0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ce2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ce4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ce6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	3f ef       	ldi	r19, 0xFF	; 255
    1cec:	4f e7       	ldi	r20, 0x7F	; 127
    1cee:	57 e4       	ldi	r21, 0x47	; 71
    1cf0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1cf4:	18 16       	cp	r1, r24
    1cf6:	4c f5       	brge	.+82     	; 0x1d4a <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf8:	6f a1       	ldd	r22, Y+39	; 0x27
    1cfa:	78 a5       	ldd	r23, Y+40	; 0x28
    1cfc:	89 a5       	ldd	r24, Y+41	; 0x29
    1cfe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	40 e2       	ldi	r20, 0x20	; 32
    1d06:	51 e4       	ldi	r21, 0x41	; 65
    1d08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	bc 01       	movw	r22, r24
    1d12:	cd 01       	movw	r24, r26
    1d14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	9a a3       	std	Y+34, r25	; 0x22
    1d1e:	89 a3       	std	Y+33, r24	; 0x21
    1d20:	0f c0       	rjmp	.+30     	; 0x1d40 <LCD_displayCharacter+0x1c0>
    1d22:	80 e9       	ldi	r24, 0x90	; 144
    1d24:	91 e0       	ldi	r25, 0x01	; 1
    1d26:	98 a3       	std	Y+32, r25	; 0x20
    1d28:	8f 8f       	std	Y+31, r24	; 0x1f
    1d2a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d2c:	98 a1       	ldd	r25, Y+32	; 0x20
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <LCD_displayCharacter+0x1ae>
    1d32:	98 a3       	std	Y+32, r25	; 0x20
    1d34:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d36:	89 a1       	ldd	r24, Y+33	; 0x21
    1d38:	9a a1       	ldd	r25, Y+34	; 0x22
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	9a a3       	std	Y+34, r25	; 0x22
    1d3e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d40:	89 a1       	ldd	r24, Y+33	; 0x21
    1d42:	9a a1       	ldd	r25, Y+34	; 0x22
    1d44:	00 97       	sbiw	r24, 0x00	; 0
    1d46:	69 f7       	brne	.-38     	; 0x1d22 <LCD_displayCharacter+0x1a2>
    1d48:	14 c0       	rjmp	.+40     	; 0x1d72 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d4c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d4e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d50:	9e a1       	ldd	r25, Y+38	; 0x26
    1d52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	9a a3       	std	Y+34, r25	; 0x22
    1d5c:	89 a3       	std	Y+33, r24	; 0x21
    1d5e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d60:	9a a1       	ldd	r25, Y+34	; 0x22
    1d62:	9e 8f       	std	Y+30, r25	; 0x1e
    1d64:	8d 8f       	std	Y+29, r24	; 0x1d
    1d66:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d68:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	f1 f7       	brne	.-4      	; 0x1d6a <LCD_displayCharacter+0x1ea>
    1d6e:	9e 8f       	std	Y+30, r25	; 0x1e
    1d70:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1d72:	82 e0       	ldi	r24, 0x02	; 2
    1d74:	69 ad       	ldd	r22, Y+57	; 0x39
    1d76:	0e 94 ac 0a 	call	0x1558	; 0x1558 <GPIO_writePort>
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	a0 e8       	ldi	r26, 0x80	; 128
    1d80:	bf e3       	ldi	r27, 0x3F	; 63
    1d82:	89 8f       	std	Y+25, r24	; 0x19
    1d84:	9a 8f       	std	Y+26, r25	; 0x1a
    1d86:	ab 8f       	std	Y+27, r26	; 0x1b
    1d88:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	4a e7       	ldi	r20, 0x7A	; 122
    1d98:	55 e4       	ldi	r21, 0x45	; 69
    1d9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	8d 8b       	std	Y+21, r24	; 0x15
    1da4:	9e 8b       	std	Y+22, r25	; 0x16
    1da6:	af 8b       	std	Y+23, r26	; 0x17
    1da8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1daa:	6d 89       	ldd	r22, Y+21	; 0x15
    1dac:	7e 89       	ldd	r23, Y+22	; 0x16
    1dae:	8f 89       	ldd	r24, Y+23	; 0x17
    1db0:	98 8d       	ldd	r25, Y+24	; 0x18
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	40 e8       	ldi	r20, 0x80	; 128
    1db8:	5f e3       	ldi	r21, 0x3F	; 63
    1dba:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1dbe:	88 23       	and	r24, r24
    1dc0:	2c f4       	brge	.+10     	; 0x1dcc <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	9c 8b       	std	Y+20, r25	; 0x14
    1dc8:	8b 8b       	std	Y+19, r24	; 0x13
    1dca:	3f c0       	rjmp	.+126    	; 0x1e4a <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1dcc:	6d 89       	ldd	r22, Y+21	; 0x15
    1dce:	7e 89       	ldd	r23, Y+22	; 0x16
    1dd0:	8f 89       	ldd	r24, Y+23	; 0x17
    1dd2:	98 8d       	ldd	r25, Y+24	; 0x18
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	3f ef       	ldi	r19, 0xFF	; 255
    1dd8:	4f e7       	ldi	r20, 0x7F	; 127
    1dda:	57 e4       	ldi	r21, 0x47	; 71
    1ddc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1de0:	18 16       	cp	r1, r24
    1de2:	4c f5       	brge	.+82     	; 0x1e36 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de4:	69 8d       	ldd	r22, Y+25	; 0x19
    1de6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1de8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	40 e2       	ldi	r20, 0x20	; 32
    1df2:	51 e4       	ldi	r21, 0x41	; 65
    1df4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	bc 01       	movw	r22, r24
    1dfe:	cd 01       	movw	r24, r26
    1e00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	9c 8b       	std	Y+20, r25	; 0x14
    1e0a:	8b 8b       	std	Y+19, r24	; 0x13
    1e0c:	0f c0       	rjmp	.+30     	; 0x1e2c <LCD_displayCharacter+0x2ac>
    1e0e:	80 e9       	ldi	r24, 0x90	; 144
    1e10:	91 e0       	ldi	r25, 0x01	; 1
    1e12:	9a 8b       	std	Y+18, r25	; 0x12
    1e14:	89 8b       	std	Y+17, r24	; 0x11
    1e16:	89 89       	ldd	r24, Y+17	; 0x11
    1e18:	9a 89       	ldd	r25, Y+18	; 0x12
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	f1 f7       	brne	.-4      	; 0x1e1a <LCD_displayCharacter+0x29a>
    1e1e:	9a 8b       	std	Y+18, r25	; 0x12
    1e20:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e22:	8b 89       	ldd	r24, Y+19	; 0x13
    1e24:	9c 89       	ldd	r25, Y+20	; 0x14
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	9c 8b       	std	Y+20, r25	; 0x14
    1e2a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e30:	00 97       	sbiw	r24, 0x00	; 0
    1e32:	69 f7       	brne	.-38     	; 0x1e0e <LCD_displayCharacter+0x28e>
    1e34:	14 c0       	rjmp	.+40     	; 0x1e5e <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e36:	6d 89       	ldd	r22, Y+21	; 0x15
    1e38:	7e 89       	ldd	r23, Y+22	; 0x16
    1e3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	9c 8b       	std	Y+20, r25	; 0x14
    1e48:	8b 8b       	std	Y+19, r24	; 0x13
    1e4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e4e:	98 8b       	std	Y+16, r25	; 0x10
    1e50:	8f 87       	std	Y+15, r24	; 0x0f
    1e52:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e54:	98 89       	ldd	r25, Y+16	; 0x10
    1e56:	01 97       	sbiw	r24, 0x01	; 1
    1e58:	f1 f7       	brne	.-4      	; 0x1e56 <LCD_displayCharacter+0x2d6>
    1e5a:	98 8b       	std	Y+16, r25	; 0x10
    1e5c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1e5e:	83 e0       	ldi	r24, 0x03	; 3
    1e60:	61 e0       	ldi	r22, 0x01	; 1
    1e62:	40 e0       	ldi	r20, 0x00	; 0
    1e64:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	a0 e8       	ldi	r26, 0x80	; 128
    1e6e:	bf e3       	ldi	r27, 0x3F	; 63
    1e70:	8b 87       	std	Y+11, r24	; 0x0b
    1e72:	9c 87       	std	Y+12, r25	; 0x0c
    1e74:	ad 87       	std	Y+13, r26	; 0x0d
    1e76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	4a e7       	ldi	r20, 0x7A	; 122
    1e86:	55 e4       	ldi	r21, 0x45	; 69
    1e88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	8f 83       	std	Y+7, r24	; 0x07
    1e92:	98 87       	std	Y+8, r25	; 0x08
    1e94:	a9 87       	std	Y+9, r26	; 0x09
    1e96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e98:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9a:	78 85       	ldd	r23, Y+8	; 0x08
    1e9c:	89 85       	ldd	r24, Y+9	; 0x09
    1e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e8       	ldi	r20, 0x80	; 128
    1ea6:	5f e3       	ldi	r21, 0x3F	; 63
    1ea8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1eac:	88 23       	and	r24, r24
    1eae:	2c f4       	brge	.+10     	; 0x1eba <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	9e 83       	std	Y+6, r25	; 0x06
    1eb6:	8d 83       	std	Y+5, r24	; 0x05
    1eb8:	3f c0       	rjmp	.+126    	; 0x1f38 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1eba:	6f 81       	ldd	r22, Y+7	; 0x07
    1ebc:	78 85       	ldd	r23, Y+8	; 0x08
    1ebe:	89 85       	ldd	r24, Y+9	; 0x09
    1ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	3f ef       	ldi	r19, 0xFF	; 255
    1ec6:	4f e7       	ldi	r20, 0x7F	; 127
    1ec8:	57 e4       	ldi	r21, 0x47	; 71
    1eca:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ece:	18 16       	cp	r1, r24
    1ed0:	4c f5       	brge	.+82     	; 0x1f24 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e2       	ldi	r20, 0x20	; 32
    1ee0:	51 e4       	ldi	r21, 0x41	; 65
    1ee2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	bc 01       	movw	r22, r24
    1eec:	cd 01       	movw	r24, r26
    1eee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	9e 83       	std	Y+6, r25	; 0x06
    1ef8:	8d 83       	std	Y+5, r24	; 0x05
    1efa:	0f c0       	rjmp	.+30     	; 0x1f1a <LCD_displayCharacter+0x39a>
    1efc:	80 e9       	ldi	r24, 0x90	; 144
    1efe:	91 e0       	ldi	r25, 0x01	; 1
    1f00:	9c 83       	std	Y+4, r25	; 0x04
    1f02:	8b 83       	std	Y+3, r24	; 0x03
    1f04:	8b 81       	ldd	r24, Y+3	; 0x03
    1f06:	9c 81       	ldd	r25, Y+4	; 0x04
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <LCD_displayCharacter+0x388>
    1f0c:	9c 83       	std	Y+4, r25	; 0x04
    1f0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f10:	8d 81       	ldd	r24, Y+5	; 0x05
    1f12:	9e 81       	ldd	r25, Y+6	; 0x06
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	9e 83       	std	Y+6, r25	; 0x06
    1f18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1e:	00 97       	sbiw	r24, 0x00	; 0
    1f20:	69 f7       	brne	.-38     	; 0x1efc <LCD_displayCharacter+0x37c>
    1f22:	14 c0       	rjmp	.+40     	; 0x1f4c <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f24:	6f 81       	ldd	r22, Y+7	; 0x07
    1f26:	78 85       	ldd	r23, Y+8	; 0x08
    1f28:	89 85       	ldd	r24, Y+9	; 0x09
    1f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	9e 83       	std	Y+6, r25	; 0x06
    1f36:	8d 83       	std	Y+5, r24	; 0x05
    1f38:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3c:	9a 83       	std	Y+2, r25	; 0x02
    1f3e:	89 83       	std	Y+1, r24	; 0x01
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	9a 81       	ldd	r25, Y+2	; 0x02
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	f1 f7       	brne	.-4      	; 0x1f44 <LCD_displayCharacter+0x3c4>
    1f48:	9a 83       	std	Y+2, r25	; 0x02
    1f4a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1f4c:	e9 96       	adiw	r28, 0x39	; 57
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	de bf       	out	0x3e, r29	; 62
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	cd bf       	out	0x3d, r28	; 61
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	00 d0       	rcall	.+0      	; 0x1f64 <LCD_displayString+0x6>
    1f64:	0f 92       	push	r0
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
    1f6a:	9b 83       	std	Y+3, r25	; 0x03
    1f6c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1f6e:	19 82       	std	Y+1, r1	; 0x01
    1f70:	0e c0       	rjmp	.+28     	; 0x1f8e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	28 2f       	mov	r18, r24
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	e2 0f       	add	r30, r18
    1f80:	f3 1f       	adc	r31, r19
    1f82:	80 81       	ld	r24, Z
    1f84:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <LCD_displayCharacter>
		i++;
    1f88:	89 81       	ldd	r24, Y+1	; 0x01
    1f8a:	8f 5f       	subi	r24, 0xFF	; 255
    1f8c:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
    1f90:	28 2f       	mov	r18, r24
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	8a 81       	ldd	r24, Y+2	; 0x02
    1f96:	9b 81       	ldd	r25, Y+3	; 0x03
    1f98:	fc 01       	movw	r30, r24
    1f9a:	e2 0f       	add	r30, r18
    1f9c:	f3 1f       	adc	r31, r19
    1f9e:	80 81       	ld	r24, Z
    1fa0:	88 23       	and	r24, r24
    1fa2:	39 f7       	brne	.-50     	; 0x1f72 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	cf 91       	pop	r28
    1fac:	df 91       	pop	r29
    1fae:	08 95       	ret

00001fb0 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1fb0:	df 93       	push	r29
    1fb2:	cf 93       	push	r28
    1fb4:	00 d0       	rcall	.+0      	; 0x1fb6 <LCD_moveCursor+0x6>
    1fb6:	00 d0       	rcall	.+0      	; 0x1fb8 <LCD_moveCursor+0x8>
    1fb8:	0f 92       	push	r0
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	8a 83       	std	Y+2, r24	; 0x02
    1fc0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	28 2f       	mov	r18, r24
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	3d 83       	std	Y+5, r19	; 0x05
    1fca:	2c 83       	std	Y+4, r18	; 0x04
    1fcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1fce:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd0:	81 30       	cpi	r24, 0x01	; 1
    1fd2:	91 05       	cpc	r25, r1
    1fd4:	c1 f0       	breq	.+48     	; 0x2006 <LCD_moveCursor+0x56>
    1fd6:	2c 81       	ldd	r18, Y+4	; 0x04
    1fd8:	3d 81       	ldd	r19, Y+5	; 0x05
    1fda:	22 30       	cpi	r18, 0x02	; 2
    1fdc:	31 05       	cpc	r19, r1
    1fde:	2c f4       	brge	.+10     	; 0x1fea <LCD_moveCursor+0x3a>
    1fe0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	61 f0       	breq	.+24     	; 0x2000 <LCD_moveCursor+0x50>
    1fe8:	19 c0       	rjmp	.+50     	; 0x201c <LCD_moveCursor+0x6c>
    1fea:	2c 81       	ldd	r18, Y+4	; 0x04
    1fec:	3d 81       	ldd	r19, Y+5	; 0x05
    1fee:	22 30       	cpi	r18, 0x02	; 2
    1ff0:	31 05       	cpc	r19, r1
    1ff2:	69 f0       	breq	.+26     	; 0x200e <LCD_moveCursor+0x5e>
    1ff4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff8:	83 30       	cpi	r24, 0x03	; 3
    1ffa:	91 05       	cpc	r25, r1
    1ffc:	61 f0       	breq	.+24     	; 0x2016 <LCD_moveCursor+0x66>
    1ffe:	0e c0       	rjmp	.+28     	; 0x201c <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2000:	8b 81       	ldd	r24, Y+3	; 0x03
    2002:	89 83       	std	Y+1, r24	; 0x01
    2004:	0b c0       	rjmp	.+22     	; 0x201c <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2006:	8b 81       	ldd	r24, Y+3	; 0x03
    2008:	80 5c       	subi	r24, 0xC0	; 192
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	07 c0       	rjmp	.+14     	; 0x201c <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    200e:	8b 81       	ldd	r24, Y+3	; 0x03
    2010:	80 5f       	subi	r24, 0xF0	; 240
    2012:	89 83       	std	Y+1, r24	; 0x01
    2014:	03 c0       	rjmp	.+6      	; 0x201c <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	80 5b       	subi	r24, 0xB0	; 176
    201a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    201c:	89 81       	ldd	r24, Y+1	; 0x01
    201e:	80 68       	ori	r24, 0x80	; 128
    2020:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <LCD_sendCommand>
}
    2024:	0f 90       	pop	r0
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	0f 90       	pop	r0
    202e:	cf 91       	pop	r28
    2030:	df 91       	pop	r29
    2032:	08 95       	ret

00002034 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2034:	df 93       	push	r29
    2036:	cf 93       	push	r28
    2038:	00 d0       	rcall	.+0      	; 0x203a <LCD_displayStringRowColumn+0x6>
    203a:	00 d0       	rcall	.+0      	; 0x203c <LCD_displayStringRowColumn+0x8>
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	89 83       	std	Y+1, r24	; 0x01
    2042:	6a 83       	std	Y+2, r22	; 0x02
    2044:	5c 83       	std	Y+4, r21	; 0x04
    2046:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	6a 81       	ldd	r22, Y+2	; 0x02
    204c:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2050:	8b 81       	ldd	r24, Y+3	; 0x03
    2052:	9c 81       	ldd	r25, Y+4	; 0x04
    2054:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
}
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	0f 90       	pop	r0
    205e:	0f 90       	pop	r0
    2060:	cf 91       	pop	r28
    2062:	df 91       	pop	r29
    2064:	08 95       	ret

00002066 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2066:	df 93       	push	r29
    2068:	cf 93       	push	r28
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
    206e:	62 97       	sbiw	r28, 0x12	; 18
    2070:	0f b6       	in	r0, 0x3f	; 63
    2072:	f8 94       	cli
    2074:	de bf       	out	0x3e, r29	; 62
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	cd bf       	out	0x3d, r28	; 61
    207a:	9a 8b       	std	Y+18, r25	; 0x12
    207c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    207e:	89 89       	ldd	r24, Y+17	; 0x11
    2080:	9a 89       	ldd	r25, Y+18	; 0x12
    2082:	9e 01       	movw	r18, r28
    2084:	2f 5f       	subi	r18, 0xFF	; 255
    2086:	3f 4f       	sbci	r19, 0xFF	; 255
    2088:	b9 01       	movw	r22, r18
    208a:	4a e0       	ldi	r20, 0x0A	; 10
    208c:	50 e0       	ldi	r21, 0x00	; 0
    208e:	0e 94 0e 13 	call	0x261c	; 0x261c <itoa>
   LCD_displayString(buff); /* Display the string */
    2092:	ce 01       	movw	r24, r28
    2094:	01 96       	adiw	r24, 0x01	; 1
    2096:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
}
    209a:	62 96       	adiw	r28, 0x12	; 18
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	de bf       	out	0x3e, r29	; 62
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	cd bf       	out	0x3d, r28	; 61
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <LCD_sendCommand>
}
    20ba:	cf 91       	pop	r28
    20bc:	df 91       	pop	r29
    20be:	08 95       	ret

000020c0 <LDR_getLightIntensity>:
/*
 * Description :
 * Function responsible for calculate the Light intensity from the ADC digital value.
 */
uint16 LDR_getLightIntensity(void)
{
    20c0:	df 93       	push	r29
    20c2:	cf 93       	push	r28
    20c4:	00 d0       	rcall	.+0      	; 0x20c6 <LDR_getLightIntensity+0x6>
    20c6:	00 d0       	rcall	.+0      	; 0x20c8 <LDR_getLightIntensity+0x8>
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
	/*Variable to store the calculated light intensity*/
	uint16 Light_value = 0;
    20cc:	1c 82       	std	Y+4, r1	; 0x04
    20ce:	1b 82       	std	Y+3, r1	; 0x03
	/*Variable to store the raw ADC value*/
	uint16 adc_value = 0;
    20d0:	1a 82       	std	Y+2, r1	; 0x02
    20d2:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the LDR sensor is connected */
	adc_value = ADC_readChannel(LDR_SENSOR_CHANNEL_ID);
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	0e 94 1e 07 	call	0xe3c	; 0xe3c <ADC_readChannel>
    20da:	9a 83       	std	Y+2, r25	; 0x02
    20dc:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	Light_value = (uint16)(((uint32)adc_value*LDR_SENSOR_MAX_LIGHT_INTENSITY*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*LDR_SENSOR_MAX_VOLT_VALUE));
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	9a 81       	ldd	r25, Y+2	; 0x02
    20e2:	cc 01       	movw	r24, r24
    20e4:	a0 e0       	ldi	r26, 0x00	; 0
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	24 e6       	ldi	r18, 0x64	; 100
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	40 e0       	ldi	r20, 0x00	; 0
    20ee:	50 e0       	ldi	r21, 0x00	; 0
    20f0:	bc 01       	movw	r22, r24
    20f2:	cd 01       	movw	r24, r26
    20f4:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsi3>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	bc 01       	movw	r22, r24
    20fe:	cd 01       	movw	r24, r26
    2100:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	bc 01       	movw	r22, r24
    210a:	cd 01       	movw	r24, r26
    210c:	2a e0       	ldi	r18, 0x0A	; 10
    210e:	37 ed       	ldi	r19, 0xD7	; 215
    2110:	43 e2       	ldi	r20, 0x23	; 35
    2112:	50 e4       	ldi	r21, 0x40	; 64
    2114:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	bc 01       	movw	r22, r24
    211e:	cd 01       	movw	r24, r26
    2120:	24 e1       	ldi	r18, 0x14	; 20
    2122:	3e ea       	ldi	r19, 0xAE	; 174
    2124:	43 e2       	ldi	r20, 0x23	; 35
    2126:	55 e4       	ldi	r21, 0x45	; 69
    2128:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	bc 01       	movw	r22, r24
    2132:	cd 01       	movw	r24, r26
    2134:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	9c 83       	std	Y+4, r25	; 0x04
    213e:	8b 83       	std	Y+3, r24	; 0x03

	return Light_value;
    2140:	8b 81       	ldd	r24, Y+3	; 0x03
    2142:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2144:	0f 90       	pop	r0
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	0f 90       	pop	r0
    214c:	cf 91       	pop	r28
    214e:	df 91       	pop	r29
    2150:	08 95       	ret

00002152 <LEDS_init>:
/*
 * Description :
 * Function responsible for initializing the LED driver by setting up the
 * direction of the LED pins and turning off all LEDs initially.
 */
void LEDS_init() {
    2152:	df 93       	push	r29
    2154:	cf 93       	push	r28
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
	// Set the direction of the LED pins to output
	GPIO_setupPinDirection(RED_LED_PORT, RED_LED_PIN, PIN_OUTPUT);
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	65 e0       	ldi	r22, 0x05	; 5
    215e:	41 e0       	ldi	r20, 0x01	; 1
    2160:	0e 94 f7 07 	call	0xfee	; 0xfee <GPIO_setupPinDirection>
	GPIO_setupPinDirection(GREEN_LED_PORT, GREEN_LED_PIN, PIN_OUTPUT);
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	66 e0       	ldi	r22, 0x06	; 6
    2168:	41 e0       	ldi	r20, 0x01	; 1
    216a:	0e 94 f7 07 	call	0xfee	; 0xfee <GPIO_setupPinDirection>
	GPIO_setupPinDirection(BLUE_LED_PORT, BLUE_LED_PIN, PIN_OUTPUT);
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	67 e0       	ldi	r22, 0x07	; 7
    2172:	41 e0       	ldi	r20, 0x01	; 1
    2174:	0e 94 f7 07 	call	0xfee	; 0xfee <GPIO_setupPinDirection>

	// Turn off all LEDs initially
	GPIO_writePin(RED_LED_PORT, RED_LED_PIN, LOGIC_LOW); // Turn off the red LED
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	65 e0       	ldi	r22, 0x05	; 5
    217c:	40 e0       	ldi	r20, 0x00	; 0
    217e:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
	GPIO_writePin(GREEN_LED_PORT, GREEN_LED_PIN, LOGIC_LOW); // Turn off the green LED
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	66 e0       	ldi	r22, 0x06	; 6
    2186:	40 e0       	ldi	r20, 0x00	; 0
    2188:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
	GPIO_writePin(BLUE_LED_PORT, BLUE_LED_PIN, LOGIC_LOW); // Turn off the blue LED
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	67 e0       	ldi	r22, 0x07	; 7
    2190:	40 e0       	ldi	r20, 0x00	; 0
    2192:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
}
    2196:	cf 91       	pop	r28
    2198:	df 91       	pop	r29
    219a:	08 95       	ret

0000219c <LED_on>:

void LED_on(LED_ID id) {
    219c:	df 93       	push	r29
    219e:	cf 93       	push	r28
    21a0:	00 d0       	rcall	.+0      	; 0x21a2 <LED_on+0x6>
    21a2:	0f 92       	push	r0
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
    21a8:	89 83       	std	Y+1, r24	; 0x01
	if (LED_LOGIC == POSITIVE_LOGIC) { // Check if positive logic is used
		// Turn on the LED by setting the corresponding pin high
		switch (id) {
    21aa:	89 81       	ldd	r24, Y+1	; 0x01
    21ac:	28 2f       	mov	r18, r24
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	3b 83       	std	Y+3, r19	; 0x03
    21b2:	2a 83       	std	Y+2, r18	; 0x02
    21b4:	8a 81       	ldd	r24, Y+2	; 0x02
    21b6:	9b 81       	ldd	r25, Y+3	; 0x03
    21b8:	81 30       	cpi	r24, 0x01	; 1
    21ba:	91 05       	cpc	r25, r1
    21bc:	79 f0       	breq	.+30     	; 0x21dc <LED_on+0x40>
    21be:	2a 81       	ldd	r18, Y+2	; 0x02
    21c0:	3b 81       	ldd	r19, Y+3	; 0x03
    21c2:	22 30       	cpi	r18, 0x02	; 2
    21c4:	31 05       	cpc	r19, r1
    21c6:	81 f0       	breq	.+32     	; 0x21e8 <LED_on+0x4c>
    21c8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ca:	9b 81       	ldd	r25, Y+3	; 0x03
    21cc:	00 97       	sbiw	r24, 0x00	; 0
    21ce:	89 f4       	brne	.+34     	; 0x21f2 <LED_on+0x56>
		case RED_LED:
			GPIO_writePin(RED_LED_PORT, RED_LED_PIN, LOGIC_HIGH); // Turn on the red LED
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	65 e0       	ldi	r22, 0x05	; 5
    21d4:	41 e0       	ldi	r20, 0x01	; 1
    21d6:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
    21da:	0b c0       	rjmp	.+22     	; 0x21f2 <LED_on+0x56>
			break;
		case GREEN_LED:
			GPIO_writePin(GREEN_LED_PORT, GREEN_LED_PIN, LOGIC_HIGH); // Turn on the green LED
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	66 e0       	ldi	r22, 0x06	; 6
    21e0:	41 e0       	ldi	r20, 0x01	; 1
    21e2:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
    21e6:	05 c0       	rjmp	.+10     	; 0x21f2 <LED_on+0x56>
			break;
		case BLUE_LED:
			GPIO_writePin(BLUE_LED_PORT, BLUE_LED_PIN, LOGIC_HIGH); // Turn on the blue LED
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	67 e0       	ldi	r22, 0x07	; 7
    21ec:	41 e0       	ldi	r20, 0x01	; 1
    21ee:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
		case BLUE_LED:
			GPIO_writePin(BLUE_LED_PORT, BLUE_LED_PIN, LOGIC_LOW); // Turn on the blue LED
			break;
		}
	}
}
    21f2:	0f 90       	pop	r0
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	cf 91       	pop	r28
    21fa:	df 91       	pop	r29
    21fc:	08 95       	ret

000021fe <LED_off>:

/*
 * Description :
 * Function responsible for turning off the specified LED based on its ID.
 */
void LED_off(LED_ID id) {
    21fe:	df 93       	push	r29
    2200:	cf 93       	push	r28
    2202:	00 d0       	rcall	.+0      	; 0x2204 <LED_off+0x6>
    2204:	0f 92       	push	r0
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
    220a:	89 83       	std	Y+1, r24	; 0x01
	if (LED_LOGIC == POSITIVE_LOGIC) { // Check if positive logic is used
		// Turn off the LED by setting the corresponding pin low
		switch (id) {
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	28 2f       	mov	r18, r24
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	3b 83       	std	Y+3, r19	; 0x03
    2214:	2a 83       	std	Y+2, r18	; 0x02
    2216:	8a 81       	ldd	r24, Y+2	; 0x02
    2218:	9b 81       	ldd	r25, Y+3	; 0x03
    221a:	81 30       	cpi	r24, 0x01	; 1
    221c:	91 05       	cpc	r25, r1
    221e:	79 f0       	breq	.+30     	; 0x223e <LED_off+0x40>
    2220:	2a 81       	ldd	r18, Y+2	; 0x02
    2222:	3b 81       	ldd	r19, Y+3	; 0x03
    2224:	22 30       	cpi	r18, 0x02	; 2
    2226:	31 05       	cpc	r19, r1
    2228:	81 f0       	breq	.+32     	; 0x224a <LED_off+0x4c>
    222a:	8a 81       	ldd	r24, Y+2	; 0x02
    222c:	9b 81       	ldd	r25, Y+3	; 0x03
    222e:	00 97       	sbiw	r24, 0x00	; 0
    2230:	89 f4       	brne	.+34     	; 0x2254 <LED_off+0x56>
		case RED_LED:
			GPIO_writePin(RED_LED_PORT, RED_LED_PIN, LOGIC_LOW); // Turn off the red LED
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	65 e0       	ldi	r22, 0x05	; 5
    2236:	40 e0       	ldi	r20, 0x00	; 0
    2238:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
    223c:	0b c0       	rjmp	.+22     	; 0x2254 <LED_off+0x56>
			break;
		case GREEN_LED:
			GPIO_writePin(GREEN_LED_PORT, GREEN_LED_PIN, LOGIC_LOW); // Turn off the green LED
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	66 e0       	ldi	r22, 0x06	; 6
    2242:	40 e0       	ldi	r20, 0x00	; 0
    2244:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
    2248:	05 c0       	rjmp	.+10     	; 0x2254 <LED_off+0x56>
			break;
		case BLUE_LED:
			GPIO_writePin(BLUE_LED_PORT, BLUE_LED_PIN, LOGIC_LOW); // Turn off the blue LED
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	67 e0       	ldi	r22, 0x07	; 7
    224e:	40 e0       	ldi	r20, 0x00	; 0
    2250:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
		case BLUE_LED:
			GPIO_writePin(BLUE_LED_PORT, BLUE_LED_PIN, LOGIC_HIGH); // Turn off the blue LED
			break;
		}
	}
}
    2254:	0f 90       	pop	r0
    2256:	0f 90       	pop	r0
    2258:	0f 90       	pop	r0
    225a:	cf 91       	pop	r28
    225c:	df 91       	pop	r29
    225e:	08 95       	ret

00002260 <LM35_getTemperature>:
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint8 LM35_getTemperature(void)
{
    2260:	df 93       	push	r29
    2262:	cf 93       	push	r28
    2264:	00 d0       	rcall	.+0      	; 0x2266 <LM35_getTemperature+0x6>
    2266:	0f 92       	push	r0
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value = 0;
    226c:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adc_value = 0;
    226e:	1a 82       	std	Y+2, r1	; 0x02
    2270:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	0e 94 1e 07 	call	0xe3c	; 0xe3c <ADC_readChannel>
    2278:	9a 83       	std	Y+2, r25	; 0x02
    227a:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    227c:	89 81       	ldd	r24, Y+1	; 0x01
    227e:	9a 81       	ldd	r25, Y+2	; 0x02
    2280:	cc 01       	movw	r24, r24
    2282:	a0 e0       	ldi	r26, 0x00	; 0
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	26 e9       	ldi	r18, 0x96	; 150
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e0       	ldi	r20, 0x00	; 0
    228c:	50 e0       	ldi	r21, 0x00	; 0
    228e:	bc 01       	movw	r22, r24
    2290:	cd 01       	movw	r24, r26
    2292:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsi3>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	bc 01       	movw	r22, r24
    229c:	cd 01       	movw	r24, r26
    229e:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	bc 01       	movw	r22, r24
    22a8:	cd 01       	movw	r24, r26
    22aa:	2a e0       	ldi	r18, 0x0A	; 10
    22ac:	37 ed       	ldi	r19, 0xD7	; 215
    22ae:	43 e2       	ldi	r20, 0x23	; 35
    22b0:	50 e4       	ldi	r21, 0x40	; 64
    22b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	bc 01       	movw	r22, r24
    22bc:	cd 01       	movw	r24, r26
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 ed       	ldi	r19, 0xD0	; 208
    22c2:	4f eb       	ldi	r20, 0xBF	; 191
    22c4:	54 e4       	ldi	r21, 0x44	; 68
    22c6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	bc 01       	movw	r22, r24
    22d0:	cd 01       	movw	r24, r26
    22d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	8b 83       	std	Y+3, r24	; 0x03

	return temp_value;
    22dc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	0f 90       	pop	r0
    22e4:	cf 91       	pop	r28
    22e6:	df 91       	pop	r29
    22e8:	08 95       	ret

000022ea <Timer0_init_PWM>:
#include "Timer0_PWM.h"
#include "common_macros.h"
#include "std_types.h"
#include <avr/io.h>

void Timer0_init_PWM() {
    22ea:	df 93       	push	r29
    22ec:	cf 93       	push	r28
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62

	/* Initialize Timer0 counter to 0 */
	TCNT0 = 0;
    22f2:	e2 e5       	ldi	r30, 0x52	; 82
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	10 82       	st	Z, r1

	/* Set PB3/OC0 as output pin -> pin where the PWM signal is generated from MC */
	DDRB |= (1 << PWM_OUTPUT_PIN);
    22f8:	a7 e3       	ldi	r26, 0x37	; 55
    22fa:	b0 e0       	ldi	r27, 0x00	; 0
    22fc:	e7 e3       	ldi	r30, 0x37	; 55
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	80 81       	ld	r24, Z
    2302:	88 60       	ori	r24, 0x08	; 8
    2304:	8c 93       	st	X, r24

	/* Configure Timer0 for Fast PWM mode and set prescaler to 1024 */

	/* Set WGM00, WGM01 bits for Fast PWM mode */
	TCCR0 |= (1 << WGM00) | (1 << WGM01);
    2306:	a3 e5       	ldi	r26, 0x53	; 83
    2308:	b0 e0       	ldi	r27, 0x00	; 0
    230a:	e3 e5       	ldi	r30, 0x53	; 83
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	80 81       	ld	r24, Z
    2310:	88 64       	ori	r24, 0x48	; 72
    2312:	8c 93       	st	X, r24

	/* Clear OC0 on Compare Match (non-inverted mode) */
	TCCR0 |= (1 << COM01);
    2314:	a3 e5       	ldi	r26, 0x53	; 83
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	e3 e5       	ldi	r30, 0x53	; 83
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
    231e:	80 62       	ori	r24, 0x20	; 32
    2320:	8c 93       	st	X, r24

	/* Set CS00, CS02 bits for prescaler = 1024 */
	TCCR0 |= (1 << CS00) | (1 << CS02);
    2322:	a3 e5       	ldi	r26, 0x53	; 83
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	e3 e5       	ldi	r30, 0x53	; 83
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	85 60       	ori	r24, 0x05	; 5
    232e:	8c 93       	st	X, r24
}
    2330:	cf 91       	pop	r28
    2332:	df 91       	pop	r29
    2334:	08 95       	ret

00002336 <PWM_Set_Duty_Cycle>:
void PWM_Set_Duty_Cycle(uint8 duty_cycle) {
    2336:	df 93       	push	r29
    2338:	cf 93       	push	r28
    233a:	0f 92       	push	r0
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
    2340:	89 83       	std	Y+1, r24	; 0x01

	/*Set the Output Compare Register with duty cycle*/

	/** Set the duty cycle */

	if (duty_cycle > 100) {
    2342:	89 81       	ldd	r24, Y+1	; 0x01
    2344:	85 36       	cpi	r24, 0x65	; 101
    2346:	10 f0       	brcs	.+4      	; 0x234c <PWM_Set_Duty_Cycle+0x16>
		duty_cycle = 100; /*Cap the duty cycle to 100%*/
    2348:	84 e6       	ldi	r24, 0x64	; 100
    234a:	89 83       	std	Y+1, r24	; 0x01
	}

	OCR0 = (uint8)(((uint16) duty_cycle * 255) / 100); /*Convert percentage to OCR value (0-255)*/
    234c:	ec e5       	ldi	r30, 0x5C	; 92
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	48 2f       	mov	r20, r24
    2354:	50 e0       	ldi	r21, 0x00	; 0
    2356:	ca 01       	movw	r24, r20
    2358:	9c 01       	movw	r18, r24
    235a:	22 0f       	add	r18, r18
    235c:	33 1f       	adc	r19, r19
    235e:	c9 01       	movw	r24, r18
    2360:	96 95       	lsr	r25
    2362:	98 2f       	mov	r25, r24
    2364:	88 27       	eor	r24, r24
    2366:	97 95       	ror	r25
    2368:	87 95       	ror	r24
    236a:	82 1b       	sub	r24, r18
    236c:	93 0b       	sbc	r25, r19
    236e:	84 0f       	add	r24, r20
    2370:	95 1f       	adc	r25, r21
    2372:	24 e6       	ldi	r18, 0x64	; 100
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	b9 01       	movw	r22, r18
    2378:	0e 94 c3 12 	call	0x2586	; 0x2586 <__udivmodhi4>
    237c:	cb 01       	movw	r24, r22
    237e:	80 83       	st	Z, r24
}
    2380:	0f 90       	pop	r0
    2382:	cf 91       	pop	r28
    2384:	df 91       	pop	r29
    2386:	08 95       	ret

00002388 <main>:
#include "LED.h"
#include "LDR.h"
#include "Flame_Sensor.h"
#include "Buzzer.h"

int main() {
    2388:	df 93       	push	r29
    238a:	cf 93       	push	r28
    238c:	00 d0       	rcall	.+0      	; 0x238e <main+0x6>
    238e:	00 d0       	rcall	.+0      	; 0x2390 <main+0x8>
    2390:	cd b7       	in	r28, 0x3d	; 61
    2392:	de b7       	in	r29, 0x3e	; 62
	/* Variable to store the temperature value read from the sensor */
	uint8 Temp_Value = 0;
    2394:	1b 82       	std	Y+3, r1	; 0x03
	volatile uint8 Flame_detect = 0;
    2396:	1c 82       	std	Y+4, r1	; 0x04
	uint16 Light_value = 0;
    2398:	1a 82       	std	Y+2, r1	; 0x02
    239a:	19 82       	std	Y+1, r1	; 0x01

	/* Initialize the ADC to read analog values from the sensor */
	ADC_init();
    239c:	0e 94 0f 07 	call	0xe1e	; 0xe1e <ADC_init>

	/* Initialize Timer0 for PWM to control the motor speed */
	Timer0_init_PWM();
    23a0:	0e 94 75 11 	call	0x22ea	; 0x22ea <Timer0_init_PWM>

	/* Initialize the DC Motor for fan control */
	DC_Motor_Init();
    23a4:	0e 94 7e 07 	call	0xefc	; 0xefc <DC_Motor_Init>

	/* Initialize the LCD display */
	LCD_init();
    23a8:	0e 94 35 0b 	call	0x166a	; 0x166a <LCD_init>

	/* Clear the LCD screen before starting */
	LCD_clearScreen();
    23ac:	0e 94 56 10 	call	0x20ac	; 0x20ac <LCD_clearScreen>

	/* Initialize the LED driver */
	LEDS_init();
    23b0:	0e 94 a9 10 	call	0x2152	; 0x2152 <LEDS_init>

	/* Initialize the FLAME_SESNOR driver */
	FlameSensor_init();
    23b4:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <FlameSensor_init>

	/* Initialize the Buzzer driver */
	Buzzer_init();
    23b8:	0e 94 55 07 	call	0xeaa	; 0xeaa <Buzzer_init>

	/* Infinite loop to continuously monitor the temperature and control the fan */
	while (1) {
		/* Get the temperature value from the LM35 sensor */
		Temp_Value = LM35_getTemperature();
    23bc:	0e 94 30 11 	call	0x2260	; 0x2260 <LM35_getTemperature>
    23c0:	8b 83       	std	Y+3, r24	; 0x03

		/*Get the light value from LDR sensor*/
		Light_value = LDR_getLightIntensity();
    23c2:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LDR_getLightIntensity>
    23c6:	9a 83       	std	Y+2, r25	; 0x02
    23c8:	89 83       	std	Y+1, r24	; 0x01

		/* Read the value from the flame sensor */
		Flame_detect = FlameSensor_getValue();
    23ca:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <FlameSensor_getValue>
    23ce:	8c 83       	std	Y+4, r24	; 0x04

		if (Flame_detect) {
    23d0:	8c 81       	ldd	r24, Y+4	; 0x04
    23d2:	88 23       	and	r24, r24
    23d4:	b9 f0       	breq	.+46     	; 0x2404 <main+0x7c>
			/* Raise alarm and display alert on the LCD */
			LCD_moveCursor(0, 0);
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	60 e0       	ldi	r22, 0x00	; 0
    23da:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <LCD_moveCursor>
			LCD_clearScreen();
    23de:	0e 94 56 10 	call	0x20ac	; 0x20ac <LCD_clearScreen>
			LCD_displayString("Critical alert!"); /* Display alert message */
    23e2:	80 e6       	ldi	r24, 0x60	; 96
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
			/* Trigger alarm (this can be a buzzer or any other alert mechanism) */
			Buzzer_on(); /* Function to turn on the alarm */
    23ea:	0e 94 66 07 	call	0xecc	; 0xecc <Buzzer_on>
    23ee:	03 c0       	rjmp	.+6      	; 0x23f6 <main+0x6e>

			/* Continue to check for flame until it is no longer detected */
			while (Flame_detect) {
				Flame_detect=FlameSensor_getValue();
    23f0:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <FlameSensor_getValue>
    23f4:	8c 83       	std	Y+4, r24	; 0x04
			LCD_displayString("Critical alert!"); /* Display alert message */
			/* Trigger alarm (this can be a buzzer or any other alert mechanism) */
			Buzzer_on(); /* Function to turn on the alarm */

			/* Continue to check for flame until it is no longer detected */
			while (Flame_detect) {
    23f6:	8c 81       	ldd	r24, Y+4	; 0x04
    23f8:	88 23       	and	r24, r24
    23fa:	d1 f7       	brne	.-12     	; 0x23f0 <main+0x68>
				Flame_detect=FlameSensor_getValue();
			}

			/* Once flame is no longer detected, turn off the alarm */
			Buzzer_off(); /* Function to turn off the alarm */
    23fc:	0e 94 72 07 	call	0xee4	; 0xee4 <Buzzer_off>
			/* Clear the alert message */
			LCD_clearScreen(); /* Clear the LCD screen */
    2400:	0e 94 56 10 	call	0x20ac	; 0x20ac <LCD_clearScreen>
		}
		/* Control the fan based on temperature value */
		/* If the temperature is below 25 degrees, turn off the fan */
		if (Temp_Value < 25) {
    2404:	8b 81       	ldd	r24, Y+3	; 0x03
    2406:	89 31       	cpi	r24, 0x19	; 25
    2408:	68 f4       	brcc	.+26     	; 0x2424 <main+0x9c>
			/* Stop the motor (fan) */
			DC_Motor_Rotate(Stop, 0);
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	60 e0       	ldi	r22, 0x00	; 0
    240e:	0e 94 99 07 	call	0xf32	; 0xf32 <DC_Motor_Rotate>

			/* Move the LCD cursor to the right position and display "Fan is Off" */
			LCD_moveCursor(0, 3);
    2412:	80 e0       	ldi	r24, 0x00	; 0
    2414:	63 e0       	ldi	r22, 0x03	; 3
    2416:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <LCD_moveCursor>
			LCD_displayString("Fan is Off   "); /* Enough spaces to clear "Fan is On" */
    241a:	80 e7       	ldi	r24, 0x70	; 112
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
    2422:	3c c0       	rjmp	.+120    	; 0x249c <main+0x114>

			/* If the temperature is between 25 and 30 degrees, run the fan at 25% speed */
		} else if (Temp_Value < 30) {
    2424:	8b 81       	ldd	r24, Y+3	; 0x03
    2426:	8e 31       	cpi	r24, 0x1E	; 30
    2428:	68 f4       	brcc	.+26     	; 0x2444 <main+0xbc>
			/* Rotate the motor (fan) clockwise at 25% speed */
			DC_Motor_Rotate(ClockWise, 25);
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	69 e1       	ldi	r22, 0x19	; 25
    242e:	0e 94 99 07 	call	0xf32	; 0xf32 <DC_Motor_Rotate>

			/* Move the LCD cursor to the right position and display "Fan is On" */
			LCD_moveCursor(0, 3);
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	63 e0       	ldi	r22, 0x03	; 3
    2436:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <LCD_moveCursor>
			LCD_displayString("Fan is On    "); /* Enough spaces to clear "Fan is Off" */
    243a:	8e e7       	ldi	r24, 0x7E	; 126
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
    2442:	2c c0       	rjmp	.+88     	; 0x249c <main+0x114>

			/* If the temperature is between 30 and 35 degrees, run the fan at 50% speed */
		} else if (Temp_Value < 35) {
    2444:	8b 81       	ldd	r24, Y+3	; 0x03
    2446:	83 32       	cpi	r24, 0x23	; 35
    2448:	68 f4       	brcc	.+26     	; 0x2464 <main+0xdc>
			/* Rotate the motor (fan) clockwise at 50% speed */
			DC_Motor_Rotate(ClockWise, 50);
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	62 e3       	ldi	r22, 0x32	; 50
    244e:	0e 94 99 07 	call	0xf32	; 0xf32 <DC_Motor_Rotate>

			/* Move the LCD cursor to the right position and display "Fan is On" */
			LCD_moveCursor(0, 3);
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	63 e0       	ldi	r22, 0x03	; 3
    2456:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <LCD_moveCursor>
			LCD_displayString("Fan is On    ");
    245a:	8e e7       	ldi	r24, 0x7E	; 126
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
    2462:	1c c0       	rjmp	.+56     	; 0x249c <main+0x114>

			/* If the temperature is between 35 and 40 degrees, run the fan at 75% speed */
		} else if (Temp_Value < 40) {
    2464:	8b 81       	ldd	r24, Y+3	; 0x03
    2466:	88 32       	cpi	r24, 0x28	; 40
    2468:	68 f4       	brcc	.+26     	; 0x2484 <main+0xfc>
			/* Rotate the motor (fan) clockwise at 75% speed */
			DC_Motor_Rotate(ClockWise, 75);
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	6b e4       	ldi	r22, 0x4B	; 75
    246e:	0e 94 99 07 	call	0xf32	; 0xf32 <DC_Motor_Rotate>

			/* Move the LCD cursor to the right position and display "Fan is On" */
			LCD_moveCursor(0, 3);
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	63 e0       	ldi	r22, 0x03	; 3
    2476:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <LCD_moveCursor>
			LCD_displayString("Fan is On    ");
    247a:	8e e7       	ldi	r24, 0x7E	; 126
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
    2482:	0c c0       	rjmp	.+24     	; 0x249c <main+0x114>

			/* If the temperature is 40 degrees or above, run the fan at 100% speed */
		} else {
			/* Rotate the motor (fan) clockwise at 100% speed */
			DC_Motor_Rotate(ClockWise, 100);
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	64 e6       	ldi	r22, 0x64	; 100
    2488:	0e 94 99 07 	call	0xf32	; 0xf32 <DC_Motor_Rotate>

			/* Move the LCD cursor to the right position and display "Fan is On" */
			LCD_moveCursor(0, 3);
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	63 e0       	ldi	r22, 0x03	; 3
    2490:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <LCD_moveCursor>
			LCD_displayString("Fan is On    ");
    2494:	8e e7       	ldi	r24, 0x7E	; 126
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
		}

		/* Control LEDs based on light intensity */
		if (Light_value < 15) {
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	9a 81       	ldd	r25, Y+2	; 0x02
    24a0:	8f 30       	cpi	r24, 0x0F	; 15
    24a2:	91 05       	cpc	r25, r1
    24a4:	50 f4       	brcc	.+20     	; 0x24ba <main+0x132>
			/* Turn on the red LED */
			LED_on(RED_LED);
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	0e 94 ce 10 	call	0x219c	; 0x219c <LED_on>
			/* Turn on the green LED */
			LED_on(GREEN_LED);
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	0e 94 ce 10 	call	0x219c	; 0x219c <LED_on>
			/* Turn on the blue LED */
			LED_on(BLUE_LED);
    24b2:	82 e0       	ldi	r24, 0x02	; 2
    24b4:	0e 94 ce 10 	call	0x219c	; 0x219c <LED_on>
    24b8:	27 c0       	rjmp	.+78     	; 0x2508 <main+0x180>
		} else if (Light_value <= 50) {
    24ba:	89 81       	ldd	r24, Y+1	; 0x01
    24bc:	9a 81       	ldd	r25, Y+2	; 0x02
    24be:	83 33       	cpi	r24, 0x33	; 51
    24c0:	91 05       	cpc	r25, r1
    24c2:	50 f4       	brcc	.+20     	; 0x24d8 <main+0x150>
			/* Turn on the red LED */
			LED_on(RED_LED);
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	0e 94 ce 10 	call	0x219c	; 0x219c <LED_on>
			/* Turn on the green LED */
			LED_on(GREEN_LED);
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	0e 94 ce 10 	call	0x219c	; 0x219c <LED_on>
			/* Turn off the blue LED */
			LED_off(BLUE_LED);
    24d0:	82 e0       	ldi	r24, 0x02	; 2
    24d2:	0e 94 ff 10 	call	0x21fe	; 0x21fe <LED_off>
    24d6:	18 c0       	rjmp	.+48     	; 0x2508 <main+0x180>
		} else if (Light_value <= 70) {
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	9a 81       	ldd	r25, Y+2	; 0x02
    24dc:	87 34       	cpi	r24, 0x47	; 71
    24de:	91 05       	cpc	r25, r1
    24e0:	50 f4       	brcc	.+20     	; 0x24f6 <main+0x16e>
			/* Turn on the red LED */
			LED_on(RED_LED);
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	0e 94 ce 10 	call	0x219c	; 0x219c <LED_on>
			/* Turn off the green LED */
			LED_off(GREEN_LED);
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	0e 94 ff 10 	call	0x21fe	; 0x21fe <LED_off>
			/* Turn off the blue LED */
			LED_off(BLUE_LED);
    24ee:	82 e0       	ldi	r24, 0x02	; 2
    24f0:	0e 94 ff 10 	call	0x21fe	; 0x21fe <LED_off>
    24f4:	09 c0       	rjmp	.+18     	; 0x2508 <main+0x180>
		} else {
			/* Turn off the red LED */
			LED_off(RED_LED);
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	0e 94 ff 10 	call	0x21fe	; 0x21fe <LED_off>
			/* Turn off the green LED */
			LED_off(GREEN_LED);
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	0e 94 ff 10 	call	0x21fe	; 0x21fe <LED_off>
			/* Turn off the blue LED */
			LED_off(BLUE_LED);
    2502:	82 e0       	ldi	r24, 0x02	; 2
    2504:	0e 94 ff 10 	call	0x21fe	; 0x21fe <LED_off>
		}
		/* Display the temperature value on the LCD */
		LCD_moveCursor(1, 0);
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	60 e0       	ldi	r22, 0x00	; 0
    250c:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <LCD_moveCursor>
		LCD_displayString("Temp=");
    2510:	8c e8       	ldi	r24, 0x8C	; 140
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
		LCD_intgerToString(Temp_Value);
    2518:	8b 81       	ldd	r24, Y+3	; 0x03
    251a:	88 2f       	mov	r24, r24
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	0e 94 33 10 	call	0x2066	; 0x2066 <LCD_intgerToString>

		/* Clear any extra characters on the LCD if the temperature value has fewer digits */
		if (Temp_Value < 100) {
    2522:	8b 81       	ldd	r24, Y+3	; 0x03
    2524:	84 36       	cpi	r24, 0x64	; 100
    2526:	18 f4       	brcc	.+6      	; 0x252e <main+0x1a6>
			LCD_displayCharacter(' '); /* Clears leftover digits when Temp_Value is less than 100 */
    2528:	80 e2       	ldi	r24, 0x20	; 32
    252a:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <LCD_displayCharacter>
		}
		/* Display the label for light intensity */
		LCD_displayString(" LDR=");
    252e:	82 e9       	ldi	r24, 0x92	; 146
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
		/* Display light intensity value */
		LCD_intgerToString(Light_value);
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	9a 81       	ldd	r25, Y+2	; 0x02
    253a:	0e 94 33 10 	call	0x2066	; 0x2066 <LCD_intgerToString>
		/* Display percentage sign */
		LCD_displayString("% ");
    253e:	88 e9       	ldi	r24, 0x98	; 152
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayString>
    2546:	3a cf       	rjmp	.-396    	; 0x23bc <main+0x34>

00002548 <__mulsi3>:
    2548:	62 9f       	mul	r22, r18
    254a:	d0 01       	movw	r26, r0
    254c:	73 9f       	mul	r23, r19
    254e:	f0 01       	movw	r30, r0
    2550:	82 9f       	mul	r24, r18
    2552:	e0 0d       	add	r30, r0
    2554:	f1 1d       	adc	r31, r1
    2556:	64 9f       	mul	r22, r20
    2558:	e0 0d       	add	r30, r0
    255a:	f1 1d       	adc	r31, r1
    255c:	92 9f       	mul	r25, r18
    255e:	f0 0d       	add	r31, r0
    2560:	83 9f       	mul	r24, r19
    2562:	f0 0d       	add	r31, r0
    2564:	74 9f       	mul	r23, r20
    2566:	f0 0d       	add	r31, r0
    2568:	65 9f       	mul	r22, r21
    256a:	f0 0d       	add	r31, r0
    256c:	99 27       	eor	r25, r25
    256e:	72 9f       	mul	r23, r18
    2570:	b0 0d       	add	r27, r0
    2572:	e1 1d       	adc	r30, r1
    2574:	f9 1f       	adc	r31, r25
    2576:	63 9f       	mul	r22, r19
    2578:	b0 0d       	add	r27, r0
    257a:	e1 1d       	adc	r30, r1
    257c:	f9 1f       	adc	r31, r25
    257e:	bd 01       	movw	r22, r26
    2580:	cf 01       	movw	r24, r30
    2582:	11 24       	eor	r1, r1
    2584:	08 95       	ret

00002586 <__udivmodhi4>:
    2586:	aa 1b       	sub	r26, r26
    2588:	bb 1b       	sub	r27, r27
    258a:	51 e1       	ldi	r21, 0x11	; 17
    258c:	07 c0       	rjmp	.+14     	; 0x259c <__udivmodhi4_ep>

0000258e <__udivmodhi4_loop>:
    258e:	aa 1f       	adc	r26, r26
    2590:	bb 1f       	adc	r27, r27
    2592:	a6 17       	cp	r26, r22
    2594:	b7 07       	cpc	r27, r23
    2596:	10 f0       	brcs	.+4      	; 0x259c <__udivmodhi4_ep>
    2598:	a6 1b       	sub	r26, r22
    259a:	b7 0b       	sbc	r27, r23

0000259c <__udivmodhi4_ep>:
    259c:	88 1f       	adc	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	5a 95       	dec	r21
    25a2:	a9 f7       	brne	.-22     	; 0x258e <__udivmodhi4_loop>
    25a4:	80 95       	com	r24
    25a6:	90 95       	com	r25
    25a8:	bc 01       	movw	r22, r24
    25aa:	cd 01       	movw	r24, r26
    25ac:	08 95       	ret

000025ae <__prologue_saves__>:
    25ae:	2f 92       	push	r2
    25b0:	3f 92       	push	r3
    25b2:	4f 92       	push	r4
    25b4:	5f 92       	push	r5
    25b6:	6f 92       	push	r6
    25b8:	7f 92       	push	r7
    25ba:	8f 92       	push	r8
    25bc:	9f 92       	push	r9
    25be:	af 92       	push	r10
    25c0:	bf 92       	push	r11
    25c2:	cf 92       	push	r12
    25c4:	df 92       	push	r13
    25c6:	ef 92       	push	r14
    25c8:	ff 92       	push	r15
    25ca:	0f 93       	push	r16
    25cc:	1f 93       	push	r17
    25ce:	cf 93       	push	r28
    25d0:	df 93       	push	r29
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
    25d6:	ca 1b       	sub	r28, r26
    25d8:	db 0b       	sbc	r29, r27
    25da:	0f b6       	in	r0, 0x3f	; 63
    25dc:	f8 94       	cli
    25de:	de bf       	out	0x3e, r29	; 62
    25e0:	0f be       	out	0x3f, r0	; 63
    25e2:	cd bf       	out	0x3d, r28	; 61
    25e4:	09 94       	ijmp

000025e6 <__epilogue_restores__>:
    25e6:	2a 88       	ldd	r2, Y+18	; 0x12
    25e8:	39 88       	ldd	r3, Y+17	; 0x11
    25ea:	48 88       	ldd	r4, Y+16	; 0x10
    25ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    25ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    25f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    25f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    25f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    25f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    25f8:	b9 84       	ldd	r11, Y+9	; 0x09
    25fa:	c8 84       	ldd	r12, Y+8	; 0x08
    25fc:	df 80       	ldd	r13, Y+7	; 0x07
    25fe:	ee 80       	ldd	r14, Y+6	; 0x06
    2600:	fd 80       	ldd	r15, Y+5	; 0x05
    2602:	0c 81       	ldd	r16, Y+4	; 0x04
    2604:	1b 81       	ldd	r17, Y+3	; 0x03
    2606:	aa 81       	ldd	r26, Y+2	; 0x02
    2608:	b9 81       	ldd	r27, Y+1	; 0x01
    260a:	ce 0f       	add	r28, r30
    260c:	d1 1d       	adc	r29, r1
    260e:	0f b6       	in	r0, 0x3f	; 63
    2610:	f8 94       	cli
    2612:	de bf       	out	0x3e, r29	; 62
    2614:	0f be       	out	0x3f, r0	; 63
    2616:	cd bf       	out	0x3d, r28	; 61
    2618:	ed 01       	movw	r28, r26
    261a:	08 95       	ret

0000261c <itoa>:
    261c:	fb 01       	movw	r30, r22
    261e:	9f 01       	movw	r18, r30
    2620:	e8 94       	clt
    2622:	42 30       	cpi	r20, 0x02	; 2
    2624:	c4 f0       	brlt	.+48     	; 0x2656 <itoa+0x3a>
    2626:	45 32       	cpi	r20, 0x25	; 37
    2628:	b4 f4       	brge	.+44     	; 0x2656 <itoa+0x3a>
    262a:	4a 30       	cpi	r20, 0x0A	; 10
    262c:	29 f4       	brne	.+10     	; 0x2638 <itoa+0x1c>
    262e:	97 fb       	bst	r25, 7
    2630:	1e f4       	brtc	.+6      	; 0x2638 <itoa+0x1c>
    2632:	90 95       	com	r25
    2634:	81 95       	neg	r24
    2636:	9f 4f       	sbci	r25, 0xFF	; 255
    2638:	64 2f       	mov	r22, r20
    263a:	77 27       	eor	r23, r23
    263c:	0e 94 c3 12 	call	0x2586	; 0x2586 <__udivmodhi4>
    2640:	80 5d       	subi	r24, 0xD0	; 208
    2642:	8a 33       	cpi	r24, 0x3A	; 58
    2644:	0c f0       	brlt	.+2      	; 0x2648 <itoa+0x2c>
    2646:	89 5d       	subi	r24, 0xD9	; 217
    2648:	81 93       	st	Z+, r24
    264a:	cb 01       	movw	r24, r22
    264c:	00 97       	sbiw	r24, 0x00	; 0
    264e:	a1 f7       	brne	.-24     	; 0x2638 <itoa+0x1c>
    2650:	16 f4       	brtc	.+4      	; 0x2656 <itoa+0x3a>
    2652:	5d e2       	ldi	r21, 0x2D	; 45
    2654:	51 93       	st	Z+, r21
    2656:	10 82       	st	Z, r1
    2658:	c9 01       	movw	r24, r18
    265a:	0c 94 2f 13 	jmp	0x265e	; 0x265e <strrev>

0000265e <strrev>:
    265e:	dc 01       	movw	r26, r24
    2660:	fc 01       	movw	r30, r24
    2662:	67 2f       	mov	r22, r23
    2664:	71 91       	ld	r23, Z+
    2666:	77 23       	and	r23, r23
    2668:	e1 f7       	brne	.-8      	; 0x2662 <strrev+0x4>
    266a:	32 97       	sbiw	r30, 0x02	; 2
    266c:	04 c0       	rjmp	.+8      	; 0x2676 <strrev+0x18>
    266e:	7c 91       	ld	r23, X
    2670:	6d 93       	st	X+, r22
    2672:	70 83       	st	Z, r23
    2674:	62 91       	ld	r22, -Z
    2676:	ae 17       	cp	r26, r30
    2678:	bf 07       	cpc	r27, r31
    267a:	c8 f3       	brcs	.-14     	; 0x266e <strrev+0x10>
    267c:	08 95       	ret

0000267e <_exit>:
    267e:	f8 94       	cli

00002680 <__stop_program>:
    2680:	ff cf       	rjmp	.-2      	; 0x2680 <__stop_program>
